{"version":3,"file":"static/chunks/7872.056ca41177906a8f.js","mappings":"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","sources":["webpack://_N_E/./lib/bigint/compareBns.ts","webpack://_N_E/./lib/blob/guessDataType.ts","webpack://_N_E/./lib/blob/index.ts","webpack://_N_E/./lib/blob/removeNonSignificantZeroBytes.ts","webpack://_N_E/./lib/hexToDecimal.ts","webpack://_N_E/./types/api/arbitrumL2.ts","webpack://_N_E/./lib/rollups/arbitrum.ts","webpack://_N_E/./stubs/blobs.ts","webpack://_N_E/./types/api/zkSyncL2.ts","webpack://_N_E/./ui/tx/assetFlows/components/NovesTokenTooltipContent.tsx","webpack://_N_E/./ui/tx/assetFlows/components/NovesActionSnippet.tsx","webpack://_N_E/./ui/tx/assetFlows/TxAssetFlowsListItem.tsx","webpack://_N_E/./ui/tx/assetFlows/TxAssetFlowsTableItem.tsx","webpack://_N_E/./ui/tx/assetFlows/utils/generateFlowViewData.ts","webpack://_N_E/./ui/tx/TxAssetFlows.tsx","webpack://_N_E/./ui/tx/authorizations/TxAuthorizationsListItem.tsx","webpack://_N_E/./ui/tx/authorizations/TxAuthorizationsList.tsx","webpack://_N_E/./ui/tx/authorizations/TxAuthorizationsTableItem.tsx","webpack://_N_E/./ui/tx/authorizations/TxAuthorizationsTable.tsx","webpack://_N_E/./ui/tx/TxAuthorizations.tsx","webpack://_N_E/./ui/shared/blob/BlobDataType.tsx","webpack://_N_E/./ui/tx/blobs/TxBlobListItem.tsx","webpack://_N_E/./ui/tx/blobs/TxBlobsList.tsx","webpack://_N_E/./ui/tx/blobs/TxBlobsTableItem.tsx","webpack://_N_E/./ui/tx/blobs/TxBlobsTable.tsx","webpack://_N_E/./ui/tx/TxBlobs.tsx","webpack://_N_E/./ui/shared/alerts/TestnetWarning.tsx","webpack://_N_E/./types/api/scrollL2.ts","webpack://_N_E/./types/api/transaction.ts","webpack://_N_E/./lib/tx/arbitrumMessageStatusDescription.ts","webpack://_N_E/./lib/tx/getConfirmationDuration.ts","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActionsInterpretation.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsAction.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActionsRaw.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActions.tsx","webpack://_N_E/./ui/tx/details/TxDetailsBurntFees.tsx","webpack://_N_E/./ui/tx/details/TxDetailsFeePerGas.tsx","webpack://_N_E/./ui/tx/details/TxDetailsGasPrice.tsx","webpack://_N_E/./ui/tx/details/TxDetailsOther.tsx","webpack://_N_E/./ui/tx/details/TxDetailsTokenTransfers.tsx","webpack://_N_E/./ui/tx/details/TxDetailsWithdrawalStatus.tsx","webpack://_N_E/./ui/tx/details/TxRevertReason.tsx","webpack://_N_E/./ui/tx/TxAllowedPeekers.tsx","webpack://_N_E/./ui/tx/details/TxInfoScrollFees.tsx","webpack://_N_E/./ui/tx/details/TxInfo.tsx","webpack://_N_E/./ui/tx/TxDetails.tsx","webpack://_N_E/./ui/tx/TxDetailsDegraded.tsx","webpack://_N_E/./ui/tx/TxDetailsWrapped.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsListItem.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsList.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsTableItem.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsTable.tsx","webpack://_N_E/./ui/tx/TxInternals.tsx","webpack://_N_E/./ui/tx/TxRawTrace.tsx","webpack://_N_E/./stubs/txStateChanges.ts","webpack://_N_E/./ui/tx/state/TxStateTokenIdList.tsx","webpack://_N_E/./ui/tx/state/utils.tsx","webpack://_N_E/./ui/tx/state/TxStateListItem.tsx","webpack://_N_E/./ui/tx/state/TxStateList.tsx","webpack://_N_E/./ui/tx/state/TxStateTableItem.tsx","webpack://_N_E/./ui/tx/state/TxStateTable.tsx","webpack://_N_E/./ui/tx/TxState.tsx","webpack://_N_E/./ui/tx/assetFlows/utils/getAddressValues.ts","webpack://_N_E/./ui/tx/assetFlows/utils/getTokensData.ts","webpack://_N_E/./ui/tx/assetFlows/utils/createNovesSummaryObject.ts","webpack://_N_E/./ui/tx/TxSubHeading.tsx","webpack://_N_E/./ui/tx/TxUserOps.tsx","webpack://_N_E/./ui/pages/Transaction.tsx","webpack://_N_E/./ui/shared/TokenTransferSnippet/TokenTransferSnippetFiat.tsx","webpack://_N_E/./ui/shared/TokenTransferSnippet/TokenTransferSnippetNft.tsx","webpack://_N_E/./ui/shared/TokenTransferSnippet/TokenTransferSnippet.tsx","webpack://_N_E/./ui/shared/address/utils.ts","webpack://_N_E/./ui/shared/entities/block/BatchEntityL2.tsx","webpack://_N_E/./ui/shared/entities/tx/TxEntityL1.tsx","webpack://_N_E/./ui/shared/sort/getNextSortValue.ts","webpack://_N_E/./ui/shared/statusTag/TxStatus.tsx","webpack://_N_E/./ui/shared/verificationSteps/VerificationStep.tsx","webpack://_N_E/./ui/shared/verificationSteps/VerificationSteps.tsx","webpack://_N_E/./ui/txnBatches/zkSyncL2/ZkSyncL2TxnBatchHashesInfo.tsx"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport default function compareBns(value1: string | number, value2: string | number) {\n  const value1Bn = new BigNumber(value1);\n  const value2Bn = new BigNumber(value2);\n  if (value1Bn.isGreaterThan(value2Bn)) {\n    return 1;\n  }\n  if (value1Bn.isLessThan(value2Bn)) {\n    return -1;\n  }\n  return 0;\n}\n","import filetype from 'magic-bytes.js';\n\nimport hexToBytes from 'lib/hexToBytes';\n\nimport removeNonSignificantZeroBytes from './removeNonSignificantZeroBytes';\n\nexport default function guessDataType(data: string) {\n  const bytes = hexToBytes(data);\n  const filteredBytes = removeNonSignificantZeroBytes(bytes);\n\n  return filetype(filteredBytes)[0];\n}\n","export { default as guessDataType } from './guessDataType';\n","export default function removeNonSignificantZeroBytes(bytes: Uint8Array) {\n  return shouldRemoveBytes(bytes) ? bytes.filter((item, index) => index % 32) : bytes;\n}\n\n// check if every 0, 32, 64, etc byte is 0 in the provided array\nfunction shouldRemoveBytes(bytes: Uint8Array) {\n  let result = true;\n\n  for (let index = 0; index < bytes.length; index += 32) {\n    const element = bytes[index];\n    if (element === 0) {\n      continue;\n    } else {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n}\n","export default function hetToDecimal(hex: string) {\n  const strippedHex = hex.startsWith('0x') ? hex.slice(2) : hex;\n  return parseInt(strippedHex, 16);\n}\n","import type { Block } from './block';\nimport type { Transaction } from './transaction';\n\nexport interface ArbitrumLatestDepositsItem {\n  completion_transaction_hash: string;\n  origination_timestamp: string | null;\n  origination_transaction_block_number: number | null;\n  origination_transaction_hash: string | null;\n}\n\nexport interface ArbitrumLatestDepositsResponse {\n  items: Array<ArbitrumLatestDepositsItem>;\n}\n\nexport type ArbitrumL2MessagesItem = {\n  completion_transaction_hash: string | null;\n  id: number;\n  origination_address: string;\n  origination_timestamp: string | null;\n  origination_transaction_block_number: number | null;\n  origination_transaction_hash: string;\n  status: 'initiated' | 'sent' | 'confirmed' | 'relayed';\n};\n\nexport type ArbitrumL2MessagesResponse = {\n  items: Array<ArbitrumL2MessagesItem>;\n  next_page_params: {\n    direction: string;\n    id: number;\n    items_count: number;\n  };\n};\n\nexport type ArbitrumL2TxData = {\n  hash: string | null;\n  status: string | null;\n  timestamp: string | null;\n};\n\ntype ArbitrumL2BatchCommitmentTx = {\n  block_number: number;\n  hash: string;\n  status: string;\n  timestamp: string;\n};\n\ntype BatchDataContainer = 'in_blob4844' | 'in_calldata' | 'in_anytrust' | 'in_celestia' | null;\n\nexport type ArbitrumL2TxnBatchesItem = {\n  blocks_count: number;\n  commitment_transaction: ArbitrumL2BatchCommitmentTx;\n  number: number;\n  transactions_count: number;\n  batch_data_container: BatchDataContainer;\n};\n\nexport type ArbitrumL2TxnBatchesResponse = {\n  items: Array<ArbitrumL2TxnBatchesItem>;\n  next_page_params: {\n    number: number;\n    items_count: number;\n  } | null;\n};\n\nexport type ArbitrumL2TxnBatchDAAnytrust = {\n  batch_data_container: 'in_anytrust';\n  bls_signature: string;\n  data_hash: string;\n  timeout: string;\n  signers: Array<{\n    key: string;\n    trusted: boolean;\n    proof?: string;\n  }>;\n};\n\nexport type ArbitrumL2TxnBatchDataAvailability = ArbitrumL2TxnBatchDAAnytrust | {\n  batch_data_container: Exclude<BatchDataContainer, 'in_anytrust'>;\n};\n\nexport type ArbitrumL2TxnBatch = {\n  after_acc: string;\n  before_acc: string;\n  commitment_transaction: ArbitrumL2BatchCommitmentTx;\n  end_block: number;\n  start_block: number;\n  number: number;\n  transactions_count: number;\n  data_availability: ArbitrumL2TxnBatchDataAvailability;\n};\n\nexport type ArbitrumL2BatchTxs = {\n  items: Array<Transaction>;\n  next_page_params: {\n    batch_number: string;\n    block_number: number;\n    index: number;\n    items_count: number;\n  } | null;\n};\n\nexport type ArbitrumL2BatchBlocks = {\n  items: Array<Block>;\n  next_page_params: {\n    batch_number: string;\n    block_number: number;\n    items_count: number;\n  } | null;\n};\n\nexport const ARBITRUM_L2_TX_BATCH_STATUSES = [\n  'Processed on rollup' as const,\n  'Sent to base' as const,\n  'Confirmed on base' as const,\n];\n\nexport type ArbitrumBatchStatus = typeof ARBITRUM_L2_TX_BATCH_STATUSES[number];\n\nexport type NewArbitrumBatchSocketResponse = { batch: ArbitrumL2TxnBatchesItem };\n","import { ARBITRUM_L2_TX_BATCH_STATUSES, type ArbitrumBatchStatus, type ArbitrumL2TxData } from 'types/api/arbitrumL2';\n\nimport config from 'configs/app';\n\nconst rollupFeature = config.features.rollup;\n\ntype Args = {\n  status: ArbitrumBatchStatus;\n  commitment_transaction: ArbitrumL2TxData;\n  confirmation_transaction: ArbitrumL2TxData;\n};\n\nexport const VERIFICATION_STEPS_MAP: Record<ArbitrumBatchStatus, string> = {\n  'Processed on rollup': 'Processed on rollup',\n  'Sent to base': rollupFeature.isEnabled && rollupFeature.parentChainName ? `Sent to ${ rollupFeature.parentChainName }` : 'Sent to parent chain',\n  'Confirmed on base': rollupFeature.isEnabled && rollupFeature.parentChainName ?\n    `Confirmed on ${ rollupFeature.parentChainName }` :\n    'Confirmed on parent chain',\n};\n\nexport const verificationSteps = (() => {\n  return ARBITRUM_L2_TX_BATCH_STATUSES.map((status) => VERIFICATION_STEPS_MAP[status]);\n})();\n\nexport function getVerificationStepStatus({\n  status,\n  commitment_transaction: commitTx,\n  confirmation_transaction: confirmTx,\n}: Args) {\n  if (status === 'Sent to base') {\n    if (commitTx.status === 'unfinalized') {\n      return 'pending';\n    }\n  }\n  if (status === 'Confirmed on base') {\n    if (confirmTx.status === 'unfinalized') {\n      return 'pending';\n    }\n  }\n  return 'finalized';\n}\n","import type { Blob, TxBlob } from 'types/api/blobs';\n\nimport { TX_HASH } from './tx';\n\nconst BLOB_HASH = '0x0137cd898a9aaa92bbe94999d2a98241f5eabc829d9354160061789963f85995';\nconst BLOB_PROOF = '0x82683d5d6e58a76f2a607b8712cad113621d46cb86a6bcfcffb1e274a70c7308b3243c6075ee22d904fecf8d4c147c6f';\n\nexport const TX_BLOB: TxBlob = {\n  blob_data: '0x010203040506070809101112',\n  hash: BLOB_HASH,\n  kzg_commitment: BLOB_PROOF,\n  kzg_proof: BLOB_PROOF,\n};\n\nexport const BLOB: Blob = {\n  ...TX_BLOB,\n  transaction_hashes: [\n    { block_consensus: true, transaction_hash: TX_HASH },\n  ],\n};\n","import type { Transaction } from './transaction';\n\nexport const ZKSYNC_L2_TX_BATCH_STATUSES = [\n  'Processed on L2' as const,\n  'Sealed on L2' as const,\n  'Sent to L1' as const,\n  'Validated on L1' as const,\n  'Executed on L1' as const,\n];\n\nexport type ZkSyncBatchStatus = typeof ZKSYNC_L2_TX_BATCH_STATUSES[number];\n\nexport interface ZkSyncBatchesItem {\n  commit_transaction_hash: string | null;\n  commit_transaction_timestamp: string | null;\n  execute_transaction_hash: string | null;\n  execute_transaction_timestamp: string | null;\n  number: number;\n  prove_transaction_hash: string | null;\n  prove_transaction_timestamp: string | null;\n  status: ZkSyncBatchStatus;\n  timestamp: string;\n  transaction_count: number;\n}\n\nexport type ZkSyncBatchesResponse = {\n  items: Array<ZkSyncBatchesItem>;\n  next_page_params: {\n    number: number;\n    items_count: number;\n  } | null;\n};\n\nexport interface ZkSyncBatch extends Omit<ZkSyncBatchesItem, 'transaction_count'> {\n  start_block: number;\n  end_block: number;\n  l1_gas_price: string;\n  l1_transaction_count: number;\n  l2_fair_gas_price: string;\n  l2_transaction_count: number;\n  root_hash: string;\n}\n\nexport type ZkSyncBatchTxs = {\n  items: Array<Transaction>;\n  next_page_params: {\n    batch_number: string;\n    block_number: number;\n    index: number;\n    items_count: number;\n  } | null;\n};\n","import { Box, Text, useColorModeValue } from '@chakra-ui/react';\nimport type { FC } from 'react';\nimport React from 'react';\n\nimport type { NovesNft, NovesToken } from 'types/api/noves';\n\nimport { HEX_REGEXP } from 'lib/regexp';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\n\ninterface Props {\n  amount?: string;\n  token: NovesToken | NovesNft | undefined;\n}\n\nconst NovesTokenTooltipContent: FC<Props> = ({ token, amount }) => {\n  const textColor = useColorModeValue('white', 'blackAlpha.900');\n\n  if (!token) {\n    return null;\n  }\n\n  const showTokenName = token.symbol !== token.name;\n  const showTokenAddress = HEX_REGEXP.test(token.address);\n\n  return (\n    <Box color={ textColor } display=\"flex\" flexDir=\"column\" alignItems=\"center\" gap={ 1 }>\n      <Text as=\"p\" color=\"inherit\" fontWeight=\"600\">\n        <Text color=\"inherit\" as=\"span\">\n          { amount }\n        </Text>\n        <Text color=\"inherit\" as=\"span\" ml={ 1 }>\n          { token.symbol }\n        </Text>\n      </Text>\n\n      { showTokenName && (\n        <Text as=\"p\" color=\"inherit\" fontWeight=\"600\" mt=\"6px\">\n          { token.name }\n        </Text>\n      ) }\n\n      { showTokenAddress && (\n        <Box display=\"flex\" alignItems=\"center\">\n          <Text color=\"inherit\" fontWeight=\"400\">\n            { token.address }\n          </Text>\n          <CopyToClipboard text={ token.address }/>\n        </Box>\n      ) }\n\n    </Box>\n  );\n};\n\nexport default React.memo(NovesTokenTooltipContent);\n","import { Box, Hide, PopoverArrow, PopoverContent, PopoverTrigger, Show, Text, useColorModeValue } from '@chakra-ui/react';\nimport type { FC } from 'react';\nimport React from 'react';\n\nimport { HEX_REGEXP } from 'lib/regexp';\nimport Popover from 'ui/shared/chakra/Popover';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\nimport type { NovesFlowViewItem } from '../utils/generateFlowViewData';\nimport NovesTokenTooltipContent from './NovesTokenTooltipContent';\n\ninterface Props {\n  item: NovesFlowViewItem;\n  isLoaded: boolean;\n}\n\nconst NovesActionSnippet: FC<Props> = ({ item, isLoaded }) => {\n  const popoverBg = useColorModeValue('gray.700', 'gray.300');\n\n  const token = React.useMemo(() => {\n    const action = item.action;\n\n    const name = action.nft?.name || action.token?.name;\n    const symbol = action.nft?.symbol || action.token?.symbol;\n\n    const token = {\n      name: name || '',\n      symbol: (symbol?.toLowerCase() === name?.toLowerCase() ? undefined : symbol) || '',\n      address: action.nft?.address || action.token?.address || '',\n      icon_url: '',\n      type: action.nft ? 'ERC-721' as const : 'ERC-20' as const,\n    };\n\n    return token;\n  }, [ item.action ]);\n\n  const validTokenAddress = token.address ? HEX_REGEXP.test(token.address) : false;\n\n  return (\n    <Skeleton borderRadius=\"sm\" isLoaded={ isLoaded }>\n      <Hide above=\"lg\">\n        <Box display=\"flex\" gap={ 2 } cursor=\"pointer\" flexWrap=\"wrap\">\n          <Text fontWeight=\"700\" >\n            { item.action.label }\n          </Text>\n          <Text fontWeight=\"500\">\n            { item.action.amount }\n          </Text>\n          <TokenEntity\n            token={ token }\n            noCopy\n            noSymbol\n            noLink={ !validTokenAddress }\n            fontWeight=\"500\"\n            color=\"link\"\n            w=\"fit-content\"\n          />\n        </Box>\n      </Hide>\n      <Show above=\"lg\">\n\n        <Popover\n          trigger=\"hover\"\n          openDelay={ 50 }\n          closeDelay={ 50 }\n          arrowSize={ 15 }\n          arrowShadowColor=\"transparent\"\n          placement=\"bottom\"\n          flip={ false }\n        >\n          <PopoverTrigger>\n            <Box display=\"flex\" gap={ 2 } cursor=\"pointer\" w=\"fit-content\" maxW=\"100%\" alignItems=\"center\">\n              <IconSvg\n                name=\"lightning\"\n                height=\"5\"\n                width=\"5\"\n                color=\"gray.500\"\n                _dark={{ color: 'gray.400' }}\n              />\n              <Text fontWeight=\"700\" >\n                { item.action.label }\n              </Text>\n              <Text fontWeight=\"500\">\n                { item.action.amount }\n              </Text>\n              <TokenEntity\n                token={ token }\n                noCopy\n                jointSymbol\n                noLink={ !validTokenAddress }\n                fontWeight=\"500\"\n                color=\"link\"\n                w=\"fit-content\"\n              />\n            </Box>\n\n          </PopoverTrigger>\n          <PopoverContent\n            bg={ popoverBg }\n            shadow=\"lg\"\n            width=\"fit-content\"\n            zIndex=\"modal\"\n            padding={ 2 }\n          >\n            <PopoverArrow bg={ popoverBg }/>\n\n            <NovesTokenTooltipContent\n              token={ item.action.token || item.action.nft }\n              amount={ item.action.amount }\n            />\n          </PopoverContent>\n        </Popover>\n      </Show>\n    </Skeleton>\n  );\n};\n\nexport default React.memo(NovesActionSnippet);\n","import { Box, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\nimport ListItemMobile from 'ui/shared/ListItemMobile/ListItemMobile';\nimport NovesFromTo from 'ui/shared/Noves/NovesFromTo';\n\nimport NovesActionSnippet from './components/NovesActionSnippet';\nimport type { NovesFlowViewItem } from './utils/generateFlowViewData';\n\ntype Props = {\n  isPlaceholderData: boolean;\n  item: NovesFlowViewItem;\n};\n\nconst TxAssetFlowsListItem = (props: Props) => {\n\n  return (\n    <ListItemMobile rowGap={ 4 } w=\"full\" >\n      <Skeleton borderRadius=\"sm\" isLoaded={ !props.isPlaceholderData } w=\"full\">\n\n        <Box display=\"flex\" >\n          <IconSvg\n            name=\"lightning\"\n            height=\"5\"\n            width=\"5\"\n            color=\"text_secondary\"\n          />\n\n          <Text fontSize=\"sm\" fontWeight={ 500 }>\n            Action\n          </Text>\n        </Box>\n\n      </Skeleton>\n\n      <NovesActionSnippet item={ props.item } isLoaded={ !props.isPlaceholderData }/>\n\n      <Box maxW=\"full\">\n        <NovesFromTo item={ props.item } isLoaded={ !props.isPlaceholderData }/>\n      </Box>\n    </ListItemMobile>\n  );\n};\n\nexport default React.memo(TxAssetFlowsListItem);\n","import { Td, Tr } from '@chakra-ui/react';\nimport React from 'react';\n\nimport NovesFromTo from 'ui/shared/Noves/NovesFromTo';\n\nimport NovesActionSnippet from './components/NovesActionSnippet';\nimport type { NovesFlowViewItem } from './utils/generateFlowViewData';\n\ntype Props = {\n  isPlaceholderData: boolean;\n  item: NovesFlowViewItem;\n};\n\nconst TxAssetFlowsTableItem = (props: Props) => {\n\n  return (\n    <Tr >\n      <Td px={ 3 } py={ 5 } fontSize=\"sm\" borderColor=\"gray.200\" _dark={{ borderColor: 'whiteAlpha.200' }}>\n        <NovesActionSnippet item={ props.item } isLoaded={ !props.isPlaceholderData }/>\n      </Td>\n      <Td px={ 3 } py=\"18px\" fontSize=\"sm\" borderColor=\"gray.200\" _dark={{ borderColor: 'whiteAlpha.200' }}>\n        <NovesFromTo item={ props.item } isLoaded={ !props.isPlaceholderData }/>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxAssetFlowsTableItem);\n","import type { NovesNft, NovesResponseData, NovesSentReceived, NovesToken } from 'types/api/noves';\n\nexport interface NovesAction {\n  label: string;\n  amount: string | undefined;\n  flowDirection: 'toLeft' | 'toRight';\n  nft: NovesNft | undefined;\n  token: NovesToken | undefined;\n}\n\nexport interface NovesFlowViewItem {\n  action: NovesAction;\n  rightActor: {\n    address: string ;\n    name: string | null;\n  };\n  accountAddress: string;\n}\n\nexport function generateFlowViewData(data: NovesResponseData): Array<NovesFlowViewItem> {\n  const perspectiveAddress = data.accountAddress.toLowerCase();\n\n  const sent = data.classificationData.sent || [];\n  const received = data.classificationData.received || [];\n\n  const txItems = [ ...sent, ...received ];\n\n  const paidGasIndex = txItems.findIndex((item) => item.action === 'paidGas');\n  if (paidGasIndex >= 0) {\n    const element = txItems.splice(paidGasIndex, 1)[0];\n    element.to.name = 'Validators';\n    txItems.splice(txItems.length, 0, element);\n  }\n\n  const flowViewData = txItems.map((item) => {\n    const action = {\n      label: item.actionFormatted || item.action,\n      amount: item.amount || undefined,\n      flowDirection: getFlowDirection(item, perspectiveAddress),\n      nft: item.nft || undefined,\n      token: item.token || undefined,\n    };\n\n    if (item.from.name && item.from.name.includes('(this wallet)')) {\n      item.from.name = item.from.name.split('(this wallet)')[0];\n    }\n\n    if (item.to.name && item.to.name.includes('(this wallet)')) {\n      item.to.name = item.to.name.split('(this wallet)')[0];\n    }\n\n    const rightActor = getRightActor(item, perspectiveAddress);\n\n    return { action, rightActor, accountAddress: perspectiveAddress };\n  });\n\n  return flowViewData;\n}\n\nfunction getRightActor(item: NovesSentReceived, perspectiveAddress: string) {\n  if (!item.to.address || item.to.address.toLowerCase() !== perspectiveAddress) {\n    return { address: item.to.address || '', name: item.to.name };\n  }\n\n  return { address: item.from.address, name: item.from.name };\n}\n\nfunction getFlowDirection(item: NovesSentReceived, perspectiveAddress: string): 'toLeft' | 'toRight' {\n  if (item.from.address && item.from.address.toLowerCase() === perspectiveAddress) {\n    return 'toRight';\n  }\n\n  return 'toLeft';\n}\n","import { Table, Tbody, Tr, Th, Box, Text, Show, Hide } from '@chakra-ui/react';\nimport { chunk } from 'es-toolkit';\nimport React, { useMemo, useState } from 'react';\n\nimport type { PaginationParams } from 'ui/shared/pagination/types';\n\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { NOVES_TRANSLATE } from 'stubs/noves/NovesTranslate';\nimport ActionBar from 'ui/shared/ActionBar';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport TheadSticky from 'ui/shared/TheadSticky';\n\nimport TxAssetFlowsListItem from './assetFlows/TxAssetFlowsListItem';\nimport TxAssetFlowsTableItem from './assetFlows/TxAssetFlowsTableItem';\nimport { generateFlowViewData } from './assetFlows/utils/generateFlowViewData';\n\ninterface FlowViewProps {\n  hash: string;\n}\n\nexport default function TxAssetFlows(props: FlowViewProps) {\n\n  const { data: queryData, isPlaceholderData, isError } = useApiQuery('noves_transaction', {\n    pathParams: { hash: props.hash },\n    queryOptions: {\n      enabled: Boolean(props.hash),\n      placeholderData: NOVES_TRANSLATE,\n    },\n  });\n\n  const [ page, setPage ] = useState<number>(1);\n\n  const ViewData = useMemo(() => (queryData ? generateFlowViewData(queryData) : []), [ queryData ]);\n  const chunkedViewData = chunk(ViewData, 50);\n\n  const paginationProps: PaginationParams = useMemo(() => ({\n    onNextPageClick: () => setPage(page + 1),\n    onPrevPageClick: () => setPage(page - 1),\n    resetPage: () => setPage(1),\n    canGoBackwards: page > 1,\n    isLoading: isPlaceholderData,\n    page: page,\n    hasNextPage: Boolean(chunkedViewData[page]),\n    hasPages: Boolean(chunkedViewData[1]),\n    isVisible: Boolean(chunkedViewData[1]),\n  }), [ chunkedViewData, page, isPlaceholderData ]);\n\n  const data = chunkedViewData [page - 1];\n\n  const actionBar = (\n    <ActionBar mt={ -6 } pb={{ base: 6, md: 5 }} flexDir={{ base: 'column', md: 'initial' }} gap={{ base: '2', md: 'initial' }} >\n      <Box display=\"flex\" alignItems=\"center\" gap={ 1 }>\n        <Skeleton borderRadius=\"sm\" isLoaded={ !isPlaceholderData } >\n          <Text fontWeight=\"400\" mr={ 1 }>\n            Wallet\n          </Text>\n        </Skeleton>\n\n        <AddressEntity\n          address={{ hash: queryData?.accountAddress || '' }}\n          fontWeight=\"400\"\n          truncation=\"dynamic\"\n          isLoading={ isPlaceholderData }\n        />\n      </Box>\n      <Pagination ml={{ base: 'auto', lg: 8 }} { ...paginationProps }/>\n    </ActionBar>\n  );\n\n  const content = (\n    <>\n      <Hide above=\"lg\" >\n        { data?.map((item, i) => (\n          <TxAssetFlowsListItem\n            key={ `${ i }-${ item.accountAddress }` }\n            item={ item }\n            isPlaceholderData={ isPlaceholderData }\n          />\n        )) }\n      </Hide>\n\n      <Show above=\"lg\">\n        <Table>\n          <TheadSticky top={ 75 }>\n            <Tr>\n              <Th>\n                Actions\n              </Th>\n              <Th width=\"450px\">\n                From/To\n              </Th>\n            </Tr>\n          </TheadSticky>\n          <Tbody>\n            { data?.map((item, i) => (\n              <TxAssetFlowsTableItem\n                key={ `${ i }-${ item.accountAddress }` }\n                item={ item }\n                isPlaceholderData={ isPlaceholderData }\n              />\n            )) }\n          </Tbody>\n        </Table>\n      </Show>\n    </>\n  );\n\n  return (\n    <DataListDisplay\n      isError={ isError }\n      items={ data }\n      emptyText=\"There are no transfers.\"\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n}\n","import { HStack } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxAuthorization } from 'types/api/transaction';\n\nimport config from 'configs/app';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ListItemMobile from 'ui/shared/ListItemMobile/ListItemMobile';\n\ninterface Props extends TxAuthorization {\n  isLoading?: boolean;\n}\n\nconst TxAuthorizationsListItem = ({ address, authority, chain_id: chainId, nonce, isLoading }: Props) => {\n  return (\n    <ListItemMobile rowGap={ 3 } fontSize=\"sm\">\n      <HStack spacing={ 3 } w=\"100%\">\n        <Skeleton isLoaded={ !isLoading } fontWeight={ 500 }>Address</Skeleton>\n        <AddressEntity address={{ hash: address }} isLoading={ isLoading } noIcon/>\n      </HStack>\n      <HStack spacing={ 3 } w=\"100%\">\n        <Skeleton isLoaded={ !isLoading } fontWeight={ 500 }>Authority</Skeleton>\n        <AddressEntity address={{ hash: authority }} isLoading={ isLoading } noIcon/>\n      </HStack>\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontWeight={ 500 }>Chain</Skeleton>\n        <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">{ chainId === Number(config.chain.id) ? 'this' : 'any' }</Skeleton>\n      </HStack>\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontWeight={ 500 }>Nonce</Skeleton>\n        <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">{ nonce }</Skeleton>\n      </HStack>\n    </ListItemMobile>\n  );\n};\n\nexport default TxAuthorizationsListItem;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxAuthorization } from 'types/api/transaction';\n\nimport TxAuthorizationsListItem from './TxAuthorizationsListItem';\n\ninterface Props {\n  data: Array<TxAuthorization> | undefined;\n  isLoading?: boolean;\n}\n\nconst TxAuthorizationsList = ({ data, isLoading }: Props) => {\n  return (\n    <Box>\n      { data?.map((item, index) => <TxAuthorizationsListItem key={ item.nonce.toString() + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>) }\n    </Box>\n  );\n};\n\nexport default TxAuthorizationsList;\n","import { Tr, Td } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxAuthorization } from 'types/api/transaction';\n\nimport config from 'configs/app';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\n\ninterface Props extends TxAuthorization {\n  isLoading?: boolean;\n}\n\nconst TxAuthorizationsItem = ({ address, authority, chain_id: chainId, nonce, isLoading }: Props) => {\n  return (\n    <Tr alignItems=\"top\">\n      <Td>\n        <AddressEntity address={{ hash: address }} isLoading={ isLoading } noIcon/>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <AddressEntity address={{ hash: authority }} isLoading={ isLoading } noIcon/>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { chainId === Number(config.chain.id) ? 'this' : 'any' }\n        </Skeleton>\n      </Td>\n      <Td isNumeric verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { nonce }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxAuthorizationsItem);\n","import { Table, Tbody, Tr, Th } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxAuthorization } from 'types/api/transaction';\n\nimport { AddressHighlightProvider } from 'lib/contexts/addressHighlight';\nimport { default as Thead } from 'ui/shared/TheadSticky';\n\nimport TxAuthorizationsTableItem from './TxAuthorizationsTableItem';\n\ninterface Props {\n  data: Array<TxAuthorization> | undefined;\n  isLoading?: boolean;\n}\n\nconst TxAuthorizationsTable = ({ data, isLoading }: Props) => {\n  return (\n    <AddressHighlightProvider>\n      <Table>\n        <Thead>\n          <Tr>\n            <Th width=\"50%\">Address</Th>\n            <Th width=\"50%\">Authority</Th>\n            <Th width=\"120px\">Chain</Th>\n            <Th width=\"120px\" isNumeric>Nonce</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          { data?.map((item, index) => (\n            <TxAuthorizationsTableItem key={ item.nonce.toString() + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>\n          )) }\n        </Tbody>\n      </Table>\n    </AddressHighlightProvider>\n  );\n};\n\nexport default TxAuthorizationsTable;\n","import { Show, Hide } from '@chakra-ui/react';\nimport React from 'react';\n\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\n\nimport TxAuthorizationsList from './authorizations/TxAuthorizationsList';\nimport TxAuthorizationsTable from './authorizations/TxAuthorizationsTable';\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxAuthorizations = ({ txQuery }: Props) => {\n\n  if (!txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data?.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const content = (\n    <>\n      <Show below=\"lg\" ssr={ false }>\n        <TxAuthorizationsList data={ txQuery.data?.authorization_list } isLoading={ txQuery.isPlaceholderData }/>\n      </Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxAuthorizationsTable data={ txQuery.data?.authorization_list } isLoading={ txQuery.isPlaceholderData }/>\n      </Hide>\n    </>\n  );\n\n  return (\n    <DataListDisplay\n      isError={ txQuery.isError }\n      items={ txQuery.data?.authorization_list }\n      emptyText=\"There are no authorizations for this transaction.\"\n      content={ content }\n    />\n  );\n};\n\nexport default TxAuthorizations;\n","import { Flex, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport * as blobUtils from 'lib/blob';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport type { IconName } from 'ui/shared/IconSvg';\nimport IconSvg from 'ui/shared/IconSvg';\n\ninterface Props {\n  data: string;\n  isLoading?: boolean;\n}\n\nconst TYPES: Record<string, { iconName: IconName; label: string }> = {\n  image: { iconName: 'blobs/image', label: 'Image' },\n  text: { iconName: 'blobs/text', label: 'Text' },\n  raw: { iconName: 'blobs/raw', label: 'Raw' },\n};\n\nconst BlobDataType = ({ data, isLoading }: Props) => {\n  const iconColor = useColorModeValue('gray.500', 'gray.400');\n\n  const guessedType = React.useMemo(() => {\n    if (isLoading) {\n      return;\n    }\n    return blobUtils.guessDataType(data);\n  }, [ data, isLoading ]);\n\n  const { iconName, label } = (() => {\n    if (guessedType?.mime?.startsWith('image/')) {\n      return TYPES.image;\n    }\n\n    if (\n      guessedType?.mime?.startsWith('text/') ||\n      [\n        'application/json',\n        'application/xml',\n        'application/javascript',\n      ].includes(guessedType?.mime || '')\n    ) {\n      return TYPES.text;\n    }\n\n    return TYPES.raw;\n  })();\n\n  return (\n    <Flex alignItems=\"center\" columnGap={ 2 }>\n      <IconSvg name={ iconName } boxSize={ 5 } color={ iconColor } isLoading={ isLoading }/>\n      <Skeleton isLoaded={ !isLoading }>{ label }</Skeleton>\n    </Flex>\n  );\n};\n\nexport default React.memo(BlobDataType);\n","import React from 'react';\n\nimport type { TxBlob } from 'types/api/blobs';\n\nimport BlobDataType from 'ui/shared/blob/BlobDataType';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport BlobEntity from 'ui/shared/entities/blob/BlobEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\n\ninterface Props {\n  data: TxBlob;\n  isLoading?: boolean;\n}\n\nconst TxBlobListItem = ({ data, isLoading }: Props) => {\n  const size = data.blob_data ? data.blob_data.replace('0x', '').length / 2 : '-';\n\n  return (\n    <ListItemMobileGrid.Container>\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Blob hash</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <BlobEntity hash={ data.hash } isLoading={ isLoading }/>\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Data type</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        { data.blob_data ? <BlobDataType isLoading={ isLoading } data={ data.blob_data }/> : '-' }\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Size, bytes</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Skeleton isLoaded={ !isLoading }>\n          { size.toLocaleString() }\n        </Skeleton>\n      </ListItemMobileGrid.Value>\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default React.memo(TxBlobListItem);\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxBlob } from 'types/api/blobs';\n\nimport TxBlobListItem from './TxBlobListItem';\n\nconst TxBlobList = ({ data, isLoading }: { data: Array<TxBlob>; isLoading?: boolean }) => {\n  return (\n    <Box>\n      { data.map((item, index) => (\n        <TxBlobListItem\n          key={ item.hash + (isLoading ? index : '') }\n          data={ item }\n          isLoading={ isLoading }\n        />\n      )) }\n    </Box>\n  );\n};\n\nexport default TxBlobList;\n","import { Tr, Td } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxBlob } from 'types/api/blobs';\n\nimport BlobDataType from 'ui/shared/blob/BlobDataType';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport BlobEntity from 'ui/shared/entities/blob/BlobEntity';\n\ninterface Props {\n  data: TxBlob;\n  isLoading?: boolean;\n}\n\nconst TxBlobsTableItem = ({ data, isLoading }: Props) => {\n  const size = data.blob_data ? data.blob_data.replace('0x', '').length / 2 : '-';\n\n  return (\n    <Tr alignItems=\"top\">\n      <Td>\n        <BlobEntity hash={ data.hash } noIcon isLoading={ isLoading }/>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        { data.blob_data ? <BlobDataType isLoading={ isLoading } data={ data.blob_data }/> : '-' }\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { size.toLocaleString() }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxBlobsTableItem);\n","import { Table, Tbody, Tr, Th } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxBlob } from 'types/api/blobs';\n\nimport { default as Thead } from 'ui/shared/TheadSticky';\n\nimport TxBlobsTableItem from './TxBlobsTableItem';\n\ninterface Props {\n  data: Array<TxBlob>;\n  top: number;\n  isLoading?: boolean;\n}\n\nconst TxInternalsTable = ({ data, top, isLoading }: Props) => {\n\n  return (\n    <Table>\n      <Thead top={ top }>\n        <Tr>\n          <Th width=\"60%\">Blob hash</Th>\n          <Th width=\"20%\">Data type</Th>\n          <Th width=\"20%\">Size, bytes</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        { data.map((item, index) => (\n          <TxBlobsTableItem key={ item.hash + (isLoading ? index : '') } data={ item } isLoading={ isLoading }/>\n        )) }\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default TxInternalsTable;\n","import { Hide, Show } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { TX_BLOB } from 'stubs/blobs';\nimport { generateListStub } from 'stubs/utils';\nimport ActionBar, { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\n\nimport TxBlobsList from './blobs/TxBlobsList';\nimport TxBlobsTable from './blobs/TxBlobsTable';\nimport TxPendingAlert from './TxPendingAlert';\nimport TxSocketAlert from './TxSocketAlert';\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxBlobs = ({ txQuery }: Props) => {\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_blobs',\n    pathParams: { hash: txQuery.data?.hash },\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.hash) && Boolean(txQuery.data?.status),\n      placeholderData: generateListStub<'tx_blobs'>(TX_BLOB, 3, { next_page_params: null }),\n    },\n  });\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const content = data ? (\n    <>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxBlobsTable data={ data.items } isLoading={ isPlaceholderData } top={ pagination.isVisible ? ACTION_BAR_HEIGHT_DESKTOP : 0 }/>\n      </Hide>\n      <Show below=\"lg\" ssr={ false }>\n        <TxBlobsList data={ data.items } isLoading={ isPlaceholderData }/>\n      </Show>\n    </>\n  ) : null;\n\n  const actionBar = pagination.isVisible ? (\n    <ActionBar mt={ -6 } showShadow>\n      <Pagination ml=\"auto\" { ...pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <DataListDisplay\n      isError={ isError || txQuery.isError }\n      items={ data?.items }\n      emptyText=\"There are no blobs for this transaction.\"\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n};\n\nexport default TxBlobs;\n","import { Alert, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\ninterface Props {\n  isLoading?: boolean;\n  className?: string;\n}\n\nconst TestnetWarning = ({ isLoading, className }: Props) => {\n  if (!config.chain.isTestnet) {\n    return null;\n  }\n\n  return (\n    <Skeleton className={ className } isLoaded={ !isLoading }>\n      <Alert status=\"warning\">This is a testnet transaction only</Alert>\n    </Skeleton>\n  );\n};\n\nexport default React.memo(chakra(TestnetWarning));\n","import type { Block } from './block';\nimport type { Transaction } from './transaction';\n\nexport interface ScrollL2BatchesResponse {\n  items: Array<ScrollL2TxnBatch>;\n  next_page_params: {\n    items_count: number;\n    number: number;\n  };\n}\n\ntype ScrollL2TxnBatchCommitmentTransaction = {\n  block_number: number;\n  hash: string;\n  timestamp: string;\n};\n\ntype ScrollL2TxnBatchConfirmationTransaction = {\n  block_number: number | null;\n  hash: string | null;\n  timestamp: string | null;\n};\n\nexport type ScrollL2TxnBatch = {\n  number: number;\n  commitment_transaction: ScrollL2TxnBatchCommitmentTransaction;\n  confirmation_transaction: ScrollL2TxnBatchConfirmationTransaction;\n  start_block: number;\n  end_block: number;\n  transaction_count: number;\n  data_availability: {\n    batch_data_container: 'in_blob4844' | 'in_calldata';\n  };\n};\n\nexport type ScrollL2TxnBatchTxs = {\n  items: Array<Transaction>;\n  next_page_params: {\n    batch_number: number;\n    block_number: number;\n    index: number;\n    items_count: number;\n  } | null;\n};\n\nexport type ScrollL2TxnBatchBlocks = {\n  items: Array<Block>;\n  next_page_params: {\n    batch_number: number;\n    block_number: number;\n    items_count: number;\n  } | null;\n};\n\nexport type ScrollL2MessagesResponse = {\n  items: Array<ScrollL2MessageItem>;\n  next_page_params: {\n    id: number;\n    items_count: number;\n  } | null;\n};\n\nexport type ScrollL2MessageItem = {\n  id: number;\n  origination_transaction_block_number: number;\n  origination_transaction_hash: string;\n  origination_timestamp: string;\n  completion_transaction_hash: string | null;\n  value: string;\n};\n\nexport const SCROLL_L2_BLOCK_STATUSES = [\n  'Confirmed by Sequencer' as const,\n  'Committed' as const,\n  'Finalized' as const,\n];\n\nexport type ScrollL2BlockStatus = typeof SCROLL_L2_BLOCK_STATUSES[number];\n","import type { AddressParam } from './addressParams';\nimport type { ArbitrumBatchStatus, ArbitrumL2TxData } from './arbitrumL2';\nimport type { BlockTransactionsResponse } from './block';\nimport type { DecodedInput } from './decodedInput';\nimport type { Fee } from './fee';\nimport type { NovesTxTranslation } from './noves';\nimport type { OptimisticL2WithdrawalStatus } from './optimisticL2';\nimport type { ScrollL2BlockStatus } from './scrollL2';\nimport type { TokenInfo } from './token';\nimport type { TokenTransfer } from './tokenTransfer';\nimport type { TxAction } from './txAction';\nimport type { ZkSyncBatchesItem } from './zkSyncL2';\n\nexport type TransactionRevertReason = {\n  raw: string;\n} | DecodedInput;\n\ntype WrappedTransactionFields = 'decoded_input' | 'fee' | 'gas_limit' | 'gas_price' | 'hash' | 'max_fee_per_gas' |\n'max_priority_fee_per_gas' | 'method' | 'nonce' | 'raw_input' | 'to' | 'type' | 'value';\n\nexport interface OpWithdrawal {\n  l1_transaction_hash: string;\n  nonce: number;\n  status: OptimisticL2WithdrawalStatus;\n}\n\nexport type Transaction = {\n  to: AddressParam | null;\n  created_contract: AddressParam | null;\n  hash: string;\n  result: string;\n  confirmations: number;\n  status: 'ok' | 'error' | null | undefined;\n  block_number: number | null;\n  timestamp: string | null;\n  confirmation_duration: Array<number> | null;\n  from: AddressParam;\n  value: string;\n  fee: Fee;\n  gas_price: string | null;\n  type: number | null;\n  gas_used: string | null;\n  gas_limit: string;\n  max_fee_per_gas: string | null;\n  max_priority_fee_per_gas: string | null;\n  priority_fee: string | null;\n  base_fee_per_gas: string | null;\n  transaction_burnt_fee: string | null;\n  nonce: number;\n  position: number | null;\n  revert_reason: TransactionRevertReason | null;\n  raw_input: string;\n  decoded_input: DecodedInput | null;\n  token_transfers: Array<TokenTransfer> | null;\n  token_transfers_overflow: boolean;\n  exchange_rate: string | null;\n  method: string | null;\n  transaction_types: Array<TransactionType>;\n  transaction_tag: string | null;\n  actions: Array<TxAction>;\n  l1_fee?: string;\n  l1_fee_scalar?: string;\n  l1_gas_price?: string;\n  l1_gas_used?: string;\n  has_error_in_internal_transactions: boolean | null;\n  // optimism fields\n  op_withdrawals?: Array<OpWithdrawal>;\n  // SUAVE fields\n  execution_node?: AddressParam | null;\n  allowed_peekers?: Array<string>;\n  wrapped?: Pick<Transaction, WrappedTransactionFields>;\n  // Stability fields\n  stability_fee?: {\n    dapp_address: AddressParam;\n    dapp_fee: string;\n    token: TokenInfo;\n    total_fee: string;\n    validator_address: AddressParam;\n    validator_fee: string;\n  };\n  // Celo fields\n  celo?: {\n    gas_token: TokenInfo<'ERC-20'> | null;\n  };\n  // zkEvm fields\n  zkevm_verify_hash?: string;\n  zkevm_batch_number?: number;\n  zkevm_status?: typeof ZKEVM_L2_TX_STATUSES[number];\n  zkevm_sequence_hash?: string;\n  // zkSync FIELDS\n  zksync?: Omit<ZkSyncBatchesItem, 'number' | 'transaction_count' | 'timestamp'> & {\n    batch_number: number | null;\n  };\n  // Zilliqa fields\n  zilliqa?: {\n    is_scilla: boolean;\n  };\n  // blob tx fields\n  blob_versioned_hashes?: Array<string>;\n  blob_gas_used?: string;\n  blob_gas_price?: string;\n  burnt_blob_fee?: string;\n  max_fee_per_blob_gas?: string;\n  // Noves-fi\n  translation?: NovesTxTranslation;\n  arbitrum?: ArbitrumTransactionData;\n  scroll?: ScrollTransactionData;\n  // EIP-7702\n  authorization_list?: Array<TxAuthorization>;\n};\n\ntype ArbitrumTransactionData = {\n  batch_number: number;\n  commitment_transaction: ArbitrumL2TxData;\n  confirmation_transaction: ArbitrumL2TxData;\n  contains_message: 'incoming' | 'outcoming' | null;\n  gas_used_for_l1: string;\n  gas_used_for_l2: string;\n  network_fee: string;\n  poster_fee: string;\n  status: ArbitrumBatchStatus;\n  message_related_info: {\n    associated_l1_transaction: string | null;\n    message_status: ArbitrumMessageStatus;\n  };\n};\n\nexport type ArbitrumMessageStatus = 'Relayed' | 'Syncing with base layer' | 'Waiting for confirmation' | 'Ready for relay' | 'Settlement pending';\n\nexport const ZKEVM_L2_TX_STATUSES = [ 'Confirmed by Sequencer', 'L1 Confirmed' ];\n\nexport interface TransactionsStats {\n  pending_transactions_count: string;\n  transaction_fees_avg_24h: string;\n  transaction_fees_sum_24h: string;\n  transactions_count_24h: string;\n}\n\nexport type TransactionsResponse = TransactionsResponseValidated | TransactionsResponsePending;\n\nexport interface TransactionsResponseValidated {\n  items: Array<Transaction>;\n  next_page_params: {\n    block_number: number;\n    index: number;\n    items_count: number;\n    filter: 'validated';\n  } | null;\n}\n\nexport interface TransactionsResponsePending {\n  items: Array<Transaction>;\n  next_page_params: {\n    inserted_at: string;\n    hash: string;\n    filter: 'pending';\n  } | null;\n}\n\nexport interface TransactionsResponseWithBlobs {\n  items: Array<Transaction>;\n  next_page_params: {\n    block_number: number;\n    index: number;\n    items_count: number;\n  } | null;\n}\n\nexport interface TransactionsResponseWatchlist {\n  items: Array<Transaction>;\n  next_page_params: {\n    block_number: number;\n    index: number;\n    items_count: 50;\n  } | null;\n}\n\nexport type TransactionType = 'rootstock_remasc' |\n'rootstock_bridge' |\n'token_transfer' |\n'contract_creation' |\n'contract_call' |\n'token_creation' |\n'coin_transfer' |\n'blob_transaction';\n\nexport type TxsResponse = TransactionsResponseValidated | TransactionsResponsePending | BlockTransactionsResponse;\n\nexport interface TransactionsSorting {\n  sort: 'value' | 'fee' | 'block_number';\n  order: 'asc' | 'desc';\n}\n\nexport type TransactionsSortingField = TransactionsSorting['sort'];\n\nexport type TransactionsSortingValue = `${ TransactionsSortingField }-${ TransactionsSorting['order'] }`;\n\nexport type ScrollTransactionData = {\n  l1_fee: string;\n  l2_fee: Fee;\n  l1_fee_commit_scalar: number;\n  l1_base_fee: number;\n  l1_blob_base_fee: number;\n  l1_fee_scalar: number;\n  l1_fee_overhead: number;\n  l1_fee_blob_scalar: number;\n  l1_gas_used: number;\n  l2_block_status: ScrollL2BlockStatus;\n  queue_index: number;\n};\n\nexport interface TxAuthorization {\n  address: string;\n  authority: string;\n  chain_id: number;\n  nonce: number;\n}\n","/* eslint-disable max-len */\nimport type { ArbitrumMessageStatus } from 'types/api/transaction';\n\nexport const MESSAGE_DESCRIPTIONS: Record<ArbitrumMessageStatus, string> = {\n  'Syncing with base layer': 'The incoming message was discovered on the rollup, but the corresponding message on L1 has not yet been found',\n  'Settlement pending': 'The transaction with the message was included in a rollup block, but there is no batch on L1 containing the block yet',\n  'Waiting for confirmation': 'The rollup block with the transaction containing the message was included in a batch on L1, but it is still waiting for the expiration of the fraud proof countdown',\n  'Ready for relay': 'The rollup state was confirmed successfully, and the message can be executed—funds can be claimed on L1',\n  Relayed: '',\n};\n","export default function getConfirmationString(durations: Array<number>) {\n  if (durations.length === 0) {\n    return '';\n  }\n\n  const [ lower, upper ] = durations.map((time) => time / 1_000);\n\n  if (!upper) {\n    return `Confirmed within ${ lower.toLocaleString() } secs`;\n  }\n\n  if (lower === 0) {\n    return `Confirmed within <= ${ upper.toLocaleString() } secs`;\n  }\n\n  return `Confirmed within ${ lower.toLocaleString() } - ${ upper.toLocaleString() } secs`;\n}\n","import React from 'react';\n\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { TX_INTERPRETATION } from 'stubs/txInterpretation';\nimport DetailsActionsWrapper from 'ui/shared/DetailsActionsWrapper';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport TxInterpretation from 'ui/shared/tx/interpretation/TxInterpretation';\n\ninterface Props {\n  hash?: string;\n  isTxDataLoading: boolean;\n}\n\nconst TxDetailsActionsInterpretation = ({ hash, isTxDataLoading }: Props) => {\n  const txInterpretationQuery = useApiQuery('tx_interpretation', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && !isTxDataLoading,\n      placeholderData: TX_INTERPRETATION,\n      refetchOnMount: false,\n    },\n  });\n\n  const actions = txInterpretationQuery.data?.data.summaries;\n\n  if (!actions || actions.length < 2) {\n    return null;\n  }\n\n  return (\n    <>\n      <DetailsActionsWrapper isLoading={ isTxDataLoading || txInterpretationQuery.isPlaceholderData } type=\"tx\">\n        { actions.map((action, index: number) => (\n          <TxInterpretation\n            key={ index }\n            summary={ action }\n            isLoading={ isTxDataLoading || txInterpretationQuery.isPlaceholderData }\n          />\n        ),\n        ) }\n      </DetailsActionsWrapper>\n      <DetailsInfoItemDivider/>\n    </>\n  );\n};\n\nexport default TxDetailsActionsInterpretation;\n","import { Flex, chakra } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TxAction, TxActionGeneral } from 'types/api/txAction';\n\nimport config from 'configs/app';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\ninterface Props {\n  action: TxAction;\n}\n\nfunction getActionText(actionType: TxActionGeneral['type']) {\n  switch (actionType) {\n    case 'mint': return [ 'Added', 'liquidity to' ];\n    case 'burn': return [ 'Removed', 'liquidity from' ];\n    case 'collect': return [ 'Collected', 'from' ];\n    case 'swap': return [ 'Swapped', 'on' ];\n  }\n}\n\nconst TxDetailsAction = ({ action }: Props) => {\n  const { protocol, type, data } = action;\n\n  if (protocol !== 'uniswap_v3') {\n    return null;\n  }\n\n  switch (type) {\n    case 'mint':\n    case 'burn':\n    case 'collect':\n    case 'swap': {\n      const amount0 = BigNumber(data.amount0).toFormat();\n      const amount1 = BigNumber(data.amount1).toFormat();\n      const [ text0, text1 ] = getActionText(type);\n      const token0 = {\n        address: data.symbol0 === 'Ether' ? '' : data.address0,\n        name: data.symbol0 === 'Ether' ? config.chain.currency.symbol || null : data.symbol0,\n        type: 'ERC-20' as const,\n        symbol: null,\n        icon_url: null,\n      };\n      const token1 = {\n        address: data.symbol1 === 'Ether' ? '' : data.address1,\n        name: data.symbol1 === 'Ether' ? config.chain.currency.symbol || null : data.symbol1,\n        type: 'ERC-20' as const,\n        symbol: null,\n        icon_url: null,\n      };\n\n      return (\n        <Flex flexWrap=\"wrap\" columnGap={ 2 } rowGap={ 2 } alignItems=\"center\" fontWeight={ 500 }>\n          <chakra.span color=\"text_secondary\">{ text0 }</chakra.span>\n\n          <span>{ amount0 }</span>\n\n          <TokenEntity\n            token={ token0 }\n            noLink={ data.symbol0 === 'Ether' }\n            noCopy\n            noIcon\n            noSymbol\n            w=\"auto\"\n            maxW=\"200px\"\n            flexShrink={ 0 }\n          />\n\n          <chakra.span color=\"text_secondary\">{ type === 'swap' ? 'for' : 'and' }</chakra.span>\n\n          <span>{ amount1 }</span>\n\n          <TokenEntity\n            token={ token1 }\n            noLink={ data.symbol1 === 'Ether' }\n            noIcon\n            noCopy\n            noSymbol\n            w=\"auto\"\n            maxW=\"200px\"\n            flexShrink={ 0 }\n          />\n\n          <chakra.span color=\"text_secondary\">{ text1 }</chakra.span>\n\n          <Flex columnGap={ 2 }>\n            <IconSvg name=\"uniswap\" boxSize={ 5 } color=\"white\" bgColor=\"#ff007a\" borderRadius=\"full\" p=\"2px\"/>\n            <chakra.span>Uniswap V3</chakra.span>\n          </Flex>\n        </Flex>\n      );\n    }\n\n    case 'mint_nft' : {\n      const token = {\n        address: data.address,\n        name: data.name,\n        type: 'ERC-20' as const,\n        symbol: null,\n        icon_url: null,\n      };\n\n      return (\n        <div>\n          <Flex rowGap={ 2 } columnGap={ 2 } flexWrap=\"wrap\" alignItems=\"center\" whiteSpace=\"pre-wrap\" fontWeight={ 500 }>\n            <chakra.span color=\"text_secondary\">Minted</chakra.span>\n\n            <TokenEntity\n              token={ token }\n              noCopy\n              w=\"auto\"\n              rowGap={ 2 }\n            />\n\n            <chakra.span color=\"text_secondary\">to</chakra.span>\n\n            <AddressEntity\n              address={{ hash: data.to }}\n              truncation=\"constant\"\n              noIcon\n              noCopy\n            />\n          </Flex>\n\n          <Flex columnGap={ 1 } rowGap={ 2 } pl={ 3 } flexDirection=\"column\" mt={ 2 } fontWeight={ 500 }>\n            {\n              data.ids.map((id: string) => {\n                return (\n                  <Flex key={ data.address + id } whiteSpace=\"pre-wrap\" columnGap={ 2 }>\n                    <chakra.span flexShrink={ 0 }>1</chakra.span>\n                    <chakra.span color=\"text_secondary\" flexShrink={ 0 }>of token ID</chakra.span>\n                    <NftEntity hash={ data.address } id={ id } w=\"min-content\" icon={{ size: 'md' }}/>\n                  </Flex>\n                );\n              })\n            }\n          </Flex>\n        </div>\n      );\n    }\n\n    default:\n      return null;\n  }\n};\n\nexport default React.memo(TxDetailsAction);\n","import React from 'react';\n\nimport type { TxAction } from 'types/api/txAction';\n\nimport DetailsActionsWrapper from 'ui/shared/DetailsActionsWrapper';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\n\nimport TxDetailsAction from './TxDetailsAction';\n\ninterface Props {\n  actions: Array<TxAction>;\n  isLoading: boolean;\n}\n\nconst TxDetailsActionsRaw = ({ actions, isLoading }: Props) => {\n  return (\n    <>\n      <DetailsActionsWrapper isLoading={ isLoading } type=\"tx\">\n        { actions.map((action, index: number) => <TxDetailsAction key={ index } action={ action }/>) }\n      </DetailsActionsWrapper>\n      <DetailsInfoItemDivider/>\n    </>\n  );\n};\n\nexport default TxDetailsActionsRaw;\n","import React from 'react';\n\nimport type { TxAction } from 'types/api/txAction';\n\nimport config from 'configs/app';\nimport TxDetailsActionsInterpretation from 'ui/tx/details/txDetailsActions/TxDetailsActionsInterpretation';\nimport TxDetailsActionsRaw from 'ui/tx/details/txDetailsActions/TxDetailsActionsRaw';\n\ntype Props = {\n  isTxDataLoading: boolean;\n  actions?: Array<TxAction>;\n  hash?: string;\n};\n\nconst TxDetailsActions = ({ isTxDataLoading, actions, hash }: Props) => {\n  if (config.features.txInterpretation.isEnabled) {\n    return <TxDetailsActionsInterpretation hash={ hash } isTxDataLoading={ isTxDataLoading }/>;\n  }\n\n  /* if tx interpretation is not configured, show tx actions from tx info */\n  if (actions && actions.length > 0) {\n    return <TxDetailsActionsRaw actions={ actions } isLoading={ isTxDataLoading }/>;\n  }\n\n  return null;\n};\n\nexport default TxDetailsActions;\n","import BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport config from 'configs/app';\nimport { ZERO } from 'lib/consts';\nimport { currencyUnits } from 'lib/units';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst rollupFeature = config.features.rollup;\n\ninterface Props {\n  data: Transaction;\n  isLoading?: boolean;\n}\n\nconst TxDetailsBurntFees = ({ data, isLoading }: Props) => {\n\n  if (config.UI.views.tx.hiddenFields?.burnt_fees || (rollupFeature.isEnabled && rollupFeature.type === 'optimistic')) {\n    return null;\n  }\n\n  const value = BigNumber(data.transaction_burnt_fee || 0).plus(BigNumber(data.blob_gas_used || 0).multipliedBy(BigNumber(data.blob_gas_price || 0)));\n\n  if (value.isEqualTo(ZERO)) {\n    return null;\n  }\n\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint={ `\n            Amount of ${ currencyUnits.ether } burned for this transaction. Equals Block Base Fee per Gas * Gas Used\n            ${ data.blob_gas_price && data.blob_gas_used ? ' + Blob Gas Price * Blob Gas Used' : '' }\n          ` }\n        isLoading={ isLoading }\n      >\n        Burnt fees\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <IconSvg name=\"flame\" boxSize={ 5 } color=\"gray.500\" isLoading={ isLoading }/>\n        <CurrencyValue\n          value={ value.toString() }\n          currency={ currencyUnits.ether }\n          exchangeRate={ data.exchange_rate }\n          flexWrap=\"wrap\"\n          ml={ 2 }\n          isLoading={ isLoading }\n        />\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default React.memo(TxDetailsBurntFees);\n","import BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\n\ninterface Props {\n  txFee: string | null;\n  gasUsed: string | null;\n  isLoading?: boolean;\n}\n\nconst TxDetailsFeePerGas = ({ txFee, gasUsed, isLoading }: Props) => {\n  if (!config.UI.views.tx.additionalFields?.fee_per_gas || !gasUsed || txFee === null) {\n    return null;\n  }\n\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint=\"Fee per gas\"\n        isLoading={ isLoading }\n      >\n        Fee per gas\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <Skeleton isLoaded={ !isLoading } mr={ 1 }>\n          { BigNumber(txFee).dividedBy(10 ** config.chain.currency.decimals).dividedBy(gasUsed).toFixed() }\n          { config.UI.views.tx.hiddenFields?.fee_currency ? '' : ` ${ currencyUnits.ether }` }\n        </Skeleton>\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default TxDetailsFeePerGas;\n","import BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TokenInfo } from 'types/api/token';\n\nimport config from 'configs/app';\nimport { WEI, WEI_IN_GWEI } from 'lib/consts';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\ninterface Props {\n  gasToken?: TokenInfo<'ERC-20'> | null;\n  gasPrice: string | null;\n  isLoading?: boolean;\n}\n\nconst TxDetailsGasPrice = ({ gasPrice, gasToken, isLoading }: Props) => {\n  if (config.UI.views.tx.hiddenFields?.gas_price || !gasPrice) {\n    return null;\n  }\n\n  const content = (() => {\n    if (gasToken) {\n      return (\n        <Skeleton isLoaded={ !isLoading } display=\"flex\">\n          <span>{ BigNumber(gasPrice).dividedBy(WEI).toFixed() }</span>\n          <TokenEntity token={ gasToken } noCopy onlySymbol w=\"auto\" ml={ 1 }/>\n        </Skeleton>\n      );\n    }\n\n    return (\n      <>\n        <Skeleton isLoaded={ !isLoading } mr={ 1 }>\n          { BigNumber(gasPrice).dividedBy(WEI).toFixed() } { currencyUnits.ether }\n        </Skeleton>\n        <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">\n          <span>({ BigNumber(gasPrice).dividedBy(WEI_IN_GWEI).toFixed() } { currencyUnits.gwei })</span>\n        </Skeleton>\n      </>\n    );\n  })();\n\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint=\"Price per unit of gas specified by the sender. Higher gas prices can prioritize transaction inclusion during times of high usage\"\n        isLoading={ isLoading }\n      >\n        Gas price\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        { content }\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default TxDetailsGasPrice;\n","import { Box, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport TextSeparator from 'ui/shared/TextSeparator';\n\ntype Props = Pick<Transaction, 'nonce' | 'type' | 'position'> & { queueIndex?: number };\n\nconst TxDetailsOther = ({ nonce, type, position, queueIndex }: Props) => {\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint=\"Other data related to this transaction\"\n      >\n        Other\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        {\n          [\n            typeof type === 'number' && (\n              <Box key=\"type\">\n                <Text as=\"span\" fontWeight=\"500\">Txn type: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ type }</Text>\n                { type === 2 && <Text fontWeight=\"400\" as=\"span\" ml={ 1 } variant=\"secondary\">(EIP-1559)</Text> }\n                { type === 3 && <Text fontWeight=\"400\" as=\"span\" ml={ 1 } variant=\"secondary\">(EIP-4844)</Text> }\n                { type === 4 && <Text fontWeight=\"400\" as=\"span\" ml={ 1 } variant=\"secondary\">(EIP-7702)</Text> }\n              </Box>\n            ),\n            queueIndex !== undefined ? (\n              <Box key=\"queueIndex\">\n                <Text as=\"span\" fontWeight=\"500\">Queue index: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ queueIndex }</Text>\n              </Box>\n            ) : (\n              <Box key=\"nonce\">\n                <Text as=\"span\" fontWeight=\"500\">Nonce: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ nonce }</Text>\n              </Box>\n            ),\n            position !== null && position !== undefined && (\n              <Box key=\"position\">\n                <Text as=\"span\" fontWeight=\"500\">Position: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ position }</Text>\n              </Box>\n            ),\n          ]\n            .filter(Boolean)\n            .map((item, index) => (\n              <>\n                { index !== 0 && <TextSeparator/> }\n                { item }\n              </>\n            ))\n        }\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default TxDetailsOther;\n","import { GridItem, Show, Flex } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenTransfer } from 'types/api/tokenTransfer';\n\nimport { route } from 'nextjs-routes';\n\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LinkInternal from 'ui/shared/links/LinkInternal';\nimport TokenTransferSnippet from 'ui/shared/TokenTransferSnippet/TokenTransferSnippet';\n\ninterface Props {\n  data: Array<TokenTransfer>;\n  txHash: string;\n  isOverflow: boolean;\n}\n\nconst TOKEN_TRANSFERS_TYPES = [\n  { title: 'Tokens transferred', hint: 'List of tokens transferred in the transaction', type: 'token_transfer' },\n  { title: 'Tokens minted', hint: 'List of tokens minted in the transaction', type: 'token_minting' },\n  { title: 'Tokens burnt', hint: 'List of tokens burnt in the transaction', type: 'token_burning' },\n  { title: 'Tokens created', hint: 'List of tokens created in the transaction', type: 'token_spawning' },\n];\n\nconst TxDetailsTokenTransfers = ({ data, txHash, isOverflow }: Props) => {\n  const viewAllUrl = route({ pathname: '/tx/[hash]', query: { hash: txHash, tab: 'token_transfers' } });\n\n  const transferGroups = TOKEN_TRANSFERS_TYPES.map((group) => ({\n    ...group,\n    items: data?.filter((token) => token.type === group.type) || [],\n  }));\n\n  return (\n    <>\n      { transferGroups.map(({ title, hint, type, items }) => {\n        if (items.length === 0) {\n          return null;\n        }\n\n        return (\n          <React.Fragment key={ type }>\n            <DetailsInfoItem.Label\n              hint={ hint }\n            >\n              { title }\n            </DetailsInfoItem.Label>\n            <DetailsInfoItem.Value position=\"relative\">\n              <Flex\n                flexDirection=\"column\"\n                alignItems=\"flex-start\"\n                rowGap={ 5 }\n                w=\"100%\"\n                overflow=\"hidden\"\n              >\n                { items.map((item, index) => <TokenTransferSnippet key={ index } data={ item }/>) }\n              </Flex>\n            </DetailsInfoItem.Value>\n          </React.Fragment>\n        );\n      }) }\n      { isOverflow && (\n        <>\n          <Show above=\"lg\" ssr={ false }><GridItem></GridItem></Show>\n          <GridItem fontSize=\"sm\" alignItems=\"center\" display=\"inline-flex\" pl={{ base: '28px', lg: 0 }}>\n            <IconSvg name=\"token\" boxSize={ 6 }/>\n            <LinkInternal href={ viewAllUrl }>\n              View all\n            </LinkInternal>\n          </GridItem>\n        </>\n      ) }\n    </>\n  );\n};\n\nexport default React.memo(TxDetailsTokenTransfers);\n","import { Button } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { OptimisticL2WithdrawalStatus } from 'types/api/optimisticL2';\n\nimport config from 'configs/app';\nimport TxEntityL1 from 'ui/shared/entities/tx/TxEntityL1';\nimport VerificationSteps from 'ui/shared/verificationSteps/VerificationSteps';\n\ninterface Props {\n  status: OptimisticL2WithdrawalStatus | undefined;\n  l1TxHash: string | undefined;\n}\n\nconst WITHDRAWAL_STATUS_STEPS: Array<OptimisticL2WithdrawalStatus> = [\n  'Waiting for state root',\n  'Ready to prove',\n  'In challenge period',\n  'Ready for relay',\n  'Relayed',\n];\n\nconst WITHDRAWAL_STATUS_ORDER_PROVEN: Array<OptimisticL2WithdrawalStatus> = [\n  'Waiting for state root',\n  'Ready to prove',\n  'Proven',\n  'Relayed',\n];\n\nconst WITHDRAWAL_STATUS_ORDER_GAME: Array<OptimisticL2WithdrawalStatus> = [\n  'Waiting for state root',\n  'Ready to prove',\n  'Waiting a game to resolve',\n  'In challenge period',\n  'Ready for relay',\n  'Relayed',\n];\n\nconst rollupFeature = config.features.rollup;\n\nconst TxDetailsWithdrawalStatus = ({ status, l1TxHash }: Props) => {\n  if (!status || !rollupFeature.isEnabled || rollupFeature.type !== 'optimistic') {\n    return null;\n  }\n\n  const hasClaimButton = status === 'Ready for relay';\n\n  const steps = (() => {\n    switch (status) {\n      case 'Ready for relay':\n        return WITHDRAWAL_STATUS_STEPS.slice(0, -1);\n      case 'Proven':\n        return WITHDRAWAL_STATUS_ORDER_PROVEN;\n      case 'Waiting a game to resolve':\n        return WITHDRAWAL_STATUS_ORDER_GAME;\n      case 'Relayed': {\n        if (l1TxHash) {\n          return WITHDRAWAL_STATUS_STEPS.map((status) => {\n            return status === 'Relayed' ? {\n              content: <TxEntityL1 hash={ l1TxHash } truncation=\"constant\" text=\"Relayed\" noIcon/>,\n              label: status,\n            } : status;\n          });\n        }\n\n        return WITHDRAWAL_STATUS_STEPS;\n      }\n\n      default:\n        return WITHDRAWAL_STATUS_STEPS;\n    }\n  })();\n\n  const rightSlot = hasClaimButton ? (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      as=\"a\"\n      href={ rollupFeature.L2WithdrawalUrl }\n      target=\"_blank\"\n    >\n      Claim funds\n    </Button>\n  ) : null;\n\n  return (\n    <VerificationSteps\n      steps={ steps as unknown as Array<OptimisticL2WithdrawalStatus> }\n      currentStep={ status }\n      rightSlot={ rightSlot }\n      my={ hasClaimButton ? '-6px' : 0 }\n      lineHeight={ hasClaimButton ? 8 : undefined }\n    />\n  );\n};\n\nexport default React.memo(TxDetailsWithdrawalStatus);\n","import { Grid, GridItem, Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TransactionRevertReason } from 'types/api/transaction';\n\nimport hexToUtf8 from 'lib/hexToUtf8';\nimport { HEX_REGEXP } from 'lib/regexp';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\n\ntype Props = TransactionRevertReason;\n\nconst TxRevertReason = (props: Props) => {\n  const bgColor = useColorModeValue('blackAlpha.50', 'whiteAlpha.50');\n\n  if ('raw' in props) {\n    if (!HEX_REGEXP.test(props.raw)) {\n      return <Text>{ props.raw }</Text>;\n    }\n\n    const decoded = hexToUtf8(props.raw);\n\n    return (\n      <Grid\n        bgColor={ bgColor }\n        p={ 4 }\n        fontSize=\"sm\"\n        borderRadius=\"md\"\n        templateColumns=\"auto minmax(0, 1fr)\"\n        rowGap={ 2 }\n        columnGap={ 4 }\n        whiteSpace=\"normal\"\n      >\n        <GridItem fontWeight={ 500 }>Raw:</GridItem>\n        <GridItem>{ props.raw }</GridItem>\n        { decoded.replace(/\\s|\\0/g, '') && (\n          <>\n            <GridItem fontWeight={ 500 }>Decoded:</GridItem>\n            <GridItem>{ decoded }</GridItem>\n          </>\n        ) }\n      </Grid>\n    );\n  }\n\n  return <LogDecodedInputData data={ props }/>;\n};\n\nexport default React.memo(TxRevertReason);\n","import { Flex, Link, useBoolean } from '@chakra-ui/react';\nimport React from 'react';\n\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\n\ninterface Props {\n  items: Array<string>;\n}\n\nconst CUT_LENGTH = 2;\n\nconst TxAllowedPeekers = ({ items }: Props) => {\n  const [ isExpanded, expand ] = useBoolean(false);\n\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint=\"Smart contracts allowed to interact with confidential data\"\n      >\n        Allowed peekers\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <Flex flexDir=\"column\" rowGap={ 3 } w=\"100%\">\n          { items\n            .slice(0, isExpanded ? undefined : CUT_LENGTH)\n            .map((item) => <AddressEntity key={ item } address={{ hash: item, is_contract: true }}/>) }\n        </Flex>\n        { items.length > CUT_LENGTH && (\n          <Link\n            display=\"inline-block\"\n            fontSize=\"sm\"\n            textDecorationLine=\"underline\"\n            textDecorationStyle=\"dashed\"\n            onClick={ expand.toggle }\n          >\n            { isExpanded ? 'Hide' : 'Show all' }\n          </Link>\n        ) }\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default React.memo(TxAllowedPeekers);\n","import { Text } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport { WEI_IN_GWEI } from 'lib/consts';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport TextSeparator from 'ui/shared/TextSeparator';\n\ntype Props = {\n  data: Transaction;\n  isLoading: boolean;\n};\n\nexport const TxInfoScrollFees = ({ data, isLoading }: Props) => {\n  return (\n    <>\n      { data.scroll?.l1_fee !== undefined && (\n        <>\n          <DetailsInfoItem.Label\n\n            hint=\"L1 fee that pays for rollup costs\"\n            isLoading={ isLoading }\n          >\n            L1 data fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.scroll?.l1_fee }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.scroll?.l2_fee !== undefined && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"L2 execution fee\"\n            isLoading={ isLoading }\n          >\n            Execution fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.scroll?.l2_fee.value }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.scroll?.l1_fee_commit_scalar !== undefined && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Commitment scalar\"\n            isLoading={ isLoading }\n          >\n            L1 commit scalar\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.scroll?.l1_fee_commit_scalar }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.scroll?.l1_fee_overhead !== undefined && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Additional gas overhead of a data commitment transaction\"\n            isLoading={ isLoading }\n          >\n            L1 Fee Overhead\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Skeleton isLoaded={ !isLoading }>\n              <CurrencyValue\n                value={ data.scroll?.l1_fee_overhead }\n                currency={ currencyUnits.ether }\n                exchangeRate={ data.exchange_rate }\n                flexWrap=\"wrap\"\n              />\n            </Skeleton>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n      { (data.scroll?.l1_base_fee !== undefined || data.scroll?.l1_fee_scalar !== undefined) && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"L1 gas fees\"\n            isLoading={ isLoading }\n          >\n            L1 gas fees\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { data.scroll?.l1_base_fee !== undefined && (\n              <Skeleton isLoaded={ !isLoading }>\n                <Text as=\"span\" fontWeight=\"500\">Base: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.scroll?.l1_base_fee || 0).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Skeleton>\n            ) }\n            { data.scroll?.l1_fee_scalar !== undefined && (\n              <Skeleton isLoaded={ !isLoading }>\n                <TextSeparator/>\n                <Text as=\"span\" fontWeight=\"500\">Scalar: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.scroll?.l1_fee_scalar || 0).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Skeleton>\n            ) }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n      { (data.scroll?.l1_blob_base_fee !== undefined || data.scroll?.l1_fee_blob_scalar !== undefined) && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"L1 blob fees\"\n            isLoading={ isLoading }\n          >\n            L1 blob fees\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { data.scroll?.l1_blob_base_fee !== undefined && (\n              <Skeleton isLoaded={ !isLoading }>\n                <Text as=\"span\" fontWeight=\"500\">Base: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.scroll?.l1_blob_base_fee || 0).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Skeleton>\n            ) }\n            { data.scroll?.l1_fee_blob_scalar !== undefined && (\n              <Skeleton isLoaded={ !isLoading }>\n                <TextSeparator/>\n                <Text as=\"span\" fontWeight=\"500\">Scalar: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.scroll?.l1_fee_blob_scalar || 0).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Skeleton>\n            ) }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n    </>\n  );\n};\n\nexport default TxInfoScrollFees;\n","import {\n  Box,\n  Grid,\n  GridItem,\n  Text,\n  Link,\n  Spinner,\n  Flex,\n  Tooltip,\n  chakra,\n  useColorModeValue,\n  HStack,\n} from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\nimport { scroller, Element } from 'react-scroll';\n\nimport { SCROLL_L2_BLOCK_STATUSES } from 'types/api/scrollL2';\nimport type { Transaction } from 'types/api/transaction';\nimport { ZKEVM_L2_TX_STATUSES } from 'types/api/transaction';\nimport { ZKSYNC_L2_TX_BATCH_STATUSES } from 'types/api/zkSyncL2';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\nimport { WEI, WEI_IN_GWEI } from 'lib/consts';\nimport getNetworkValidatorTitle from 'lib/networks/getNetworkValidatorTitle';\nimport * as arbitrum from 'lib/rollups/arbitrum';\nimport { MESSAGE_DESCRIPTIONS } from 'lib/tx/arbitrumMessageStatusDescription';\nimport getConfirmationDuration from 'lib/tx/getConfirmationDuration';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport Tag from 'ui/shared/chakra/Tag';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport DetailsTimestamp from 'ui/shared/DetailsTimestamp';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport BatchEntityL2 from 'ui/shared/entities/block/BatchEntityL2';\nimport BlockEntity from 'ui/shared/entities/block/BlockEntity';\nimport TxEntityL1 from 'ui/shared/entities/tx/TxEntityL1';\nimport HashStringShortenDynamic from 'ui/shared/HashStringShortenDynamic';\nimport Hint from 'ui/shared/Hint';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\nimport RawInputData from 'ui/shared/RawInputData';\nimport StatusTag from 'ui/shared/statusTag/StatusTag';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport TextSeparator from 'ui/shared/TextSeparator';\nimport TxFee from 'ui/shared/tx/TxFee';\nimport Utilization from 'ui/shared/Utilization/Utilization';\nimport VerificationSteps from 'ui/shared/verificationSteps/VerificationSteps';\nimport TxDetailsActions from 'ui/tx/details/txDetailsActions/TxDetailsActions';\nimport TxDetailsBurntFees from 'ui/tx/details/TxDetailsBurntFees';\nimport TxDetailsFeePerGas from 'ui/tx/details/TxDetailsFeePerGas';\nimport TxDetailsGasPrice from 'ui/tx/details/TxDetailsGasPrice';\nimport TxDetailsOther from 'ui/tx/details/TxDetailsOther';\nimport TxDetailsTokenTransfers from 'ui/tx/details/TxDetailsTokenTransfers';\nimport TxDetailsWithdrawalStatus from 'ui/tx/details/TxDetailsWithdrawalStatus';\nimport TxRevertReason from 'ui/tx/details/TxRevertReason';\nimport TxAllowedPeekers from 'ui/tx/TxAllowedPeekers';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport ZkSyncL2TxnBatchHashesInfo from 'ui/txnBatches/zkSyncL2/ZkSyncL2TxnBatchHashesInfo';\n\nimport TxInfoScrollFees from './TxInfoScrollFees';\n\nconst rollupFeature = config.features.rollup;\n\ninterface Props {\n  data: Transaction | undefined;\n  isLoading: boolean;\n  socketStatus?: 'close' | 'error';\n}\n\nconst TxInfo = ({ data, isLoading, socketStatus }: Props) => {\n  const [ isExpanded, setIsExpanded ] = React.useState(false);\n\n  const handleCutClick = React.useCallback(() => {\n    setIsExpanded((flag) => !flag);\n    scroller.scrollTo('TxInfo__cutLink', {\n      duration: 500,\n      smooth: true,\n    });\n  }, []);\n  const executionSuccessIconColor = useColorModeValue('blackAlpha.800', 'whiteAlpha.800');\n\n  const showAssociatedL1Tx = React.useCallback(() => {\n    setIsExpanded(true);\n    scroller.scrollTo('TxInfo__cutLink', {\n      duration: 500,\n      smooth: true,\n    });\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  const addressFromTags = [\n    ...data.from.private_tags || [],\n    ...data.from.public_tags || [],\n    ...data.from.watchlist_names || [],\n  ].map((tag) => <Tag key={ tag.label }>{ tag.display_name }</Tag>);\n\n  const toAddress = data.to ? data.to : data.created_contract;\n  const addressToTags = [\n    ...toAddress?.private_tags || [],\n    ...toAddress?.public_tags || [],\n    ...toAddress?.watchlist_names || [],\n  ].map((tag) => <Tag key={ tag.label }>{ tag.display_name }</Tag>);\n\n  const executionSuccessBadge = toAddress?.is_contract && data.result === 'success' ? (\n    <Tooltip label=\"Contract execution completed\">\n      <chakra.span display=\"inline-flex\" ml={ 2 } mr={ 1 }>\n        <IconSvg name=\"status/success\" boxSize={ 4 } color={ executionSuccessIconColor } cursor=\"pointer\"/>\n      </chakra.span>\n    </Tooltip>\n  ) : null;\n  const executionFailedBadge = toAddress?.is_contract && Boolean(data.status) && data.result !== 'success' ? (\n    <Tooltip label=\"Error occurred during contract execution\">\n      <chakra.span display=\"inline-flex\" ml={ 2 } mr={ 1 }>\n        <IconSvg name=\"status/error\" boxSize={ 4 } color=\"error\" cursor=\"pointer\"/>\n      </chakra.span>\n    </Tooltip>\n  ) : null;\n\n  return (\n    <Grid columnGap={ 8 } rowGap={{ base: 3, lg: 3 }} templateColumns={{ base: 'minmax(0, 1fr)', lg: 'max-content minmax(728px, auto)' }}>\n\n      { config.features.metasuites.isEnabled && (\n        <>\n          <Box display=\"none\" id=\"meta-suites__tx-info-label\" data-status={ data.status } data-ready={ !isLoading }/>\n          <Box display=\"none\" id=\"meta-suites__tx-info-value\"/>\n          <DetailsInfoItemDivider display=\"none\" id=\"meta-suites__details-info-item-divider\"/>\n        </>\n      ) }\n\n      { socketStatus && (\n        <GridItem colSpan={{ base: undefined, lg: 2 }} mb={ 2 }>\n          <TxSocketAlert status={ socketStatus }/>\n        </GridItem>\n      ) }\n\n      <DetailsInfoItem.Label\n        hint=\"Unique character string (TxID) assigned to every verified transaction\"\n        isLoading={ isLoading }\n      >\n        Transaction hash\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value flexWrap=\"nowrap\">\n        { data.status === null && <Spinner mr={ 2 } size=\"sm\" flexShrink={ 0 }/> }\n        <Skeleton isLoaded={ !isLoading } overflow=\"hidden\">\n          <HashStringShortenDynamic hash={ data.hash }/>\n        </Skeleton>\n        <CopyToClipboard text={ data.hash } isLoading={ isLoading }/>\n\n        { config.features.metasuites.isEnabled && (\n          <>\n            <TextSeparator color=\"gray.500\" flexShrink={ 0 } display=\"none\" id=\"meta-suites__tx-explorer-separator\"/>\n            <Box display=\"none\" flexShrink={ 0 } id=\"meta-suites__tx-explorer-link\"/>\n          </>\n        ) }\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItem.Label\n        hint=\"Current transaction state: Success, Failed (Error), or Pending (In Process)\"\n        isLoading={ isLoading }\n      >\n        {\n          rollupFeature.isEnabled &&\n          (rollupFeature.type === 'zkEvm' || rollupFeature.type === 'zkSync' || rollupFeature.type === 'arbitrum' || rollupFeature.type === 'scroll') ?\n            'L2 status and method' :\n            'Status and method'\n        }\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <TxStatus status={ data.status } errorText={ data.status === 'error' ? data.result : undefined } isLoading={ isLoading }/>\n        { data.method && (\n          <Tag colorScheme={ data.method === 'Multicall' ? 'teal' : 'gray' } isLoading={ isLoading } isTruncated ml={ 3 }>\n            { data.method }\n          </Tag>\n        ) }\n        { data.arbitrum?.contains_message && (\n          <Skeleton isLoaded={ !isLoading } onClick={ showAssociatedL1Tx }>\n            <Link isTruncated ml={ 3 }>\n              { data.arbitrum?.contains_message === 'incoming' ? 'Incoming message' : 'Outgoing message' }\n            </Link>\n          </Skeleton>\n        ) }\n      </DetailsInfoItem.Value>\n\n      { rollupFeature.isEnabled && rollupFeature.type === 'optimistic' && data.op_withdrawals && data.op_withdrawals.length > 0 &&\n      !config.UI.views.tx.hiddenFields?.L1_status && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Detailed status progress of the transaction\"\n          >\n            Withdrawal status\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Flex flexDir=\"column\" rowGap={ 2 }>\n              { data.op_withdrawals.map((withdrawal) => (\n                <Box key={ withdrawal.nonce }>\n                  <Box mb={ 2 }>\n                    <span>Nonce: </span>\n                    <chakra.span fontWeight={ 600 }>{ withdrawal.nonce }</chakra.span>\n                  </Box>\n                  <TxDetailsWithdrawalStatus\n                    status={ withdrawal.status }\n                    l1TxHash={ withdrawal.l1_transaction_hash }\n                  />\n                </Box>\n              )) }\n            </Flex>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.zkevm_status && !config.UI.views.tx.hiddenFields?.L1_status && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Status of the transaction confirmation path to L1\"\n            isLoading={ isLoading }\n          >\n            Confirmation status\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <VerificationSteps currentStep={ data.zkevm_status } steps={ ZKEVM_L2_TX_STATUSES } isLoading={ isLoading }/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.arbitrum?.status && !config.UI.views.tx.hiddenFields?.L1_status && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Status of the transaction confirmation path to L1\"\n            isLoading={ isLoading }\n          >\n            L1 status\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <VerificationSteps\n              currentStep={ arbitrum.VERIFICATION_STEPS_MAP[data.arbitrum.status] }\n              currentStepPending={ arbitrum.getVerificationStepStatus(data.arbitrum) === 'pending' }\n              steps={ arbitrum.verificationSteps }\n              isLoading={ isLoading }\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.revert_reason && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"The revert reason of the transaction\"\n          >\n            Revert reason\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <TxRevertReason { ...data.revert_reason }/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.zksync && !config.UI.views.tx.hiddenFields?.L1_status && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Status is the short interpretation of the batch lifecycle\"\n            isLoading={ isLoading }\n          >\n            L1 status\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <VerificationSteps steps={ ZKSYNC_L2_TX_BATCH_STATUSES } currentStep={ data.zksync.status } isLoading={ isLoading }/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <DetailsInfoItem.Label\n        hint=\"Block number containing the transaction\"\n        isLoading={ isLoading }\n      >\n        Block\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        { data.block_number === null ?\n          <Text>Pending</Text> : (\n            <BlockEntity\n              isLoading={ isLoading }\n              number={ data.block_number }\n              noIcon\n            />\n          ) }\n        { Boolean(data.confirmations) && (\n          <>\n            <TextSeparator color=\"gray.500\"/>\n            <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">\n              <span>{ data.confirmations } Block confirmations</span>\n            </Skeleton>\n          </>\n        ) }\n        { data.scroll?.l2_block_status && (\n          <>\n            <TextSeparator color=\"gray.500\"/>\n            <VerificationSteps steps={ SCROLL_L2_BLOCK_STATUSES } currentStep={ data.scroll.l2_block_status } isLoading={ isLoading }/>\n          </>\n        ) }\n      </DetailsInfoItem.Value>\n\n      { data.zkevm_batch_number && !config.UI.views.tx.hiddenFields?.batch && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Batch index for this transaction\"\n            isLoading={ isLoading }\n          >\n            Txn batch\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <BatchEntityL2\n              isLoading={ isLoading }\n              number={ data.zkevm_batch_number }\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.zksync && !config.UI.views.tx.hiddenFields?.batch && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Batch number\"\n            isLoading={ isLoading }\n          >\n            Batch\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { data.zksync.batch_number ? (\n              <BatchEntityL2\n                isLoading={ isLoading }\n                number={ data.zksync.batch_number }\n              />\n            ) : <Skeleton isLoaded={ !isLoading }>Pending</Skeleton> }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.arbitrum && !config.UI.views.tx.hiddenFields?.batch && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Index of the batch containing this transaction\"\n            isLoading={ isLoading }\n          >\n            Batch\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { data.arbitrum.batch_number ?\n              <BatchEntityL2 isLoading={ isLoading } number={ data.arbitrum.batch_number }/> :\n              <Skeleton isLoaded={ !isLoading }>Pending</Skeleton> }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.timestamp && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Date & time of transaction inclusion, including length of time for confirmation\"\n            isLoading={ isLoading }\n          >\n            Timestamp\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <DetailsTimestamp timestamp={ data.timestamp } isLoading={ isLoading }/>\n            { data.confirmation_duration && (\n              <>\n                <TextSeparator color=\"gray.500\"/>\n                <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">\n                  <span>{ getConfirmationDuration(data.confirmation_duration) }</span>\n                </Skeleton>\n              </>\n            ) }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.execution_node && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Node that carried out the confidential computation\"\n            isLoading={ isLoading }\n          >\n            Kettle\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <AddressEntity\n              address={ data.execution_node }\n              href={ route({ pathname: '/txs/kettle/[hash]', query: { hash: data.execution_node.hash } }) }\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.allowed_peekers && data.allowed_peekers.length > 0 && (\n        <TxAllowedPeekers items={ data.allowed_peekers }/>\n      ) }\n\n      <DetailsInfoItemDivider/>\n\n      <TxDetailsActions hash={ data.hash } actions={ data.actions } isTxDataLoading={ isLoading }/>\n\n      <DetailsInfoItem.Label\n        hint=\"Address (external or contract) sending the transaction\"\n        isLoading={ isLoading }\n      >\n        From\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value columnGap={ 3 }>\n        <AddressEntity\n          address={ data.from }\n          isLoading={ isLoading }\n        />\n        { data.from.name && <Text>{ data.from.name }</Text> }\n        { addressFromTags.length > 0 && (\n          <Flex columnGap={ 3 }>\n            { addressFromTags }\n          </Flex>\n        ) }\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItem.Label\n        hint=\"Address (external or contract) receiving the transaction\"\n        isLoading={ isLoading }\n      >\n        { data.to?.is_contract ? 'Interacted with contract' : 'To' }\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value\n        flexWrap={{ base: 'wrap', lg: 'nowrap' }}\n        columnGap={ 3 }\n      >\n        { toAddress ? (\n          <>\n            { data.to && data.to.hash ? (\n              <Flex flexWrap=\"nowrap\" alignItems=\"center\" maxW=\"100%\">\n                <AddressEntity\n                  address={ toAddress }\n                  isLoading={ isLoading }\n                />\n                { executionSuccessBadge }\n                { executionFailedBadge }\n              </Flex>\n            ) : (\n              <Flex width=\"100%\" whiteSpace=\"pre\" alignItems=\"center\" flexShrink={ 0 }>\n                <span>[Contract </span>\n                <AddressEntity\n                  address={ toAddress }\n                  isLoading={ isLoading }\n                  noIcon\n                />\n                <span>created]</span>\n                { executionSuccessBadge }\n                { executionFailedBadge }\n              </Flex>\n            ) }\n            { addressToTags.length > 0 && (\n              <Flex columnGap={ 3 }>\n                { addressToTags }\n              </Flex>\n            ) }\n          </>\n        ) : (\n          <span>[ Contract creation ]</span>\n        ) }\n      </DetailsInfoItem.Value>\n\n      { data.token_transfers && <TxDetailsTokenTransfers data={ data.token_transfers } txHash={ data.hash } isOverflow={ data.token_transfers_overflow }/> }\n\n      <DetailsInfoItemDivider/>\n\n      { (data.arbitrum?.commitment_transaction.hash || data.arbitrum?.confirmation_transaction.hash) &&\n      (\n        <>\n          { data.arbitrum?.commitment_transaction.hash && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"L1 transaction containing this batch commitment\"\n                isLoading={ isLoading }\n              >\n                Commitment tx\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <TxEntityL1 hash={ data.arbitrum?.commitment_transaction.hash } isLoading={ isLoading }/>\n                { data.arbitrum?.commitment_transaction.status === 'finalized' && <StatusTag type=\"ok\" text=\"Finalized\" ml={ 2 }/> }\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n          { data.arbitrum?.confirmation_transaction.hash && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"L1 transaction containing confirmation of this batch\"\n                isLoading={ isLoading }\n              >\n                Confirmation tx\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <TxEntityL1 hash={ data.arbitrum?.confirmation_transaction.hash } isLoading={ isLoading }/>\n                { data.arbitrum?.commitment_transaction.status === 'finalized' && <StatusTag type=\"ok\" text=\"Finalized\" ml={ 2 }/> }\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n          <DetailsInfoItemDivider/>\n        </>\n      ) }\n\n      { data.zkevm_sequence_hash && (\n        <>\n          <DetailsInfoItem.Label\n            isLoading={ isLoading }\n          >\n            Sequence tx hash\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value flexWrap=\"nowrap\">\n            <Skeleton isLoaded={ !isLoading } overflow=\"hidden\">\n              <HashStringShortenDynamic hash={ data.zkevm_sequence_hash }/>\n            </Skeleton>\n            <CopyToClipboard text={ data.zkevm_sequence_hash } isLoading={ isLoading }/>\n          </DetailsInfoItem.Value>\n        </>\n\n      ) }\n\n      { data.zkevm_verify_hash && (\n        <>\n          <DetailsInfoItem.Label\n            isLoading={ isLoading }\n          >\n            Verify tx hash\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value flexWrap=\"nowrap\">\n            <Skeleton isLoaded={ !isLoading } overflow=\"hidden\">\n              <HashStringShortenDynamic hash={ data.zkevm_verify_hash }/>\n            </Skeleton>\n            <CopyToClipboard text={ data.zkevm_verify_hash } isLoading={ isLoading }/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { (data.zkevm_batch_number || data.zkevm_verify_hash) && <DetailsInfoItemDivider/> }\n\n      { !config.UI.views.tx.hiddenFields?.value && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Value sent in the native token (and USD) if applicable\"\n            isLoading={ isLoading }\n          >\n            Value\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.value }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              isLoading={ isLoading }\n              flexWrap=\"wrap\"\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { !config.UI.views.tx.hiddenFields?.tx_fee && (\n        <>\n          <DetailsInfoItem.Label\n            hint={ data.blob_gas_used ? 'Transaction fee without blob fee' : 'Total transaction fee' }\n            isLoading={ isLoading }\n          >\n            Transaction fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <TxFee tx={ data } isLoading={ isLoading } withUsd/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { rollupFeature.isEnabled && rollupFeature.type === 'arbitrum' && data.arbitrum && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Fee paid to the poster for L1 resources\"\n            isLoading={ isLoading }\n          >\n            Poster fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.arbitrum.poster_fee }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n              isLoading={ isLoading }\n            />\n          </DetailsInfoItem.Value>\n\n          <DetailsInfoItem.Label\n            hint=\"Fee paid to the network for L2 resources\"\n            isLoading={ isLoading }\n          >\n            Network fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <CurrencyValue\n              value={ data.arbitrum.network_fee }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n              isLoading={ isLoading }\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <TxDetailsGasPrice gasPrice={ data.gas_price } gasToken={ data.celo?.gas_token } isLoading={ isLoading }/>\n\n      <TxDetailsFeePerGas txFee={ data.fee.value } gasUsed={ data.gas_used } isLoading={ isLoading }/>\n\n      <DetailsInfoItem.Label\n        hint=\"Actual gas amount used by the transaction\"\n        isLoading={ isLoading }\n      >\n        Gas usage & limit by txn\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <Skeleton isLoaded={ !isLoading }>{ BigNumber(data.gas_used || 0).toFormat() }</Skeleton>\n        <TextSeparator/>\n        <Skeleton isLoaded={ !isLoading }>{ BigNumber(data.gas_limit).toFormat() }</Skeleton>\n        <Utilization ml={ 4 } value={ BigNumber(data.gas_used || 0).dividedBy(BigNumber(data.gas_limit)).toNumber() } isLoading={ isLoading }/>\n      </DetailsInfoItem.Value>\n\n      { rollupFeature.isEnabled && rollupFeature.type === 'arbitrum' && data.arbitrum && data.gas_used && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"L2 gas set aside for L1 data charges\"\n            isLoading={ isLoading }\n          >\n            Gas used for L1\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Skeleton isLoaded={ !isLoading }>{ BigNumber(data.arbitrum.gas_used_for_l1 || 0).toFormat() }</Skeleton>\n            <TextSeparator/>\n            <Utilization\n              ml={ 4 }\n              value={ BigNumber(data.arbitrum.gas_used_for_l1 || 0).dividedBy(BigNumber(data.gas_used)).toNumber() }\n              isLoading={ isLoading }\n            />\n          </DetailsInfoItem.Value>\n\n          <DetailsInfoItem.Label\n            hint=\"L2 gas spent on L2 resources\"\n            isLoading={ isLoading }\n          >\n            Gas used for L2\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Skeleton isLoaded={ !isLoading }>{ BigNumber(data.arbitrum.gas_used_for_l2 || 0).toFormat() }</Skeleton>\n            <TextSeparator/>\n            <Utilization\n              ml={ 4 }\n              value={ BigNumber(data.arbitrum.gas_used_for_l2 || 0).dividedBy(BigNumber(data.gas_used)).toNumber() }\n              isLoading={ isLoading }\n            />\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { data.scroll?.l1_gas_used !== undefined && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Total gas used on L1\"\n            isLoading={ isLoading }\n          >\n            L1 Gas used\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Skeleton isLoaded={ !isLoading }>{ BigNumber(data.scroll?.l1_gas_used || 0).toFormat() }</Skeleton>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      { !config.UI.views.tx.hiddenFields?.gas_fees &&\n            (data.base_fee_per_gas || data.max_fee_per_gas || data.max_priority_fee_per_gas) && (\n        <>\n          <DetailsInfoItem.Label\n            hint={ `\n            Base Fee refers to the network Base Fee at the time of the block, \n            while Max Fee & Max Priority Fee refer to the max amount a user is willing to pay \n            for their tx & to give to the ${ getNetworkValidatorTitle() } respectively\n          ` }\n            isLoading={ isLoading }\n          >\n            { `Gas fees (${ currencyUnits.gwei })` }\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { data.base_fee_per_gas && (\n              <Skeleton isLoaded={ !isLoading }>\n                <Text as=\"span\" fontWeight=\"500\">Base: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.base_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                { (data.max_fee_per_gas || data.max_priority_fee_per_gas) && <TextSeparator/> }\n              </Skeleton>\n            ) }\n            { data.max_fee_per_gas && (\n              <Skeleton isLoaded={ !isLoading }>\n                <Text as=\"span\" fontWeight=\"500\">Max: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.max_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                { data.max_priority_fee_per_gas && <TextSeparator/> }\n              </Skeleton>\n            ) }\n            { data.max_priority_fee_per_gas && (\n              <Skeleton isLoaded={ !isLoading }>\n                <Text as=\"span\" fontWeight=\"500\">Max priority: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.max_priority_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Skeleton>\n            ) }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <TxDetailsBurntFees data={ data } isLoading={ isLoading }/>\n\n      { rollupFeature.isEnabled && rollupFeature.type === 'optimistic' && (\n        <>\n          { data.l1_gas_used && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"L1 gas used by transaction\"\n                isLoading={ isLoading }\n              >\n                L1 gas used by txn\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <Text>{ BigNumber(data.l1_gas_used).toFormat() }</Text>\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n\n          { data.l1_gas_price && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"L1 gas price\"\n                isLoading={ isLoading }\n              >\n                L1 gas price\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <Text mr={ 1 }>{ BigNumber(data.l1_gas_price).dividedBy(WEI).toFixed() } { currencyUnits.ether }</Text>\n                <Text variant=\"secondary\">({ BigNumber(data.l1_gas_price).dividedBy(WEI_IN_GWEI).toFixed() } { currencyUnits.gwei })</Text>\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n\n          { data.l1_fee && (\n            <>\n              <DetailsInfoItem.Label\n                // eslint-disable-next-line max-len\n                hint={ `L1 Data Fee which is used to cover the L1 \"security\" cost from the batch submission mechanism. In combination with L2 execution fee, L1 fee makes the total amount of fees that a transaction pays.` }\n                isLoading={ isLoading }\n              >\n                L1 fee\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <CurrencyValue\n                  value={ data.l1_fee }\n                  currency={ currencyUnits.ether }\n                  exchangeRate={ data.exchange_rate }\n                  flexWrap=\"wrap\"\n                />\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n\n          { data.l1_fee_scalar && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"A Dynamic overhead (fee scalar) premium, which serves as a buffer in case L1 prices rapidly increase.\"\n                isLoading={ isLoading }\n              >\n                L1 fee scalar\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <Text>{ data.l1_fee_scalar }</Text>\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n        </>\n      ) }\n      <TxInfoScrollFees data={ data } isLoading={ isLoading }/>\n\n      <GridItem colSpan={{ base: undefined, lg: 2 }}>\n        <Element name=\"TxInfo__cutLink\">\n          <Skeleton isLoaded={ !isLoading } mt={ 6 } display=\"inline-block\">\n            <Link\n              display=\"inline-block\"\n              fontSize=\"sm\"\n              textDecorationLine=\"underline\"\n              textDecorationStyle=\"dashed\"\n              onClick={ handleCutClick }\n            >\n              { isExpanded ? 'Hide details' : 'View details' }\n            </Link>\n          </Skeleton>\n        </Element>\n      </GridItem>\n\n      { isExpanded && (\n        <>\n          <GridItem colSpan={{ base: undefined, lg: 2 }} mt={{ base: 1, lg: 4 }}/>\n\n          { data.arbitrum?.contains_message && data.arbitrum?.message_related_info && (\n            <>\n              <DetailsInfoItem.Label\n                hint={ data.arbitrum.contains_message === 'incoming' ?\n                  'The hash of the transaction that originated the message from the base layer' :\n                  'The hash of the transaction that completed the message on the base layer'\n                }\n              >\n                { data.arbitrum.contains_message === 'incoming' ? 'Originating L1 txn hash' : 'Completion L1 txn hash' }\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                { data.arbitrum.message_related_info.associated_l1_transaction ?\n                  <TxEntityL1 hash={ data.arbitrum.message_related_info.associated_l1_transaction }/> : (\n                    <HStack gap={ 2 }>\n                      <Text color=\"text_secondary\">{ data.arbitrum.message_related_info.message_status }</Text>\n                      <Hint label={ MESSAGE_DESCRIPTIONS[data.arbitrum.message_related_info.message_status] }/>\n                    </HStack>\n                  )\n                }\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n\n          { (data.blob_gas_used || data.max_fee_per_blob_gas || data.blob_gas_price) && (\n            <>\n              { data.blob_gas_used && data.blob_gas_price && (\n                <>\n                  <DetailsInfoItem.Label\n                    hint=\"Blob fee for this transaction\"\n                  >\n                    Blob fee\n                  </DetailsInfoItem.Label>\n                  <DetailsInfoItem.Value>\n                    <CurrencyValue\n                      value={ BigNumber(data.blob_gas_used).multipliedBy(data.blob_gas_price).toString() }\n                      currency={ config.UI.views.tx.hiddenFields?.fee_currency ? '' : currencyUnits.ether }\n                      exchangeRate={ data.exchange_rate }\n                      flexWrap=\"wrap\"\n                      isLoading={ isLoading }\n                    />\n                  </DetailsInfoItem.Value>\n                </>\n              ) }\n\n              { data.blob_gas_used && (\n                <>\n                  <DetailsInfoItem.Label\n                    hint=\"Amount of gas used by the blobs in this transaction\"\n                  >\n                    Blob gas usage\n                  </DetailsInfoItem.Label>\n                  <DetailsInfoItem.Value>\n                    { BigNumber(data.blob_gas_used).toFormat() }\n                  </DetailsInfoItem.Value>\n                </>\n              ) }\n\n              { (data.max_fee_per_blob_gas || data.blob_gas_price) && (\n                <>\n                  <DetailsInfoItem.Label\n                    hint={ `Amount of ${ currencyUnits.ether } used for blobs in this transaction` }\n                  >\n                    { `Blob gas fees (${ currencyUnits.gwei })` }\n                  </DetailsInfoItem.Label>\n                  <DetailsInfoItem.Value>\n                    { data.blob_gas_price && (\n                      <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.blob_gas_price).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                    ) }\n                    { (data.max_fee_per_blob_gas && data.blob_gas_price) && <TextSeparator/> }\n                    { data.max_fee_per_blob_gas && (\n                      <>\n                        <Text as=\"span\" fontWeight=\"500\" whiteSpace=\"pre\">Max: </Text>\n                        <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.max_fee_per_blob_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                      </>\n                    ) }\n                  </DetailsInfoItem.Value>\n                </>\n              ) }\n              <DetailsInfoItemDivider/>\n            </>\n          ) }\n\n          <TxDetailsOther nonce={ data.nonce } type={ data.type } position={ data.position } queueIndex={ data.scroll?.queue_index }/>\n\n          <DetailsInfoItem.Label\n            hint=\"Binary data included with the transaction. See logs tab for additional info\"\n          >\n            Raw input\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <RawInputData hex={ data.raw_input } defaultDataType={ data.zilliqa?.is_scilla ? 'UTF-8' : 'Hex' }/>\n          </DetailsInfoItem.Value>\n\n          { data.decoded_input && (\n            <>\n              <DetailsInfoItem.Label\n                hint=\"Decoded input data\"\n              >\n                Decoded input data\n              </DetailsInfoItem.Label>\n              <DetailsInfoItem.Value>\n                <LogDecodedInputData data={ data.decoded_input }/>\n              </DetailsInfoItem.Value>\n            </>\n          ) }\n\n          { data.zksync && <ZkSyncL2TxnBatchHashesInfo data={ data.zksync } isLoading={ isLoading }/> }\n        </>\n      ) }\n    </Grid>\n  );\n};\n\nexport default TxInfo;\n","import React from 'react';\n\nimport TestnetWarning from 'ui/shared/alerts/TestnetWarning';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\n\nimport TxInfo from './details/TxInfo';\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxDetails = ({ txQuery }: Props) => {\n  if (txQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  return (\n    <>\n      <TestnetWarning mb={ 6 } isLoading={ txQuery.isPlaceholderData }/>\n      <TxInfo data={ txQuery.data } isLoading={ txQuery.isPlaceholderData } socketStatus={ txQuery.socketStatus }/>\n    </>\n  );\n};\n\nexport default React.memo(TxDetails);\n","import { Flex } from '@chakra-ui/react';\nimport { useQuery } from '@tanstack/react-query';\nimport React from 'react';\nimport type { Chain, GetBlockReturnType, GetTransactionReturnType, TransactionReceipt } from 'viem';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport { SECOND } from 'lib/consts';\nimport dayjs from 'lib/date/dayjs';\nimport throwOnResourceLoadError from 'lib/errors/throwOnResourceLoadError';\nimport hexToDecimal from 'lib/hexToDecimal';\nimport { publicClient } from 'lib/web3/client';\nimport { GET_BLOCK, GET_TRANSACTION, GET_TRANSACTION_RECEIPT, GET_TRANSACTION_CONFIRMATIONS } from 'stubs/RPC';\nimport { unknownAddress } from 'ui/shared/address/utils';\nimport ServiceDegradationWarning from 'ui/shared/alerts/ServiceDegradationWarning';\nimport TestnetWarning from 'ui/shared/alerts/TestnetWarning';\nimport isCustomAppError from 'ui/shared/AppError/isCustomAppError';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\n\nimport TxInfo from './details/TxInfo';\nimport type { TxQuery } from './useTxQuery';\n\ntype RpcResponseType = [\n  GetTransactionReturnType<Chain, 'latest'>,\n  TransactionReceipt | null,\n  bigint | null,\n  GetBlockReturnType<Chain, false, 'latest'> | null,\n];\n\ninterface Props {\n  hash: string;\n  txQuery: TxQuery;\n}\n\nconst TxDetailsDegraded = ({ hash, txQuery }: Props) => {\n\n  const [ originalError ] = React.useState(txQuery.error);\n\n  const query = useQuery<RpcResponseType, unknown, Transaction | null>({\n    queryKey: [ 'RPC', 'tx', { hash } ],\n    queryFn: async() => {\n      if (!publicClient) {\n        throw new Error('No public RPC client');\n      }\n\n      const tx = await publicClient.getTransaction({ hash: hash as `0x${ string }` });\n\n      if (!tx) {\n        throw new Error('Not found');\n      }\n\n      const txReceipt = await publicClient.getTransactionReceipt({ hash: hash as `0x${ string }` }).catch(() => null);\n      const block = await publicClient.getBlock({ blockHash: tx.blockHash }).catch(() => null);\n      const latestBlock = await publicClient.getBlock().catch(() => null);\n      const confirmations = latestBlock && block ? latestBlock.number - block.number + BigInt(1) : null;\n\n      return [\n        tx,\n        txReceipt,\n        confirmations,\n        block,\n      ];\n    },\n    select: (response) => {\n      const [ tx, txReceipt, txConfirmations, block ] = response;\n\n      const status = (() => {\n        if (!txReceipt) {\n          return null;\n        }\n\n        return txReceipt.status === 'success' ? 'ok' : 'error';\n      })();\n\n      const gasPrice = txReceipt?.effectiveGasPrice ?? tx.gasPrice;\n\n      return {\n        from: { ...unknownAddress, hash: tx.from as string },\n        to: tx.to ? { ...unknownAddress, hash: tx.to as string } : null,\n        hash: tx.hash as string,\n        timestamp: block?.timestamp ? dayjs.unix(Number(block.timestamp)).format() : null,\n        confirmation_duration: null,\n        status,\n        block_number: tx.blockNumber ? Number(tx.blockNumber) : null,\n        value: tx.value.toString(),\n        gas_price: gasPrice?.toString() ?? null,\n        base_fee_per_gas: block?.baseFeePerGas?.toString() ?? null,\n        max_fee_per_gas: tx.maxFeePerGas?.toString() ?? null,\n        max_priority_fee_per_gas: tx.maxPriorityFeePerGas?.toString() ?? null,\n        nonce: tx.nonce,\n        position: tx.transactionIndex,\n        type: tx.typeHex ? hexToDecimal(tx.typeHex) : null,\n        raw_input: tx.input,\n        gas_used: txReceipt?.gasUsed?.toString() ?? null,\n        gas_limit: tx.gas.toString(),\n        confirmations: txConfirmations && txConfirmations > 0 ? Number(txConfirmations) : 0,\n        fee: {\n          value: txReceipt && gasPrice ? (txReceipt.gasUsed * gasPrice).toString() : null,\n          type: 'actual',\n        },\n        created_contract: txReceipt?.contractAddress ?\n          { ...unknownAddress, hash: txReceipt.contractAddress, is_contract: true } :\n          null,\n        result: '',\n        priority_fee: null,\n        transaction_burnt_fee: null,\n        revert_reason: null,\n        decoded_input: null,\n        has_error_in_internal_transactions: null,\n        token_transfers: null,\n        token_transfers_overflow: false,\n        exchange_rate: null,\n        method: null,\n        transaction_types: [],\n        transaction_tag: null,\n        actions: [],\n      };\n    },\n    placeholderData: [\n      GET_TRANSACTION,\n      GET_TRANSACTION_RECEIPT,\n      GET_TRANSACTION_CONFIRMATIONS,\n      GET_BLOCK,\n    ],\n    refetchOnMount: false,\n    enabled: !txQuery.isPlaceholderData,\n    retry: 2,\n    retryDelay: 5 * SECOND,\n  });\n\n  const hasData = Boolean(query.data);\n\n  React.useEffect(() => {\n    if (!query.isPlaceholderData && hasData) {\n      txQuery.setRefetchOnError.on();\n    }\n  }, [ hasData, query.isPlaceholderData, txQuery ]);\n\n  React.useEffect(() => {\n    return () => {\n      txQuery.setRefetchOnError.off();\n    };\n  }, [ txQuery.setRefetchOnError ]);\n\n  if (!query.data) {\n    if (originalError && isCustomAppError(originalError)) {\n      throwOnResourceLoadError({ resource: 'tx', error: originalError, isError: true });\n    }\n\n    return <DataFetchAlert/>;\n  }\n\n  return (\n    <>\n      <Flex rowGap={ 2 } mb={ 6 } flexDir=\"column\">\n        <TestnetWarning isLoading={ query.isPlaceholderData }/>\n        { originalError?.status !== 404 && <ServiceDegradationWarning isLoading={ query.isPlaceholderData }/> }\n      </Flex>\n      <TxInfo data={ query.data } isLoading={ query.isPlaceholderData }/>\n    </>\n  );\n};\n\nexport default React.memo(TxDetailsDegraded);\n","import { Flex, Grid } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\nimport type { ExcludeUndefined } from 'types/utils';\n\nimport { currencyUnits } from 'lib/units';\nimport Tag from 'ui/shared/chakra/Tag';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport TxEntity from 'ui/shared/entities/tx/TxEntity';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\nimport RawInputData from 'ui/shared/RawInputData';\nimport TxFee from 'ui/shared/tx/TxFee';\nimport TxDetailsGasPrice from 'ui/tx/details/TxDetailsGasPrice';\nimport TxDetailsOther from 'ui/tx/details/TxDetailsOther';\n\ninterface Props {\n  data: ExcludeUndefined<Transaction['wrapped']>;\n}\n\nconst TxDetailsWrapped = ({ data }: Props) => {\n  return (\n    <Grid columnGap={ 8 } rowGap={{ base: 3, lg: 3 }} templateColumns={{ base: 'minmax(0, 1fr)', lg: 'auto minmax(0, 1fr)' }}>\n      <DetailsInfoItem.Label\n        hint=\"Unique character string (TxID) assigned to every verified transaction\"\n      >\n        Transaction hash\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value flexWrap=\"nowrap\">\n        <TxEntity hash={ data.hash } noIcon noLink noCopy={ false }/>\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItem.Label\n        hint=\"Transaction method name\"\n      >\n        Method\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <Tag colorScheme=\"gray\">\n          { data.method }\n        </Tag>\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItemDivider/>\n\n      { data.to && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Address (external or contract) receiving the transaction\"\n          >\n            { data.to.is_contract ? 'Interacted with contract' : 'To' }\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <Flex flexWrap=\"nowrap\" alignItems=\"center\" maxW=\"100%\">\n              <AddressEntity address={ data.to }/>\n            </Flex>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <DetailsInfoItemDivider/>\n\n      <DetailsInfoItem.Label\n        hint=\"Value sent in the native token (and USD) if applicable\"\n      >\n        Value\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <CurrencyValue\n          value={ data.value }\n          currency={ currencyUnits.ether }\n          flexWrap=\"wrap\"\n        />\n      </DetailsInfoItem.Value>\n\n      { data.fee.value !== null && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Total transaction fee\"\n          >\n            Transaction fee\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <TxFee tx={ data } withUsd/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <TxDetailsGasPrice gasPrice={ data.gas_price }/>\n\n      { data.gas_limit && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Maximum amount of gas that can be used by the transaction\"\n          >\n            Gas limit\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            { BigNumber(data.gas_limit).toFormat() }\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n\n      <DetailsInfoItemDivider/>\n\n      <TxDetailsOther type={ data.type } nonce={ data.nonce } position={ null }/>\n\n      <DetailsInfoItem.Label\n        hint=\"Binary data included with the transaction. See logs tab for additional info\"\n      >\n        Raw input\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value>\n        <RawInputData hex={ data.raw_input }/>\n      </DetailsInfoItem.Value>\n\n      { data.decoded_input && (\n        <>\n          <DetailsInfoItem.Label\n            hint=\"Decoded input data\"\n          >\n            Decoded input data\n          </DetailsInfoItem.Label>\n          <DetailsInfoItem.Value>\n            <LogDecodedInputData data={ data.decoded_input }/>\n          </DetailsInfoItem.Value>\n        </>\n      ) }\n    </Grid>\n  );\n};\n\nexport default TxDetailsWrapped;\n","import { Flex, HStack } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport config from 'configs/app';\nimport { currencyUnits } from 'lib/units';\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport Tag from 'ui/shared/chakra/Tag';\nimport ListItemMobile from 'ui/shared/ListItemMobile/ListItemMobile';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport { TX_INTERNALS_ITEMS } from 'ui/tx/internals/utils';\n\ntype Props = InternalTransaction & { isLoading?: boolean };\n\nconst TxInternalsListItem = ({ type, from, to, value, success, error, gas_limit: gasLimit, created_contract: createdContract, isLoading }: Props) => {\n  const typeTitle = TX_INTERNALS_ITEMS.find(({ id }) => id === type)?.title;\n  const toData = to ? to : createdContract;\n\n  return (\n    <ListItemMobile rowGap={ 3 }>\n      <Flex columnGap={ 2 }>\n        { typeTitle && <Tag colorScheme=\"cyan\" isLoading={ isLoading }>{ typeTitle }</Tag> }\n        <TxStatus status={ success ? 'ok' : 'error' } errorText={ error } isLoading={ isLoading }/>\n      </Flex>\n      <AddressFromTo\n        from={ from }\n        to={ toData }\n        isLoading={ isLoading }\n        w=\"100%\"\n        fontWeight=\"500\"\n      />\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" fontWeight={ 500 }>Value { currencyUnits.ether }</Skeleton>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" color=\"text_secondary\">\n          { BigNumber(value).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </HStack>\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" fontWeight={ 500 }>Gas limit</Skeleton>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" color=\"text_secondary\">{ BigNumber(gasLimit).toFormat() }</Skeleton>\n      </HStack>\n    </ListItemMobile>\n  );\n};\n\nexport default TxInternalsListItem;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport TxInternalsListItem from 'ui/tx/internals/TxInternalsListItem';\n\nconst TxInternalsList = ({ data, isLoading }: { data: Array<InternalTransaction>; isLoading?: boolean }) => {\n  return (\n    <Box>\n      { data.map((item, index) => <TxInternalsListItem key={ item.index.toString() + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>) }\n    </Box>\n  );\n};\n\nexport default TxInternalsList;\n","import { Tr, Td, Box, Flex } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport config from 'configs/app';\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport Tag from 'ui/shared/chakra/Tag';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport { TX_INTERNALS_ITEMS } from 'ui/tx/internals/utils';\n\ntype Props = InternalTransaction & {\n  isLoading?: boolean;\n};\n\nconst TxInternalTableItem = ({ type, from, to, value, success, error, gas_limit: gasLimit, created_contract: createdContract, isLoading }: Props) => {\n  const typeTitle = TX_INTERNALS_ITEMS.find(({ id }) => id === type)?.title;\n  const toData = to ? to : createdContract;\n\n  return (\n    <Tr alignItems=\"top\">\n      <Td>\n        <Flex rowGap={ 2 } flexWrap=\"wrap\">\n          { typeTitle && (\n            <Box w=\"126px\" display=\"inline-block\">\n              <Tag colorScheme=\"cyan\" mr={ 5 } isLoading={ isLoading }>{ typeTitle }</Tag>\n            </Box>\n          ) }\n          <TxStatus status={ success ? 'ok' : 'error' } errorText={ error } isLoading={ isLoading }/>\n        </Flex>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <AddressFromTo\n          from={ from }\n          to={ toData }\n          isLoading={ isLoading }\n        />\n      </Td>\n      <Td isNumeric verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(value).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </Td>\n      <Td isNumeric verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(gasLimit).toFormat() }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxInternalTableItem);\n","import { Table, Tbody, Tr, Th, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport { AddressHighlightProvider } from 'lib/contexts/addressHighlight';\nimport { currencyUnits } from 'lib/units';\nimport IconSvg from 'ui/shared/IconSvg';\nimport { default as Thead } from 'ui/shared/TheadSticky';\nimport TxInternalsTableItem from 'ui/tx/internals/TxInternalsTableItem';\nimport type { Sort, SortField } from 'ui/tx/internals/utils';\n\ninterface Props {\n  data: Array<InternalTransaction>;\n  sort: Sort | undefined;\n  onSortToggle: (field: SortField) => () => void;\n  top: number;\n  isLoading?: boolean;\n}\n\nconst TxInternalsTable = ({ data, sort, onSortToggle, top, isLoading }: Props) => {\n  const sortIconTransform = sort?.includes('asc') ? 'rotate(-90deg)' : 'rotate(90deg)';\n\n  return (\n    <AddressHighlightProvider>\n      <Table>\n        <Thead top={ top }>\n          <Tr>\n            <Th width=\"28%\">Type</Th>\n            <Th width=\"40%\">From/To</Th>\n            <Th width=\"16%\" isNumeric>\n              <Link display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" onClick={ onSortToggle('value') } columnGap={ 1 }>\n                { sort?.includes('value') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n                Value { currencyUnits.ether }\n              </Link>\n            </Th>\n            <Th width=\"16%\" isNumeric>\n              <Link display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" onClick={ onSortToggle('gas-limit') } columnGap={ 1 }>\n                { sort?.includes('gas-limit') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n                Gas limit { currencyUnits.ether }\n              </Link>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          { data.map((item, index) => (\n            <TxInternalsTableItem key={ item.index.toString() + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>\n          )) }\n        </Tbody>\n      </Table>\n    </AddressHighlightProvider>\n  );\n};\n\nexport default TxInternalsTable;\n","import { Show, Hide } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport compareBns from 'lib/bigint/compareBns';\n// import { apos } from 'lib/html-entities';\nimport { INTERNAL_TX } from 'stubs/internalTx';\nimport { generateListStub } from 'stubs/utils';\nimport ActionBar, { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\n// import FilterInput from 'ui/shared/filters/FilterInput';\n// import TxInternalsFilter from 'ui/tx/internals/TxInternalsFilter';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport { default as getNextSortValueShared } from 'ui/shared/sort/getNextSortValue';\nimport TxInternalsList from 'ui/tx/internals/TxInternalsList';\nimport TxInternalsTable from 'ui/tx/internals/TxInternalsTable';\nimport type { Sort, SortField } from 'ui/tx/internals/utils';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\n\nimport type { TxQuery } from './useTxQuery';\n\nconst SORT_SEQUENCE: Record<SortField, Array<Sort | undefined>> = {\n  value: [ 'value-desc', 'value-asc', undefined ],\n  'gas-limit': [ 'gas-limit-desc', 'gas-limit-asc', undefined ],\n};\n\nconst getNextSortValue = (getNextSortValueShared<SortField, Sort>).bind(undefined, SORT_SEQUENCE);\n\nconst sortFn = (sort: Sort | undefined) => (a: InternalTransaction, b: InternalTransaction) => {\n  switch (sort) {\n    case 'value-desc': {\n      return compareBns(b.value, a.value);\n    }\n\n    case 'value-asc': {\n      return compareBns(a.value, b.value);\n    }\n\n    case 'gas-limit-desc': {\n      return compareBns(b.gas_limit, a.gas_limit);\n    }\n\n    case 'gas-limit-asc': {\n      return compareBns(a.gas_limit, b.gas_limit);\n\n    }\n\n    default:\n      return 0;\n  }\n};\n\n// const searchFn = (searchTerm: string) => (item: InternalTransaction): boolean => {\n//   const formattedSearchTerm = searchTerm.toLowerCase();\n//   return item.type.toLowerCase().includes(formattedSearchTerm) ||\n//     item.from.hash.toLowerCase().includes(formattedSearchTerm) ||\n//     item.to.hash.toLowerCase().includes(formattedSearchTerm);\n// };\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxInternals = ({ txQuery }: Props) => {\n  // filters are not implemented yet in api\n  // const [ filters, setFilters ] = React.useState<Array<TxInternalsType>>([]);\n  // const [ searchTerm, setSearchTerm ] = React.useState<string>('');\n  const [ sort, setSort ] = React.useState<Sort>();\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_internal_txs',\n    pathParams: { hash: txQuery.data?.hash },\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.hash) && Boolean(txQuery.data?.status),\n      placeholderData: generateListStub<'tx_internal_txs'>(INTERNAL_TX, 3, { next_page_params: null }),\n    },\n  });\n\n  // const handleFilterChange = React.useCallback((nextValue: Array<TxInternalsType>) => {\n  //   setFilters(nextValue);\n  // }, []);\n\n  const handleSortToggle = React.useCallback((field: SortField) => {\n    return () => {\n      if (isPlaceholderData) {\n        return;\n      }\n      setSort(getNextSortValue(field));\n    };\n  }, [ isPlaceholderData ]);\n\n  if (!txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data?.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const filteredData = data?.items\n    .slice()\n  // .filter(({ type }) => filters.length > 0 ? filters.includes(type) : true)\n  // .filter(searchFn(searchTerm))\n    .sort(sortFn(sort));\n\n  const content = filteredData ? (\n    <>\n      <Show below=\"lg\" ssr={ false }><TxInternalsList data={ filteredData } isLoading={ isPlaceholderData }/></Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxInternalsTable\n          data={ filteredData }\n          sort={ sort }\n          onSortToggle={ handleSortToggle }\n          top={ pagination.isVisible ? ACTION_BAR_HEIGHT_DESKTOP : 0 }\n          isLoading={ isPlaceholderData }\n        />\n      </Hide>\n    </>\n  ) : null;\n\n  const actionBar = pagination.isVisible ? (\n    <ActionBar mt={ -6 }>\n      { /* <TxInternalsFilter onFilterChange={ handleFilterChange } defaultFilters={ filters } appliedFiltersNum={ filters.length }/> */ }\n      { /* <FilterInput onChange={ setSearchTerm } maxW=\"360px\" ml={ 3 } size=\"xs\" placeholder=\"Search by addresses, hash, method...\"/> */ }\n      <Pagination ml=\"auto\" { ...pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <DataListDisplay\n      isError={ isError || txQuery.isError }\n      items={ data?.items }\n      emptyText=\"There are no internal transactions for this transaction.\"\n      // filterProps={{\n      // emptyFilteredText: `Couldn${ apos }t find any transaction that matches your query.`.\n      // hasActiveFilters: Boolean(filters.length || searchTerm),\n      // }}\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n};\n\nexport default TxInternals;\n","import { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { SocketMessage } from 'lib/socket/types';\nimport type { RawTracesResponse } from 'types/api/rawTrace';\n\nimport useApiQuery from 'lib/api/useApiQuery';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport useSocketChannel from 'lib/socket/useSocketChannel';\nimport useSocketMessage from 'lib/socket/useSocketMessage';\nimport { TX_RAW_TRACE } from 'stubs/tx';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport RawDataSnippet from 'ui/shared/RawDataSnippet';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\n\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxRawTrace = ({ txQuery }: Props) => {\n  const [ isQueryEnabled, setIsQueryEnabled ] = React.useState(false);\n  const [ rawTraces, setRawTraces ] = React.useState<RawTracesResponse>();\n  const router = useRouter();\n  const hash = getQueryParamString(router.query.hash);\n\n  const { data, isPlaceholderData, isError } = useApiQuery('tx_raw_trace', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && Boolean(txQuery.data?.status) && isQueryEnabled,\n      placeholderData: TX_RAW_TRACE,\n    },\n  });\n\n  const handleRawTraceMessage: SocketMessage.TxRawTrace['handler'] = React.useCallback((payload) => {\n    setRawTraces(payload);\n  }, [ ]);\n\n  const enableQuery = React.useCallback(() => setIsQueryEnabled(true), []);\n\n  const channel = useSocketChannel({\n    topic: `transactions:${ hash }`,\n    isDisabled: !hash || txQuery.isPlaceholderData || !txQuery.data?.status,\n    onJoin: enableQuery,\n    onSocketError: enableQuery,\n  });\n  useSocketMessage({\n    channel,\n    event: 'raw_trace',\n    handler: handleRawTraceMessage,\n  });\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (isError || txQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  const dataToDisplay = rawTraces ? rawTraces : data;\n\n  if (!isPlaceholderData && dataToDisplay?.length === 0) {\n    return <span>No trace entries found.</span>;\n  }\n\n  const text = JSON.stringify(dataToDisplay, undefined, 4);\n\n  return <RawDataSnippet data={ text } isLoading={ isPlaceholderData }/>;\n};\n\nexport default TxRawTrace;\n","import type { TxStateChange } from 'types/api/txStateChanges';\n\nimport { ADDRESS_PARAMS } from './addressParams';\nimport { TOKEN_INFO_ERC_721 } from './token';\n\nexport const STATE_CHANGE_MINER: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '124280364215547113',\n  balance_before: '123405277440098758',\n  change: '875086775448355',\n  is_miner: true,\n  token: null,\n  type: 'coin',\n};\n\nexport const STATE_CHANGE_COIN: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '61659392141463351540',\n  balance_before: '61660292436225994690',\n  change: '-900294762600000',\n  is_miner: false,\n  token: null,\n  type: 'coin',\n};\n\nexport const STATE_CHANGE_TOKEN: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '43',\n  balance_before: '42',\n  change: [\n    {\n      direction: 'to',\n      total: {\n        token_id: '1621395',\n      },\n    },\n  ],\n  is_miner: false,\n  token: TOKEN_INFO_ERC_721,\n  type: 'token',\n};\n\nexport const TX_STATE_CHANGES: Array<TxStateChange> = [\n  STATE_CHANGE_MINER,\n  STATE_CHANGE_COIN,\n  STATE_CHANGE_TOKEN,\n];\n","import { Flex, Text, Link, useBoolean } from '@chakra-ui/react';\nimport React from 'react';\n\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\n\ninterface Props {\n  items: Array<{ total: { token_id: string | null } }>;\n  tokenAddress: string;\n  isLoading?: boolean;\n}\n\nconst TxStateTokenIdList = ({ items, tokenAddress, isLoading }: Props) => {\n  const [ isCut, setIsCut ] = useBoolean(true);\n\n  return (\n    <Flex flexDir=\"column\" rowGap={ 2 }>\n      { items.slice(0, isCut ? 3 : items.length).map((item, index) => {\n        if (item.total.token_id !== null) {\n          return (\n            <NftEntity\n              key={ index }\n              hash={ tokenAddress }\n              id={ item.total.token_id }\n              isLoading={ isLoading }\n            />\n          );\n        } else {\n          return <Text key={ index } color=\"text_secondary\">N/A</Text>;\n        }\n      }) }\n      { items.length > 3 && (\n        <Link\n          fontWeight={ 400 }\n          textDecoration=\"underline dashed\"\n          _hover={{ textDecoration: 'underline dashed', color: 'link_hovered' }}\n          onClick={ setIsCut.toggle }\n          pb={{ base: '5px', md: 0 }}\n        >\n          View { isCut ? 'more' : 'less' }\n        </Link>\n      ) }\n    </Flex>\n  );\n};\n\nexport default React.memo(TxStateTokenIdList);\n","import { Flex, Tooltip } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport config from 'configs/app';\nimport { ZERO_ADDRESS } from 'lib/consts';\nimport { nbsp, space } from 'lib/html-entities';\nimport getNetworkValidatorTitle from 'lib/networks/getNetworkValidatorTitle';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport Tag from 'ui/shared/chakra/Tag';\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\nimport TxStateTokenIdList from './TxStateTokenIdList';\n\nexport function getStateElements(data: TxStateChange, isLoading?: boolean) {\n  const tag = (() => {\n    if (data.is_miner) {\n      return (\n        <Tooltip label=\"A block producer who successfully included the block into the blockchain\">\n          <Tag textTransform=\"capitalize\" colorScheme=\"yellow\" isLoading={ isLoading }>\n            { getNetworkValidatorTitle() }\n          </Tag>\n        </Tooltip>\n      );\n    }\n\n    if (data.address.hash === ZERO_ADDRESS) {\n      const changeDirection = (() => {\n        if (Array.isArray(data.change)) {\n          const firstChange = data.change[0];\n          return firstChange.direction;\n        }\n        return Number(data.change) > 0 ? 'to' : 'from';\n      })();\n\n      if (changeDirection) {\n        const text = changeDirection === 'from' ? 'Mint' : 'Burn';\n        return (\n          <Tooltip label=\"Address used in tokens mintings and burnings\">\n            <Tag textTransform=\"capitalize\" colorScheme=\"yellow\" isLoading={ isLoading }>{ text } address</Tag>\n          </Tooltip>\n        );\n      }\n    }\n\n    return null;\n  })();\n\n  switch (data.type) {\n    case 'coin': {\n      const beforeBn = BigNumber(data.balance_before || '0').div(10 ** config.chain.currency.decimals);\n      const afterBn = BigNumber(data.balance_after || '0').div(10 ** config.chain.currency.decimals);\n      const differenceBn = afterBn.minus(beforeBn);\n      const changeColor = beforeBn.lte(afterBn) ? 'green.500' : 'red.500';\n      const changeSign = beforeBn.lte(afterBn) ? '+' : '-';\n\n      return {\n        before: (\n          <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\" display=\"inline-block\">\n            { beforeBn.toFormat() } { currencyUnits.ether }\n          </Skeleton>\n        ),\n        after: (\n          <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\" display=\"inline-block\">\n            { afterBn.toFormat() } { currencyUnits.ether }\n          </Skeleton>\n        ),\n        change: (\n          <Skeleton isLoaded={ !isLoading } display=\"inline-block\" color={ changeColor }>\n            <span>{ changeSign }{ nbsp }{ differenceBn.abs().toFormat() }</span>\n          </Skeleton>\n        ),\n        tag,\n      };\n    }\n    case 'token': {\n      const tokenLink = (\n        <TokenEntity\n          token={ data.token }\n          isLoading={ isLoading }\n          noIcon\n          noCopy\n          onlySymbol\n          w=\"auto\"\n        />\n      );\n      const beforeBn = BigNumber(data.balance_before || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n      const afterBn = BigNumber(data.balance_after || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n      const change = (() => {\n        let differenceBn;\n        if (typeof data.change === 'string') {\n          differenceBn = BigNumber(data.change || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n        } else {\n          differenceBn = afterBn.minus(beforeBn);\n        }\n\n        if (!differenceBn || differenceBn.isEqualTo(0)) {\n          return null;\n        }\n\n        const changeColor = differenceBn.isGreaterThanOrEqualTo(0) ? 'green.500' : 'red.500';\n        const changeSign = differenceBn.isGreaterThanOrEqualTo(0) ? '+' : '-';\n\n        return (\n          <Skeleton isLoaded={ !isLoading } display=\"inline-block\" color={ changeColor } wordBreak=\"break-all\">\n            <span>{ changeSign }{ nbsp }{ differenceBn.abs().toFormat() }</span>\n          </Skeleton>\n        );\n      })();\n\n      const tokenId = (() => {\n        if (!Array.isArray(data.change)) {\n          if ('token_id' in data && data.token_id) {\n            return (\n              <NftEntity\n                hash={ data.token.address }\n                id={ data.token_id }\n                isLoading={ isLoading }\n              />\n            );\n          } else {\n            return null;\n          }\n        }\n\n        return <TxStateTokenIdList items={ data.change } tokenAddress={ data.token.address } isLoading={ isLoading }/>;\n      })();\n\n      return {\n        before: data.balance_before ? (\n          <Flex whiteSpace=\"pre-wrap\" justifyContent={{ base: 'flex-start', lg: 'flex-end' }} flexWrap=\"wrap\">\n            <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\">{ beforeBn.toFormat() }</Skeleton>\n            <span>{ space }</span>\n            { tokenLink }\n          </Flex>\n        ) : null,\n        after: data.balance_after ? (\n          <Flex whiteSpace=\"pre-wrap\" justifyContent={{ base: 'flex-start', lg: 'flex-end' }} flexWrap=\"wrap\">\n            <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\">{ afterBn.toFormat() }</Skeleton>\n            <span>{ space }</span>\n            { tokenLink }\n          </Flex>\n        ) : null,\n        change,\n        tag,\n        tokenId,\n      };\n    }\n  }\n}\n","import React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\n\nimport { getStateElements } from './utils';\n\ninterface Props {\n  data: TxStateChange;\n  isLoading?: boolean;\n}\n\nconst TxStateListItem = ({ data, isLoading }: Props) => {\n\n  const { before, after, change, tag, tokenId } = getStateElements(data, isLoading);\n\n  return (\n    <ListItemMobileGrid.Container>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Address</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value py=\"3px\" display=\"flex\" flexWrap=\"nowrap\" columnGap={ 3 }>\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n          truncation=\"constant\"\n        />\n        { tag }\n      </ListItemMobileGrid.Value>\n\n      { before && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Before</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ before }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { after && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>After</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ after }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { change && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Change</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ change }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { tokenId && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Token ID</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value py=\"0\">{ tokenId }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default TxStateListItem;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport TxStateListItem from 'ui/tx/state/TxStateListItem';\n\ninterface Props {\n  data: Array<TxStateChange>;\n  isLoading?: boolean;\n}\n\nconst TxStateList = ({ data, isLoading }: Props) => {\n  return (\n    <Box>\n      { data.map((item, index) => <TxStateListItem key={ index } data={ item } isLoading={ isLoading }/>) }\n    </Box>\n  );\n};\n\nexport default TxStateList;\n","import { Tr, Td, Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\n\nimport { getStateElements } from './utils';\n\ninterface Props {\n  data: TxStateChange;\n  isLoading?: boolean;\n}\n\nconst TxStateTableItem = ({ data, isLoading }: Props) => {\n  const { before, after, change, tag, tokenId } = getStateElements(data, isLoading);\n\n  return (\n    <Tr>\n      <Td>\n        <Box py=\"3px\">\n          { tag }\n        </Box>\n      </Td>\n      <Td>\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n          truncation=\"constant\"\n          my=\"7px\"\n          w=\"100%\"\n        />\n      </Td>\n      <Td isNumeric><Box py=\"7px\">{ before }</Box></Td>\n      <Td isNumeric><Box py=\"7px\">{ after }</Box></Td>\n      <Td isNumeric><Box py=\"7px\">{ change }</Box></Td>\n      <Td>{ tokenId }</Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxStateTableItem);\n","import {\n  Table,\n  Tbody,\n  Tr,\n  Th,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport { AddressHighlightProvider } from 'lib/contexts/addressHighlight';\nimport { default as Thead } from 'ui/shared/TheadSticky';\nimport TxStateTableItem from 'ui/tx/state/TxStateTableItem';\n\ninterface Props {\n  data: Array<TxStateChange>;\n  isLoading?: boolean;\n  top: number;\n}\n\nconst TxStateTable = ({ data, isLoading, top }: Props) => {\n  return (\n    <AddressHighlightProvider>\n      <Table minWidth=\"1000px\" w=\"100%\">\n        <Thead top={ top }>\n          <Tr>\n            <Th width=\"140px\">Type</Th>\n            <Th width=\"160px\">Address</Th>\n            <Th width=\"33%\" isNumeric>Before</Th>\n            <Th width=\"33%\" isNumeric>After</Th>\n            <Th width=\"33%\" isNumeric>Change</Th>\n            <Th width=\"150px\" minW=\"80px\" maxW=\"150px\">Token ID</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          { data.map((item, index) => <TxStateTableItem data={ item } key={ index } isLoading={ isLoading }/>) }\n        </Tbody>\n      </Table>\n    </AddressHighlightProvider>\n  );\n};\n\nexport default React.memo(TxStateTable);\n","import { Accordion, Hide, Show, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { TX_STATE_CHANGES } from 'stubs/txStateChanges';\nimport ActionBar, { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TxStateList from 'ui/tx/state/TxStateList';\nimport TxStateTable from 'ui/tx/state/TxStateTable';\n\nimport TxPendingAlert from './TxPendingAlert';\nimport TxSocketAlert from './TxSocketAlert';\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxState = ({ txQuery }: Props) => {\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_state_changes',\n    pathParams: { hash: txQuery.data?.hash },\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.hash) && Boolean(txQuery.data?.status),\n      placeholderData: {\n        items: TX_STATE_CHANGES,\n        next_page_params: {\n          items_count: 1,\n          state_changes: null,\n        },\n      },\n    },\n  });\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const content = data ? (\n    <Accordion allowMultiple defaultIndex={ [] }>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxStateTable data={ data.items } isLoading={ isPlaceholderData } top={ pagination.isVisible ? ACTION_BAR_HEIGHT_DESKTOP : 0 }/>\n      </Hide>\n      <Show below=\"lg\" ssr={ false }>\n        <TxStateList data={ data.items } isLoading={ isPlaceholderData }/>\n      </Show>\n    </Accordion>\n  ) : null;\n\n  const actionBar = pagination.isVisible ? (\n    <ActionBar mt={ -6 } showShadow>\n      <Pagination ml=\"auto\" { ...pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <>\n      { !isError && !txQuery.isError && (\n        <Text mb={ 6 }>\n          A set of information that represents the current state is updated when a transaction takes place on the network.\n          The below is a summary of those changes.\n        </Text>\n      ) }\n      <DataListDisplay\n        isError={ isError || txQuery.isError }\n        items={ data?.items }\n        emptyText=\"There are no state changes for this transaction.\"\n        content={ content }\n        actionBar={ actionBar }\n      />\n    </>\n  );\n};\n\nexport default TxState;\n","import type { NovesResponseData } from 'types/api/noves';\n\nimport type { SummaryAddress, SummaryValues } from './createNovesSummaryObject';\n\nconst ADDRESS_REGEXP = /(0x[\\da-f]+\\b)/gi;\n// eslint-disable-next-line regexp/no-unused-capturing-group\nconst CONTRACT_REGEXP = /(contract 0x[\\da-f]+\\b)/gi;\n\nexport const createAddressValues = (translateData: NovesResponseData, description: string) => {\n  const addressMatches = description.match(ADDRESS_REGEXP);\n  const contractMatches = description.match(CONTRACT_REGEXP);\n\n  let descriptionAddresses: Array<string> = addressMatches ? addressMatches : [];\n  let contractAddresses: Array<string> = [];\n\n  if (contractMatches?.length) {\n    contractAddresses = contractMatches.map(text => text.split(ADDRESS_REGEXP)[1]);\n    descriptionAddresses = addressMatches?.filter(address => !contractAddresses.includes(address)) || [];\n  }\n\n  const addresses = extractAddresses(translateData);\n\n  const descriptionSummaryValues = createAddressSummaryValues(descriptionAddresses, addresses);\n  const contractSummaryValues = createAddressSummaryValues(contractAddresses, addresses, true);\n\n  const summaryValues = [ ...descriptionSummaryValues, ...contractSummaryValues ];\n\n  return summaryValues;\n};\n\nconst createAddressSummaryValues = (descriptionAddresses: Array<string>, addresses: Array<SummaryAddress>, isContract = false) => {\n  const summaryValues: Array<SummaryValues | undefined> = descriptionAddresses.map(match => {\n    const address = addresses.find(address => address.hash.toUpperCase().startsWith(match.toUpperCase()));\n\n    if (!address) {\n      return undefined;\n    }\n\n    const value: SummaryValues = {\n      match: match,\n      type: 'address',\n      value: isContract ? { ...address, is_contract: true } : address,\n    };\n\n    return value;\n  });\n\n  return summaryValues.filter(value => value !== undefined) as Array<SummaryValues>;\n};\n\nfunction extractAddresses(data: NovesResponseData) {\n  const addressesSet: Set<{ hash: string | null; name?: string | null }> = new Set(); // Use a Set to store unique addresses\n\n  addressesSet.add({ hash: data.rawTransactionData.fromAddress });\n  addressesSet.add({ hash: data.rawTransactionData.toAddress });\n\n  if (data.classificationData.approved) {\n    addressesSet.add({ hash: data.classificationData.approved.spender });\n  }\n\n  if (data.classificationData.deployedContractAddress) {\n    addressesSet.add({ hash: data.classificationData.deployedContractAddress });\n  }\n\n  if (data.txTypeVersion === 2) {\n    data.classificationData.sent.forEach((transaction) => {\n      addressesSet.add({ hash: transaction.from.address, name: transaction.from.name });\n      addressesSet.add({ hash: transaction.to.address, name: transaction.to.name });\n    });\n\n    data.classificationData.received.forEach((transaction) => {\n      addressesSet.add({ hash: transaction.from.address, name: transaction.from.name });\n      addressesSet.add({ hash: transaction.to.address, name: transaction.to.name });\n    });\n  }\n\n  const addresses = Array.from(addressesSet) as Array<{ hash: string; name?: string }>; // Convert Set to an array\n\n  // Remove empty and null values\n  return addresses.filter(address => address.hash !== null && address.hash !== '' && address.hash !== undefined);\n}\n","import { groupBy, mapValues } from 'es-toolkit';\n\nimport type { NovesResponseData } from 'types/api/noves';\nimport type { TokenInfo } from 'types/api/token';\n\nimport { HEX_REGEXP } from 'lib/regexp';\n\nexport interface NovesTokenInfo extends Pick<TokenInfo, 'address' | 'name' | 'symbol'> {\n  id?: string | undefined;\n}\n\nexport interface TokensData {\n  nameList: Array<string>;\n  symbolList: Array<string>;\n  idList: Array<string>;\n  byName: {\n    [x: string]: NovesTokenInfo;\n  };\n  bySymbol: {\n    [x: string]: NovesTokenInfo;\n  };\n}\n\nexport function getTokensData(data: NovesResponseData): TokensData {\n  const sent = data.classificationData.sent || [];\n  const received = data.classificationData.received || [];\n  const approved = data.classificationData.approved ? [ data.classificationData.approved ] : [];\n\n  const txItems = [ ...sent, ...received, ...approved ];\n\n  // Extract all tokens data\n  const tokens = txItems.map((item) => {\n    const name = item.nft?.name || item.token?.name || null;\n    const symbol = item.nft?.symbol || item.token?.symbol || null;\n    const address = item.nft?.address || item.token?.address || '';\n\n    const validTokenAddress = address ? HEX_REGEXP.test(address) : false;\n\n    const token = {\n      name: name,\n      symbol: symbol?.toLowerCase() === name?.toLowerCase() ? null : symbol,\n      address: validTokenAddress ? address : '',\n      id: item.nft?.id || item.token?.id,\n    };\n\n    return token;\n  });\n\n  // Group tokens by property into arrays\n  const tokensGroupByName = groupBy(tokens, (item) => item.name || 'null');\n  const tokensGroupBySymbol = groupBy(tokens, (item) => item.symbol || 'null');\n  const tokensGroupById = groupBy(tokens, (item) => item.id || 'null');\n\n  // Map properties to an object and remove duplicates\n  const mappedNames = mapValues(tokensGroupByName, (i) => {\n    return i[0];\n  });\n\n  const mappedSymbols = mapValues(tokensGroupBySymbol, (i) => {\n    return i[0];\n  });\n\n  const mappedIds = mapValues(tokensGroupById, (i) => {\n    return i[0];\n  });\n\n  const filters = [ 'undefined', 'null' ];\n  // Array of keys to match in string\n  const nameList = Object.keys(mappedNames).filter(i => !filters.includes(i));\n  const symbolList = Object.keys(mappedSymbols).filter(i => !filters.includes(i));\n  const idList = Object.keys(mappedIds).filter(i => !filters.includes(i));\n\n  return {\n    nameList,\n    symbolList,\n    idList,\n    byName: mappedNames,\n    bySymbol: mappedSymbols,\n  };\n}\n","import type { NovesResponseData } from 'types/api/noves';\nimport type { TxInterpretationSummary } from 'types/api/txInterpretation';\n\nimport { createAddressValues } from './getAddressValues';\nimport type { NovesTokenInfo, TokensData } from './getTokensData';\nimport { getTokensData } from './getTokensData';\n\nexport interface SummaryAddress {\n  hash: string;\n  name?: string | null;\n  is_contract?: boolean;\n}\n\nexport interface SummaryValues {\n  match: string;\n  value: NovesTokenInfo | SummaryAddress;\n  type: 'token' | 'address';\n}\n\ninterface NovesSummary {\n  summary_template: string;\n  summary_template_variables: { [x: string]: unknown };\n}\n\nexport const createNovesSummaryObject = (translateData: NovesResponseData) => {\n\n  // Remove final dot and add space at the start to avoid matching issues\n  const description = translateData.classificationData.description;\n  const removedFinalDot = description.endsWith('.') ? description.slice(0, description.length - 1) : description;\n  let parsedDescription = ' ' + removedFinalDot + ' ';\n  const tokenData = getTokensData(translateData);\n\n  const idsMatched = tokenData.idList.filter(id => parsedDescription.includes(`#${ id }`));\n  const tokensMatchedByName = tokenData.nameList.filter(name => parsedDescription.toUpperCase().includes(` ${ name.toUpperCase() }`));\n  let tokensMatchedBySymbol = tokenData.symbolList.filter(symbol => parsedDescription.toUpperCase().includes(` ${ symbol.toUpperCase() }`));\n\n  // Filter symbols if they're already matched by name\n  tokensMatchedBySymbol = tokensMatchedBySymbol.filter(symbol => !tokensMatchedByName.includes(tokenData.bySymbol[symbol]?.name || ''));\n\n  const summaryValues: Array<SummaryValues> = [];\n\n  if (idsMatched.length) {\n    parsedDescription = removeIds(tokensMatchedByName, tokensMatchedBySymbol, idsMatched, tokenData, parsedDescription);\n  }\n\n  if (tokensMatchedByName.length) {\n    const values = createTokensSummaryValues(tokensMatchedByName, tokenData.byName);\n    summaryValues.push(...values);\n  }\n\n  if (tokensMatchedBySymbol.length) {\n    const values = createTokensSummaryValues(tokensMatchedBySymbol, tokenData.bySymbol);\n    summaryValues.push(...values);\n  }\n\n  const addressSummaryValues = createAddressValues(translateData, parsedDescription);\n  if (addressSummaryValues.length) {\n    summaryValues.push(...addressSummaryValues);\n  }\n\n  return createSummaryTemplate(summaryValues, parsedDescription) as TxInterpretationSummary;\n};\n\nconst removeIds = (\n  tokensMatchedByName: Array<string>,\n  tokensMatchedBySymbol: Array<string>,\n  idsMatched: Array<string>,\n  tokenData: TokensData,\n  parsedDescription: string,\n) => {\n  // Remove ids from the description since we already have that info in the token object\n  let description = parsedDescription;\n\n  tokensMatchedByName.forEach(name => {\n    const hasId = idsMatched.includes(tokenData.byName[name].id || '');\n    if (hasId) {\n      description = description.replaceAll(`#${ tokenData.byName[name].id }`, '');\n    }\n  });\n\n  tokensMatchedBySymbol.forEach(name => {\n    const hasId = idsMatched.includes(tokenData.bySymbol[name].id || '');\n    if (hasId) {\n      description = description.replaceAll(`#${ tokenData.bySymbol[name].id }`, '');\n    }\n  });\n\n  return description;\n};\n\nconst createTokensSummaryValues = (\n  matchedStrings: Array<string>,\n  tokens: {\n    [x: string]: NovesTokenInfo;\n  },\n) => {\n  const summaryValues: Array<SummaryValues> = matchedStrings.map(match => ({\n    match,\n    type: 'token',\n    value: tokens[match],\n  }));\n\n  return summaryValues;\n};\n\nconst createSummaryTemplate = (summaryValues: Array<SummaryValues | undefined>, parsedDescription: string) => {\n  let newDescription = parsedDescription;\n\n  const result: NovesSummary = {\n    summary_template: newDescription,\n    summary_template_variables: {},\n  };\n\n  if (!summaryValues[0]) {\n    return result;\n  }\n\n  const createTemplate = (data: SummaryValues, index = 0) => {\n    newDescription = newDescription.replaceAll(new RegExp(` ${ data.match } `, 'gi'), `{${ data.match }}`);\n\n    const variable = {\n      type: data.type,\n      value: data.value,\n    };\n\n    result.summary_template_variables[data.match] = variable;\n\n    const nextValue = summaryValues[index + 1];\n    if (nextValue) {\n      createTemplate(nextValue, index + 1);\n    }\n  };\n\n  createTemplate(summaryValues[0]);\n\n  result.summary_template = newDescription;\n\n  return result;\n};\n","import { Box, Flex, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { AddressParam } from 'types/api/addressParams';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { NOVES_TRANSLATE } from 'stubs/noves/NovesTranslate';\nimport { TX_INTERPRETATION } from 'stubs/txInterpretation';\nimport AccountActionsMenu from 'ui/shared/AccountActionsMenu/AccountActionsMenu';\nimport AppActionButton from 'ui/shared/AppActionButton/AppActionButton';\nimport useAppActionData from 'ui/shared/AppActionButton/useAppActionData';\nimport { TX_ACTIONS_BLOCK_ID } from 'ui/shared/DetailsActionsWrapper';\nimport TxEntity from 'ui/shared/entities/tx/TxEntity';\nimport NetworkExplorers from 'ui/shared/NetworkExplorers';\nimport TxInterpretation from 'ui/shared/tx/interpretation/TxInterpretation';\n\nimport { createNovesSummaryObject } from './assetFlows/utils/createNovesSummaryObject';\nimport type { TxQuery } from './useTxQuery';\n\ntype Props = {\n  hash: string;\n  hasTag: boolean;\n  txQuery: TxQuery;\n};\n\nconst feature = config.features.txInterpretation;\n\nconst TxSubHeading = ({ hash, hasTag, txQuery }: Props) => {\n  const hasInterpretationFeature = feature.isEnabled;\n  const isNovesInterpretation = hasInterpretationFeature && feature.provider === 'noves';\n\n  const appActionData = useAppActionData(txQuery.data?.to?.hash, !txQuery.isPlaceholderData);\n\n  const txInterpretationQuery = useApiQuery('tx_interpretation', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && (hasInterpretationFeature && !isNovesInterpretation),\n      placeholderData: TX_INTERPRETATION,\n    },\n  });\n\n  const novesInterpretationQuery = useApiQuery('noves_transaction', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && isNovesInterpretation,\n      placeholderData: NOVES_TRANSLATE,\n    },\n  });\n\n  const hasNovesInterpretation = isNovesInterpretation &&\n    (novesInterpretationQuery.isPlaceholderData || Boolean(novesInterpretationQuery.data?.classificationData.description));\n\n  const hasInternalInterpretation = (hasInterpretationFeature && !isNovesInterpretation) &&\n  (txInterpretationQuery.isPlaceholderData || Boolean(txInterpretationQuery.data?.data.summaries.length));\n\n  const hasViewAllInterpretationsLink =\n    !txInterpretationQuery.isPlaceholderData && txInterpretationQuery.data?.data.summaries && txInterpretationQuery.data?.data.summaries.length > 1;\n\n  const addressDataMap: Record<string, AddressParam> = {};\n  [ txQuery.data?.from, txQuery.data?.to ]\n    .filter((data): data is AddressParam => Boolean(data && data.hash))\n    .forEach(data => {\n      addressDataMap[data.hash] = data;\n    });\n\n  const content = (() => {\n    if (hasNovesInterpretation && novesInterpretationQuery.data) {\n      const novesSummary = createNovesSummaryObject(novesInterpretationQuery.data);\n      return (\n        <TxInterpretation\n          summary={ novesSummary }\n          isLoading={ novesInterpretationQuery.isPlaceholderData || txQuery.isPlaceholderData }\n          addressDataMap={ addressDataMap }\n          fontSize=\"lg\"\n          mr={{ base: 0, lg: 6 }}\n        />\n      );\n    } else if (hasInternalInterpretation) {\n      return (\n        <Flex mr={{ base: 0, lg: 6 }} flexWrap=\"wrap\" alignItems=\"center\">\n          <TxInterpretation\n            summary={ txInterpretationQuery.data?.data.summaries[0] }\n            isLoading={ txInterpretationQuery.isPlaceholderData || txQuery.isPlaceholderData }\n            addressDataMap={ addressDataMap }\n            fontSize=\"lg\"\n            mr={ hasViewAllInterpretationsLink ? 3 : 0 }\n          />\n          { hasViewAllInterpretationsLink &&\n          <Link href={ `#${ TX_ACTIONS_BLOCK_ID }` }>View all</Link> }\n        </Flex>\n      );\n    } else if (hasInterpretationFeature && txQuery.data?.method && txQuery.data?.from && txQuery.data?.to) {\n      return (\n        <TxInterpretation\n          summary={{\n            summary_template: `{sender_hash} ${ txQuery.data.status === 'error' ? 'failed to call' : 'called' } {method} on {receiver_hash}`,\n            summary_template_variables: {\n              sender_hash: {\n                type: 'address',\n                value: txQuery.data.from,\n              },\n              method: {\n                type: 'method',\n                value: txQuery.data.method,\n              },\n              receiver_hash: {\n                type: 'address',\n                value: txQuery.data.to,\n              },\n            },\n          }}\n          isLoading={ txQuery.isPlaceholderData }\n          fontSize=\"lg\"\n          mr={{ base: 0, lg: 6 }}\n        />\n      );\n    } else {\n      return <TxEntity hash={ hash } noLink noCopy={ false } fontWeight={ 500 } mr={{ base: 0, lg: 2 }} fontFamily=\"heading\"/>;\n    }\n  })();\n\n  const isLoading =\n    txQuery.isPlaceholderData ||\n    (hasNovesInterpretation && novesInterpretationQuery.isPlaceholderData) ||\n    (hasInternalInterpretation && txInterpretationQuery.isPlaceholderData);\n\n  return (\n    <Box display={{ base: 'block', lg: 'flex' }} alignItems=\"center\" w=\"100%\">\n      { content }\n      <Flex\n        alignItems=\"center\"\n        justifyContent={{ base: 'start', lg: 'space-between' }}\n        flexGrow={ 1 }\n        gap={ 3 }\n        mt={{ base: 3, lg: 0 }}\n      >\n        { !hasTag && <AccountActionsMenu isLoading={ isLoading }/> }\n        { appActionData && (\n          <AppActionButton data={ appActionData } txHash={ hash } source=\"Txn\"/>\n        ) }\n        <NetworkExplorers type=\"tx\" pathParam={ hash } ml={{ base: 0, lg: 'auto' }}/>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default TxSubHeading;\n","import React from 'react';\n\nimport { USER_OPS_ITEM } from 'stubs/userOps';\nimport { generateListStub } from 'stubs/utils';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport UserOpsContent from 'ui/userOps/UserOpsContent';\n\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n}\n\nconst TxUserOps = ({ txQuery }: Props) => {\n  const userOpsQuery = useQueryWithPages({\n    resourceName: 'user_ops',\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.status && txQuery.data?.hash),\n      // most often there is only one user op in one tx\n      placeholderData: generateListStub<'user_ops'>(USER_OPS_ITEM, 1, { next_page_params: null }),\n    },\n    filters: { transaction_hash: txQuery.data?.hash },\n  });\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (txQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  return <UserOpsContent query={ userOpsQuery } showTx={ false }/>;\n};\n\nexport default TxUserOps;\n","import { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { RoutedTab } from 'ui/shared/Tabs/types';\n\nimport config from 'configs/app';\nimport { useAppContext } from 'lib/contexts/app';\nimport throwOnResourceLoadError from 'lib/errors/throwOnResourceLoadError';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport { publicClient } from 'lib/web3/client';\nimport isCustomAppError from 'ui/shared/AppError/isCustomAppError';\nimport EntityTags from 'ui/shared/EntityTags/EntityTags';\nimport PageTitle from 'ui/shared/Page/PageTitle';\nimport RoutedTabs from 'ui/shared/Tabs/RoutedTabs';\nimport TabsSkeleton from 'ui/shared/Tabs/TabsSkeleton';\nimport useTabIndexFromQuery from 'ui/shared/Tabs/useTabIndexFromQuery';\nimport TxAssetFlows from 'ui/tx/TxAssetFlows';\nimport TxAuthorizations from 'ui/tx/TxAuthorizations';\nimport TxBlobs from 'ui/tx/TxBlobs';\nimport TxDetails from 'ui/tx/TxDetails';\nimport TxDetailsDegraded from 'ui/tx/TxDetailsDegraded';\nimport TxDetailsWrapped from 'ui/tx/TxDetailsWrapped';\nimport TxInternals from 'ui/tx/TxInternals';\nimport TxLogs from 'ui/tx/TxLogs';\nimport TxRawTrace from 'ui/tx/TxRawTrace';\nimport TxState from 'ui/tx/TxState';\nimport TxSubHeading from 'ui/tx/TxSubHeading';\nimport TxTokenTransfer from 'ui/tx/TxTokenTransfer';\nimport TxUserOps from 'ui/tx/TxUserOps';\nimport useTxQuery from 'ui/tx/useTxQuery';\n\nconst txInterpretation = config.features.txInterpretation;\n\nconst TransactionPageContent = () => {\n  const router = useRouter();\n  const appProps = useAppContext();\n\n  const hash = getQueryParamString(router.query.hash);\n  const txQuery = useTxQuery();\n  const { data, isPlaceholderData, isError, error, errorUpdateCount } = txQuery;\n\n  const showDegradedView = publicClient && ((isError && error.status !== 422) || isPlaceholderData) && errorUpdateCount > 0;\n\n  const tabs: Array<RoutedTab> = (() => {\n    const detailsComponent = showDegradedView ?\n      <TxDetailsDegraded hash={ hash } txQuery={ txQuery }/> :\n      <TxDetails txQuery={ txQuery }/>;\n\n    return [\n      {\n        id: 'index',\n        title: config.features.suave.isEnabled && data?.wrapped ? 'Confidential compute tx details' : 'Details',\n        component: detailsComponent,\n      },\n      txInterpretation.isEnabled && txInterpretation.provider === 'noves' ?\n        { id: 'asset_flows', title: 'Asset Flows', component: <TxAssetFlows hash={ hash }/> } :\n        undefined,\n      config.features.suave.isEnabled && data?.wrapped ?\n        { id: 'wrapped', title: 'Regular tx details', component: <TxDetailsWrapped data={ data.wrapped }/> } :\n        undefined,\n      { id: 'token_transfers', title: 'Token transfers', component: <TxTokenTransfer txQuery={ txQuery }/> },\n      config.features.userOps.isEnabled ?\n        { id: 'user_ops', title: 'User operations', component: <TxUserOps txQuery={ txQuery }/> } :\n        undefined,\n      { id: 'internal', title: 'Internal txns', component: <TxInternals txQuery={ txQuery }/> },\n      config.features.dataAvailability.isEnabled && txQuery.data?.blob_versioned_hashes?.length ?\n        { id: 'blobs', title: 'Blobs', component: <TxBlobs txQuery={ txQuery }/> } :\n        undefined,\n      { id: 'logs', title: 'Logs', component: <TxLogs txQuery={ txQuery }/> },\n      { id: 'state', title: 'State', component: <TxState txQuery={ txQuery }/> },\n      { id: 'raw_trace', title: 'Raw trace', component: <TxRawTrace txQuery={ txQuery }/> },\n      txQuery.data?.authorization_list?.length ?\n        { id: 'authorizations', title: 'Authorizations', component: <TxAuthorizations txQuery={ txQuery }/> } :\n        undefined,\n    ].filter(Boolean);\n  })();\n\n  const tabIndex = useTabIndexFromQuery(tabs);\n\n  const tags = (\n    <EntityTags\n      isLoading={ isPlaceholderData }\n      tags={ data?.transaction_tag ? [ { slug: data.transaction_tag, name: data.transaction_tag, tagType: 'private_tag' as const } ] : [] }\n    />\n  );\n\n  const backLink = React.useMemo(() => {\n    const hasGoBackLink = appProps.referrer && appProps.referrer.includes('/txs');\n\n    if (!hasGoBackLink) {\n      return;\n    }\n\n    return {\n      label: 'Back to transactions list',\n      url: appProps.referrer,\n    };\n  }, [ appProps.referrer ]);\n\n  const titleSecondRow = <TxSubHeading hash={ hash } hasTag={ Boolean(data?.transaction_tag) } txQuery={ txQuery }/>;\n\n  const content = (() => {\n    if (isPlaceholderData && !showDegradedView) {\n      return (\n        <>\n          <TabsSkeleton tabs={ tabs } mt={ 6 }/>\n          { tabs[tabIndex]?.component }\n        </>\n      );\n    }\n\n    return <RoutedTabs tabs={ tabs }/>;\n  })();\n\n  if (isError && !showDegradedView) {\n    if (isCustomAppError(error)) {\n      throwOnResourceLoadError({ resource: 'tx', error, isError: true });\n    }\n  }\n\n  return (\n    <>\n      <PageTitle\n        title=\"Transaction details\"\n        backLink={ backLink }\n        contentAfter={ tags }\n        secondRow={ titleSecondRow }\n      />\n      { content }\n    </>\n  );\n};\n\nexport default TransactionPageContent;\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenInfo } from 'types/api/token';\n\nimport getCurrencyValue from 'lib/getCurrencyValue';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\ninterface Props {\n  token: TokenInfo;\n  value: string;\n  decimals: string | null;\n}\nconst FtTokenTransferSnippet = ({ token, value, decimals }: Props) => {\n  const { valueStr, usd } = getCurrencyValue({\n    value: value,\n    exchangeRate: token.exchange_rate,\n    accuracyUsd: 2,\n    decimals: decimals,\n  });\n\n  return (\n    <>\n      <chakra.span color=\"text_secondary\">for</chakra.span>\n      <span>{ valueStr }</span>\n      <TokenEntity\n        token={{ ...token, name: token.symbol || token.name }}\n        noCopy\n        noSymbol\n        w=\"auto\"\n      />\n      { usd && <chakra.span color=\"text_secondary\">(${ usd })</chakra.span> }\n    </>\n  );\n};\n\nexport default React.memo(FtTokenTransferSnippet);\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenInfo } from 'types/api/token';\n\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\ninterface Props {\n  token: TokenInfo;\n  value: string;\n  tokenId: string | null;\n}\n\nconst NftTokenTransferSnippet = ({ value, token, tokenId }: Props) => {\n  const num = value === '1' ? '' : value;\n\n  const tokenIdContent = (() => {\n    if (tokenId === null) {\n      // ERC-404 may not have an ID\n      if (token.type === 'ERC-404') {\n        return null;\n      }\n      return <chakra.span color=\"text_secondary\"> N/A </chakra.span>;\n    }\n\n    return (\n      <NftEntity\n        hash={ token.address }\n        id={ tokenId }\n        fontWeight={ 600 }\n        icon={{ size: 'md' }}\n        maxW={{ base: '100%', lg: '150px' }}\n        w=\"auto\"\n        flexShrink={ 0 }\n      />\n    );\n\n  })();\n\n  return (\n    <>\n      { num ? (\n        <>\n          <chakra.span color=\"text_secondary\">for</chakra.span>\n          <span>{ num }</span>\n          <chakra.span color=\"text_secondary\">token ID</chakra.span>\n        </>\n      ) : (\n        <chakra.span color=\"text_secondary\">for token ID</chakra.span>\n      ) }\n      { tokenIdContent }\n      <chakra.span color=\"text_secondary\">of</chakra.span>\n      <TokenEntity\n        token={ token }\n        noCopy\n        w=\"auto\"\n        flexGrow={ 1 }\n      />\n    </>\n  );\n};\n\nexport default React.memo(NftTokenTransferSnippet);\n","import { Flex } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type {\n  TokenTransfer,\n  Erc20TotalPayload,\n  Erc721TotalPayload,\n  Erc1155TotalPayload,\n  Erc404TotalPayload,\n} from 'types/api/tokenTransfer';\n\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\nimport TokenTransferSnippetFiat from './TokenTransferSnippetFiat';\nimport TokenTransferSnippetNft from './TokenTransferSnippetNft';\n\ninterface Props {\n  data: TokenTransfer;\n  noAddressIcons?: boolean;\n  isLoading?: boolean;\n}\n\nconst TokenTransferSnippet = ({ data, isLoading, noAddressIcons = true }: Props) => {\n\n  const content = (() => {\n\n    if (isLoading) {\n      return <Skeleton w=\"250px\" h={ 6 }/>;\n    }\n\n    switch (data.token?.type) {\n      case 'ERC-20': {\n        const total = data.total as Erc20TotalPayload | null;\n        if (total === null || total.value === null) {\n          return null;\n        }\n        return <TokenTransferSnippetFiat token={ data.token } value={ total.value } decimals={ total.decimals }/>;\n      }\n\n      case 'ERC-721': {\n        const total = data.total as Erc721TotalPayload;\n        return (\n          <TokenTransferSnippetNft\n            token={ data.token }\n            tokenId={ total.token_id }\n            value=\"1\"\n          />\n        );\n      }\n\n      case 'ERC-1155': {\n        const total = data.total as Erc1155TotalPayload;\n        return (\n          <TokenTransferSnippetNft\n            key={ total.token_id }\n            token={ data.token }\n            tokenId={ total.token_id }\n            value={ total.value }\n          />\n        );\n      }\n\n      case 'ERC-404': {\n        const total = data.total as Erc404TotalPayload | null;\n        if (total === null) {\n          return null;\n        }\n\n        if (total.token_id !== null) {\n          return (\n            <TokenTransferSnippetNft\n              token={ data.token }\n              tokenId={ total.token_id }\n              value=\"1\"\n            />\n          );\n        } else {\n          if (total.value === null) {\n            return null;\n          }\n\n          return <TokenTransferSnippetFiat token={ data.token } value={ total.value } decimals={ total.decimals }/>;\n        }\n      }\n      default: {\n        return null;\n      }\n    }\n  })();\n\n  return (\n    <Flex\n      alignItems=\"flex-start\"\n      flexWrap=\"wrap\"\n      columnGap={ 2 }\n      rowGap={ 3 }\n      flexDir=\"row\"\n      w=\"100%\"\n      fontWeight={ 500 }\n    >\n      <AddressFromTo\n        from={ data.from }\n        to={ data.to }\n        truncation=\"constant\"\n        noIcon={ noAddressIcons }\n        fontWeight=\"500\"\n        isLoading={ isLoading }\n      />\n      { content }\n    </Flex>\n  );\n};\n\nexport default React.memo(TokenTransferSnippet);\n","import type { AddressParam } from 'types/api/addressParams';\n\nexport type TxCourseType = 'in' | 'out' | 'self' | 'unspecified';\n\nexport function getTxCourseType(from: string, to: string | undefined, current?: string): TxCourseType {\n  if (current === undefined) {\n    return 'unspecified';\n  }\n\n  if (to && from === to && from === current) {\n    return 'self';\n  }\n\n  if (from === current) {\n    return 'out';\n  }\n\n  if (to && to === current) {\n    return 'in';\n  }\n\n  return 'unspecified';\n}\n\nexport const unknownAddress: Omit<AddressParam, 'hash'> = {\n  is_contract: false,\n  is_verified: false,\n  implementations: null,\n  name: '',\n  private_tags: [],\n  public_tags: [],\n  watchlist_names: [],\n  ens_domain_name: null,\n};\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\n\nimport * as BlockEntity from './BlockEntity';\n\nconst rollupFeature = config.features.rollup;\n\nconst BatchEntityL2 = (props: BlockEntity.EntityProps) => {\n  if (!rollupFeature.isEnabled) {\n    return null;\n  }\n\n  const defaultHref = route({ pathname: '/batches/[number]', query: { number: props.number.toString() } });\n\n  return (\n    <BlockEntity.default\n      { ...props }\n      href={ props.href ?? defaultHref }\n      icon={{ name: 'txn_batches_slim' }}\n    />\n  );\n};\n\nexport default chakra(BatchEntityL2);\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\n\nimport * as TxEntity from './TxEntity';\n\nconst rollupFeature = config.features.rollup;\n\nconst TxEntityL1 = (props: TxEntity.EntityProps) => {\n  if (!rollupFeature.isEnabled) {\n    return null;\n  }\n\n  const defaultHref = rollupFeature.L1BaseUrl + route({\n    pathname: '/tx/[hash]',\n    query: { hash: props.hash },\n  });\n\n  return <TxEntity.default { ...props } href={ props.href ?? defaultHref } isExternal/>;\n};\n\nexport default chakra(TxEntityL1);\n","export default function getNextSortValue<SortField extends string, Sort extends string>(\n  sortSequence: Record<SortField, Array<Sort | undefined>>, field: SortField,\n) {\n  return (prevValue: Sort | undefined) => {\n    const sequence = sortSequence[field];\n    return getNextValueFromSequence(sequence, prevValue);\n  };\n}\n\nexport function getNextValueFromSequence<T>(sequence: Array<T>, prevValue: T) {\n  const curIndex = sequence.findIndex((val) => val === prevValue);\n  const nextIndex = curIndex + 1 > sequence.length - 1 ? 0 : curIndex + 1;\n  return sequence[nextIndex];\n}\n\n// asc desc undefined\ntype Order = 'asc' | 'desc' | undefined;\nconst sequence: Array<Order> = [ 'desc', 'asc', undefined ];\nexport const getNextOrderValue = (getNextValueFromSequence<Order>).bind(undefined, sequence);\n","import React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport type { StatusTagType } from './StatusTag';\nimport StatusTag from './StatusTag';\n\nexport interface Props {\n  status: Transaction['status'];\n  errorText?: string | null;\n  isLoading?: boolean;\n}\n\nconst TxStatus = ({ status, errorText, isLoading }: Props) => {\n  if (status === undefined) {\n    return null;\n  }\n\n  let text;\n  let type: StatusTagType;\n\n  switch (status) {\n    case 'ok':\n      text = 'Success';\n      type = 'ok';\n      break;\n    case 'error':\n      text = 'Failed';\n      type = 'error';\n      break;\n    case null:\n      text = 'Pending';\n      type = 'pending';\n      break;\n  }\n\n  return <StatusTag type={ type } text={ text } errorText={ errorText } isLoading={ isLoading }/>;\n};\n\nexport default TxStatus;\n","import { HStack, Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Step } from './types';\n\nimport IconSvg from 'ui/shared/IconSvg';\n\ntype Props = {\n  step: Step;\n  isLast: boolean;\n  isPassed: boolean;\n  isPending?: boolean;\n};\n\nconst VerificationStep = ({ step, isLast, isPassed, isPending }: Props) => {\n  let stepColor = 'text_secondary';\n  if (isPending) {\n    stepColor = 'yellow.500';\n  } else if (isPassed) {\n    stepColor = 'green.500';\n  }\n\n  return (\n    <HStack gap={ 2 } color={ stepColor }>\n      <IconSvg name={ isPassed ? 'verification-steps/finalized' : 'verification-steps/unfinalized' } boxSize={ 5 }/>\n      <Box color={ stepColor }>{ typeof step === 'string' ? step : step.content }</Box>\n      { !isLast && <IconSvg name=\"arrows/east\" boxSize={ 5 }/> }\n    </HStack>\n  );\n};\n\nexport default VerificationStep;\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Step } from './types';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\nimport VerificationStep from './VerificationStep';\n\nexport interface Props {\n  currentStep: string;\n  currentStepPending?: boolean;\n  steps: Array<Step>;\n  isLoading?: boolean;\n  rightSlot?: React.ReactNode;\n  className?: string;\n}\n\nconst VerificationSteps = ({ currentStep, currentStepPending, steps, isLoading, rightSlot, className }: Props) => {\n  const currentStepIndex = steps.findIndex((step) => {\n    const label = typeof step === 'string' ? step : step.label;\n    return label === currentStep;\n  });\n\n  return (\n    <Skeleton\n      className={ className }\n      isLoaded={ !isLoading }\n      display=\"flex\"\n      gap={ 2 }\n      alignItems=\"center\"\n      flexWrap=\"wrap\"\n    >\n      { steps.map((step, index) => (\n        <VerificationStep\n          key={ index }\n          step={ step }\n          isLast={ index === steps.length - 1 && !rightSlot }\n          isPassed={ index <= currentStepIndex }\n          isPending={ index === currentStepIndex && currentStepPending }\n        />\n      )) }\n      { rightSlot }\n    </Skeleton>\n  );\n};\n\nexport default chakra(VerificationSteps);\n","import { Flex } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { ZkSyncBatch } from 'types/api/zkSyncL2';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport DetailsTimestamp from 'ui/shared/DetailsTimestamp';\nimport TxEntityL1 from 'ui/shared/entities/tx/TxEntityL1';\n\ninterface Props {\n  isLoading: boolean;\n  data: Pick<\n    ZkSyncBatch,\n  'commit_transaction_hash' |\n  'commit_transaction_timestamp' |\n  'prove_transaction_hash' |\n  'prove_transaction_timestamp' |\n  'execute_transaction_hash' |\n  'execute_transaction_timestamp'\n  >;\n}\n\nconst ZkSyncL2TxnBatchHashesInfo = ({ isLoading, data }: Props) => {\n  return (\n    <>\n      <DetailsInfoItem.Label\n        hint=\"Hash of L1 tx on which the batch was committed\"\n        isLoading={ isLoading }\n      >\n        Commit tx hash\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value\n        flexDir=\"column\"\n        alignItems=\"flex-start\"\n      >\n        { data.commit_transaction_hash ? (\n          <>\n            <TxEntityL1\n              isLoading={ isLoading }\n              hash={ data.commit_transaction_hash }\n              maxW=\"100%\"\n              noCopy={ false }\n            />\n            { data.commit_transaction_timestamp && (\n              <Flex alignItems=\"center\" flexWrap=\"wrap\" rowGap={ 3 }>\n                <DetailsTimestamp timestamp={ data.commit_transaction_timestamp } isLoading={ isLoading }/>\n              </Flex>\n            ) }\n          </>\n        ) : <Skeleton isLoaded={ !isLoading }>Pending</Skeleton> }\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItem.Label\n        hint=\"Hash of L1 tx on which the batch was proven\"\n        isLoading={ isLoading }\n      >\n        Prove tx hash\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value\n        flexDir=\"column\"\n        alignItems=\"flex-start\"\n      >\n        { data.prove_transaction_hash ? (\n          <>\n            <TxEntityL1\n              isLoading={ isLoading }\n              hash={ data.prove_transaction_hash }\n              maxW=\"100%\"\n              noCopy={ false }\n            />\n            { data.prove_transaction_timestamp && (\n              <Flex alignItems=\"center\" flexWrap=\"wrap\" rowGap={ 3 }>\n                <DetailsTimestamp timestamp={ data.prove_transaction_timestamp } isLoading={ isLoading }/>\n              </Flex>\n            ) }\n          </>\n        ) : <Skeleton isLoaded={ !isLoading }>Pending</Skeleton> }\n      </DetailsInfoItem.Value>\n\n      <DetailsInfoItem.Label\n        hint=\"Hash of L1 tx on which the batch was executed and finalized\"\n        isLoading={ isLoading }\n      >\n        Execute tx hash\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.Value\n        flexDir=\"column\"\n        alignItems=\"flex-start\"\n      >\n        { data.execute_transaction_hash ? (\n          <>\n            <TxEntityL1\n              isLoading={ isLoading }\n              hash={ data.execute_transaction_hash }\n              maxW=\"100%\"\n              noCopy={ false }\n            />\n            { data.execute_transaction_timestamp && (\n              <Flex alignItems=\"center\" flexWrap=\"wrap\" rowGap={ 3 }>\n                <DetailsTimestamp timestamp={ data.execute_transaction_timestamp } isLoading={ isLoading }/>\n              </Flex>\n            ) }\n          </>\n        ) : <Skeleton isLoaded={ !isLoading }>Pending</Skeleton> }\n      </DetailsInfoItem.Value>\n    </>\n  );\n};\n\nexport default React.memo(ZkSyncL2TxnBatchHashesInfo);\n"],"names":["compareBns","value1","value2","value1Bn","BigNumber","value2Bn","isGreaterThan","isLessThan","guessDataType","data","bytes","hexToBytes","filteredBytes","removeNonSignificantZeroBytes","filetype","shouldRemoveBytes","result","index","length","element","filter","item","hetToDecimal","hex","parseInt","strippedHex","startsWith","slice","rollupFeature","ARBITRUM_L2_TX_BATCH_STATUSES","config","features","rollup","VERIFICATION_STEPS_MAP","isEnabled","parentChainName","verificationSteps","map","status","getVerificationStepStatus","commitment_transaction","commitTx","confirmation_transaction","confirmTx","BLOB_PROOF","TX_BLOB","blob_data","hash","BLOB_HASH","kzg_commitment","kzg_proof","transaction_hashes","block_consensus","transaction_hash","TX_HASH","ZKSYNC_L2_TX_BATCH_STATUSES","React","token","amount","NovesTokenTooltipContent","textColor","useColorModeValue","showTokenName","symbol","name","showTokenAddress","HEX_REGEXP","test","address","Box","color","display","flexDir","alignItems","gap","Text","as","fontWeight","ml","mt","CopyToClipboard","text","NovesActionSnippet","isLoaded","popoverBg","action","nft","toLowerCase","undefined","icon_url","type","validTokenAddress","Skeleton","borderRadius","Hide","above","cursor","flexWrap","label","TokenEntity","noCopy","noSymbol","noLink","w","Show","Popover","trigger","openDelay","closeDelay","arrowSize","arrowShadowColor","placement","flip","PopoverTrigger","maxW","IconSvg","height","width","_dark","jointSymbol","PopoverContent","bg","shadow","zIndex","padding","PopoverArrow","ListItemMobile","rowGap","TxAssetFlowsListItem","props","isPlaceholderData","fontSize","NovesFromTo","Tr","TxAssetFlowsTableItem","Td","px","py","borderColor","TxAssetFlows","queryData","isError","useApiQuery","pathParams","queryOptions","enabled","Boolean","placeholderData","NOVES_TRANSLATE","page","setPage","useState","ViewData","useMemo","generateFlowViewData","perspectiveAddress","txItems","classificationData","sent","received","paidGasIndex","findIndex","splice","to","flowViewData","actionFormatted","flowDirection","getFlowDirection","from","includes","split","rightActor","accountAddress","chunkedViewData","chunk","paginationProps","onNextPageClick","onPrevPageClick","resetPage","canGoBackwards","isLoading","hasNextPage","hasPages","isVisible","actionBar","ActionBar","pb","base","md","mr","AddressEntity","truncation","Pagination","lg","content","i","Table","TheadSticky","top","Th","Tbody","DataListDisplay","items","emptyText","authority","chain_id","chainId","TxAuthorizationsListItem","nonce","HStack","spacing","noIcon","Number","chain","id","TxAuthorizationsList","toString","TxAuthorizationsItem","verticalAlign","isNumeric","AddressHighlightProvider","TxAuthorizationsTable","Thead","TxAuthorizationsTableItem","txQuery","TxAuthorizations","socketStatus","TxSocketAlert","TxPendingAlert","below","ssr","authorization_list","TYPES","image","iconName","raw","BlobDataType","iconColor","guessedType","blobUtils","mime","Flex","columnGap","boxSize","TxBlobListItem","size","replace","ListItemMobileGrid","Container","Label","Value","BlobEntity","toLocaleString","TxBlobList","TxBlobsTableItem","TxInternalsTable","TxBlobs","pagination","useQueryWithPages","resourceName","options","generateListStub","next_page_params","isPending","TxBlobsTable","ACTION_BAR_HEIGHT_DESKTOP","TxBlobsList","showShadow","chakra","TestnetWarning","className","isTestnet","Alert","SCROLL_L2_BLOCK_STATUSES","MESSAGE_DESCRIPTIONS","Relayed","txInterpretationQuery","isTxDataLoading","TxDetailsActionsInterpretation","TX_INTERPRETATION","refetchOnMount","actions","summaries","DetailsActionsWrapper","TxInterpretation","summary","DetailsInfoItemDivider","protocol","amount0","toFormat","amount1","text0","text1","getActionText","actionType","token0","symbol0","address0","currency","token1","symbol1","address1","span","flexShrink","bgColor","p","div","whiteSpace","pl","flexDirection","ids","NftEntity","icon","TxDetailsActionsRaw","TxDetailsAction","TxDetailsActions","txInterpretation","TxDetailsBurntFees","UI","views","tx","hiddenFields","burnt_fees","value","transaction_burnt_fee","plus","blob_gas_used","multipliedBy","blob_gas_price","isEqualTo","ZERO","DetailsInfoItem","hint","currencyUnits","ether","CurrencyValue","exchangeRate","exchange_rate","txFee","gasUsed","TxDetailsFeePerGas","additionalFields","fee_per_gas","dividedBy","decimals","toFixed","fee_currency","gasPrice","TxDetailsGasPrice","gasToken","gas_price","WEI","onlySymbol","WEI_IN_GWEI","gwei","TxDetailsOther","position","queueIndex","variant","TextSeparator","TOKEN_TRANSFERS_TYPES","title","txHash","TxDetailsTokenTransfers","isOverflow","viewAllUrl","route","pathname","query","tab","transferGroups","group","overflow","TokenTransferSnippet","GridItem","LinkInternal","href","WITHDRAWAL_STATUS_STEPS","WITHDRAWAL_STATUS_ORDER_PROVEN","WITHDRAWAL_STATUS_ORDER_GAME","l1TxHash","hasClaimButton","steps","TxEntityL1","rightSlot","Button","L2WithdrawalUrl","target","VerificationSteps","currentStep","my","lineHeight","TxRevertReason","decoded","hexToUtf8","Grid","templateColumns","LogDecodedInputData","isExpanded","expand","useBoolean","is_contract","CUT_LENGTH","Link","textDecorationLine","textDecorationStyle","onClick","toggle","TxInfoScrollFees","scroll","l1_fee","l2_fee","l1_fee_commit_scalar","l1_fee_overhead","l1_base_fee","l1_fee_scalar","l1_blob_base_fee","l1_fee_blob_scalar","TxInfo","setIsExpanded","handleCutClick","flag","scroller","scrollTo","duration","smooth","executionSuccessIconColor","showAssociatedL1Tx","addressFromTags","private_tags","public_tags","watchlist_names","Tag","tag","display_name","toAddress","created_contract","addressToTags","executionSuccessBadge","Tooltip","executionFailedBadge","metasuites","data-status","data-ready","colSpan","mb","Spinner","HashStringShortenDynamic","TxStatus","errorText","method","colorScheme","isTruncated","arbitrum","contains_message","op_withdrawals","L1_status","withdrawal","TxDetailsWithdrawalStatus","l1_transaction_hash","zkevm_status","ZKEVM_L2_TX_STATUSES","currentStepPending","revert_reason","zksync","block_number","BlockEntity","number","confirmations","l2_block_status","zkevm_batch_number","batch","BatchEntityL2","batch_number","timestamp","DetailsTimestamp","confirmation_duration","getConfirmationString","durations","lower","upper","time","execution_node","allowed_peekers","TxAllowedPeekers","token_transfers","token_transfers_overflow","StatusTag","zkevm_sequence_hash","zkevm_verify_hash","tx_fee","TxFee","withUsd","poster_fee","network_fee","celo","gas_token","fee","gas_used","gas_limit","Utilization","toNumber","gas_used_for_l1","gas_used_for_l2","l1_gas_used","gas_fees","base_fee_per_gas","max_fee_per_gas","max_priority_fee_per_gas","getNetworkValidatorTitle","l1_gas_price","Element","message_related_info","associated_l1_transaction","message_status","Hint","max_fee_per_blob_gas","queue_index","RawInputData","raw_input","defaultDataType","zilliqa","is_scilla","decoded_input","ZkSyncL2TxnBatchHashesInfo","TxDetails","DataFetchAlert","TxDetailsDegraded","originalError","error","useQuery","queryKey","queryFn","publicClient","getTransaction","txReceipt","getTransactionReceipt","catch","block","getBlock","blockHash","latestBlock","BigInt","select","txConfirmations","response","effectiveGasPrice","unknownAddress","dayjs","unix","format","blockNumber","baseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","transactionIndex","typeHex","hexToDecimal","input","gas","contractAddress","priority_fee","has_error_in_internal_transactions","transaction_types","transaction_tag","GET_TRANSACTION","GET_TRANSACTION_RECEIPT","GET_TRANSACTION_CONFIRMATIONS","GET_BLOCK","retry","retryDelay","SECOND","hasData","setRefetchOnError","on","off","ServiceDegradationWarning","isCustomAppError","throwOnResourceLoadError","resource","TxDetailsWrapped","TxEntity","TX_INTERNALS_ITEMS","TxInternalsListItem","success","gasLimit","createdContract","typeTitle","find","AddressFromTo","toData","TxInternalsList","sort","onSortToggle","sortIconTransform","justifyContent","transform","TxInternalsTableItem","getNextSortValue","bind","SORT_SEQUENCE","sortFn","a","b","TxInternals","setSort","INTERNAL_TX","handleSortToggle","field","filteredData","TxRawTrace","isQueryEnabled","setIsQueryEnabled","rawTraces","setRawTraces","router","useRouter","getQueryParamString","TX_RAW_TRACE","handleRawTraceMessage","payload","enableQuery","channel","useSocketChannel","topic","isDisabled","onJoin","onSocketError","useSocketMessage","event","handler","dataToDisplay","JSON","stringify","RawDataSnippet","TX_STATE_CHANGES","STATE_CHANGE_MINER","ADDRESS_PARAMS","balance_after","balance_before","change","is_miner","direction","total","token_id","TOKEN_INFO_ERC_721","TxStateTokenIdList","tokenAddress","isCut","setIsCut","textDecoration","_hover","getStateElements","textTransform","ZERO_ADDRESS","changeDirection","isArray","beforeBn","afterBn","differenceBn","minus","changeColor","lte","changeSign","before","wordBreak","after","nbsp","abs","tokenLink","isGreaterThanOrEqualTo","tokenId","space","TxStateListItem","TxStateList","TxStateTableItem","minWidth","minW","TxState","items_count","state_changes","Accordion","allowMultiple","defaultIndex","TxStateTable","ADDRESS_REGEXP","CONTRACT_REGEXP","createAddressValues","translateData","description","addressMatches","match","contractMatches","descriptionAddresses","contractAddresses","addresses","extractAddresses","addressesSet","Set","add","rawTransactionData","fromAddress","approved","spender","deployedContractAddress","txTypeVersion","forEach","transaction","Array","summaryValues","createAddressSummaryValues","isContract","toUpperCase","createNovesSummaryObject","parsedDescription","removedFinalDot","endsWith","tokenData","getTokensData","tokens","tokensGroupByName","groupBy","tokensGroupBySymbol","tokensGroupById","mappedNames","mapValues","mappedSymbols","mappedIds","filters","nameList","Object","keys","symbolList","idList","byName","bySymbol","idsMatched","tokensMatchedByName","tokensMatchedBySymbol","removeIds","values","createTokensSummaryValues","push","addressSummaryValues","createSummaryTemplate","replaceAll","matchedStrings","newDescription","summary_template","summary_template_variables","createTemplate","variable","nextValue","feature","novesInterpretationQuery","TxSubHeading","hasTag","hasInterpretationFeature","isNovesInterpretation","provider","appActionData","useAppActionData","hasNovesInterpretation","hasInternalInterpretation","hasViewAllInterpretationsLink","addressDataMap","novesSummary","TX_ACTIONS_BLOCK_ID","sender_hash","receiver_hash","fontFamily","flexGrow","AccountActionsMenu","AppActionButton","source","NetworkExplorers","pathParam","TxUserOps","userOpsQuery","USER_OPS_ITEM","UserOpsContent","showTx","appProps","useAppContext","useTxQuery","errorUpdateCount","showDegradedView","tabs","detailsComponent","suave","wrapped","component","TxTokenTransfer","userOps","dataAvailability","blob_versioned_hashes","TxLogs","tabIndex","useTabIndexFromQuery","tags","EntityTags","slug","tagType","backLink","hasGoBackLink","referrer","url","titleSecondRow","TabsSkeleton","RoutedTabs","PageTitle","contentAfter","secondRow","valueStr","usd","getCurrencyValue","accuracyUsd","NftTokenTransferSnippet","num","tokenIdContent","noAddressIcons","h","TokenTransferSnippetFiat","TokenTransferSnippetNft","is_verified","implementations","ens_domain_name","defaultHref","L1BaseUrl","isExternal","sortSequence","prevValue","getNextValueFromSequence","sequence","curIndex","val","nextIndex","getNextOrderValue","step","isLast","isPassed","VerificationStep","stepColor","currentStepIndex","commit_transaction_hash","commit_transaction_timestamp","prove_transaction_hash","prove_transaction_timestamp","execute_transaction_hash","execute_transaction_timestamp"],"sourceRoot":"","ignoreList":[]}
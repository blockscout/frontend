{"version":3,"file":"static/chunks/4246-b75452c93ae2d37e.js","mappings":"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","sources":["webpack://_N_E/./lib/makePrettyLink.ts","webpack://_N_E/./ui/shared/EntityTags/utils.ts","webpack://_N_E/./ui/shared/EntityTags/EntityTagLink.tsx","webpack://_N_E/./ui/shared/EntityTags/EntityTagPopover.tsx","webpack://_N_E/./ui/shared/EntityTags/EntityTag.tsx","webpack://_N_E/./ui/shared/EntityTags/EntityTags.tsx","webpack://_N_E/./ui/shared/NetworkExplorers.tsx","webpack://_N_E/./ui/shared/PopoverTriggerTooltip.tsx","webpack://_N_E/./ui/shared/VerifyWith.tsx"],"sourcesContent":["export default function makePrettyLink(url: string | undefined): { url: string; domain: string } | undefined {\n  try {\n    const urlObj = new URL(url ?? '');\n    return {\n      url: urlObj.href,\n      domain: urlObj.hostname,\n    };\n  } catch (error) {}\n}\n","import type { EntityTag } from './types';\n\nimport { route } from 'nextjs-routes';\n\nexport function getTagLinkParams(data: EntityTag): { type: 'external' | 'internal'; href: string } | undefined {\n  if (data.meta?.warpcastHandle) {\n    return {\n      type: 'external',\n      href: `https://warpcast.com/${ data.meta.warpcastHandle }`,\n    };\n  }\n\n  if (data.meta?.tagUrl) {\n    return {\n      type: 'external',\n      href: data.meta.tagUrl,\n    };\n  }\n\n  if (data.tagType === 'generic' || data.tagType === 'protocol') {\n    return {\n      type: 'internal',\n      href: route({ pathname: '/accounts/label/[slug]', query: { slug: data.slug, tagType: data.tagType, tagName: data.name } }),\n    };\n  }\n}\n","import React from 'react';\n\nimport type { EntityTag } from './types';\n\nimport * as mixpanel from 'lib/mixpanel/index';\nimport LinkExternal from 'ui/shared/links/LinkExternal';\nimport LinkInternal from 'ui/shared/links/LinkInternal';\n\nimport { getTagLinkParams } from './utils';\n\ninterface Props {\n  data: EntityTag;\n  children: React.ReactNode;\n  noLink?: boolean;\n}\n\nconst EntityTagLink = ({ data, children, noLink }: Props) => {\n\n  const linkParams = !noLink ? getTagLinkParams(data) : undefined;\n\n  const handleLinkClick = React.useCallback(() => {\n    if (!linkParams?.href) {\n      return;\n    }\n\n    mixpanel.logEvent(mixpanel.EventTypes.PAGE_WIDGET, {\n      Type: 'Address tag',\n      Info: data.slug,\n      URL: linkParams.href,\n    });\n  }, [ linkParams?.href, data.slug ]);\n\n  const linkProps = {\n    color: 'inherit',\n    display: 'inline-flex',\n    overflow: 'hidden',\n    _hover: { textDecor: 'none', color: 'inherit' },\n    onClick: handleLinkClick,\n  };\n\n  if (linkParams?.type === 'internal') {\n    return (\n      <LinkInternal\n        { ...linkProps }\n        href={ linkParams.href }\n      >\n        { children }\n      </LinkInternal>\n    );\n  }\n\n  if (linkParams?.type === 'external') {\n    return (\n      <LinkExternal\n        { ...linkProps }\n        href={ linkParams.href }\n        iconColor={ data.meta?.textColor }\n      >\n        { children }\n      </LinkExternal>\n    );\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <>{ children }</>;\n};\n\nexport default React.memo(EntityTagLink);\n","import { chakra, Image, Flex, PopoverArrow, PopoverBody, PopoverContent, PopoverTrigger, useColorModeValue, DarkMode } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { EntityTag } from './types';\n\nimport makePrettyLink from 'lib/makePrettyLink';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport Popover from 'ui/shared/chakra/Popover';\nimport LinkExternal from 'ui/shared/links/LinkExternal';\n\ninterface Props {\n  data: EntityTag;\n  children: React.ReactNode;\n}\n\nconst EntityTagPopover = ({ data, children }: Props) => {\n  const bgColor = useColorModeValue('gray.700', 'gray.900');\n  const link = makePrettyLink(data.meta?.tooltipUrl);\n  const hasPopover = Boolean(data.meta?.tooltipIcon || data.meta?.tooltipTitle || data.meta?.tooltipDescription || data.meta?.tooltipUrl);\n\n  const handleLinkClick = React.useCallback(() => {\n    if (!data.meta?.tooltipUrl) {\n      return;\n    }\n\n    mixpanel.logEvent(mixpanel.EventTypes.PAGE_WIDGET, {\n      Type: 'Address tag',\n      Info: data.slug,\n      URL: data.meta.tooltipUrl,\n    });\n  }, [ data.meta?.tooltipUrl, data.slug ]);\n\n  if (!hasPopover) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{ children }</>;\n  }\n\n  return (\n    <Popover trigger=\"hover\" isLazy gutter={ 8 }>\n      <PopoverTrigger>\n        { children }\n      </PopoverTrigger>\n      <PopoverContent bgColor={ bgColor } borderRadius=\"sm\" maxW=\"280px\" w=\"fit-content\">\n        <PopoverArrow bgColor={ bgColor }/>\n        <DarkMode>\n          <PopoverBody color=\"white\" p={ 2 } fontSize=\"sm\" display=\"flex\" flexDir=\"column\" rowGap={ 2 }>\n            { (data.meta?.tooltipIcon || data.meta?.tooltipTitle) && (\n              <Flex columnGap={ 3 } alignItems=\"center\">\n                { data.meta?.tooltipIcon && <Image src={ data.meta.tooltipIcon } boxSize=\"30px\" alt={ `${ data.name } tag logo` }/> }\n                { data.meta?.tooltipTitle && <chakra.span fontWeight=\"600\">{ data.meta.tooltipTitle }</chakra.span> }\n              </Flex>\n            ) }\n            { data.meta?.tooltipDescription && <chakra.span>{ data.meta.tooltipDescription }</chakra.span> }\n            { link && <LinkExternal href={ link.url } onClick={ handleLinkClick }>{ link.domain }</LinkExternal> }\n          </PopoverBody>\n        </DarkMode>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default React.memo(EntityTagPopover);\n","import type { ResponsiveValue } from '@chakra-ui/react';\nimport { chakra, Image, Tag } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { EntityTag as TEntityTag } from './types';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\nimport TruncatedValue from 'ui/shared/TruncatedValue';\n\nimport EntityTagLink from './EntityTagLink';\nimport EntityTagPopover from './EntityTagPopover';\nimport { getTagLinkParams } from './utils';\n\ninterface Props {\n  data: TEntityTag;\n  isLoading?: boolean;\n  maxW?: ResponsiveValue<string>;\n  noLink?: boolean;\n}\n\nconst EntityTag = ({ data, isLoading, maxW, noLink }: Props) => {\n\n  if (isLoading) {\n    return <Skeleton borderRadius=\"sm\" w=\"100px\" h=\"24px\"/>;\n  }\n\n  const hasLink = !noLink && Boolean(getTagLinkParams(data));\n  const iconColor = data.meta?.textColor ?? 'gray.400';\n\n  const name = (() => {\n    if (data.meta?.warpcastHandle) {\n      return `@${ data.meta.warpcastHandle }`;\n    }\n\n    return data.name;\n  })();\n\n  const icon = (() => {\n    if (data.meta?.tagIcon) {\n      return <Image boxSize={ 3 } mr={ 1 } flexShrink={ 0 } src={ data.meta.tagIcon } alt={ `${ data.name } icon` }/>;\n    }\n\n    if (data.tagType === 'name') {\n      return <IconSvg name=\"publictags_slim\" boxSize={ 3 } mr={ 1 } flexShrink={ 0 } color={ iconColor }/>;\n    }\n\n    if (data.tagType === 'protocol' || data.tagType === 'generic') {\n      return <chakra.span color={ iconColor } whiteSpace=\"pre\"># </chakra.span>;\n    }\n\n    return null;\n  })();\n\n  return (\n    <EntityTagPopover data={ data }>\n      <Tag\n        display=\"flex\"\n        alignItems=\"center\"\n        minW={ 0 }\n        w=\"fit-content\"\n        maxW={ maxW }\n        bg={ data.meta?.bgColor }\n        color={ data.meta?.textColor }\n        colorScheme={ hasLink ? 'gray-blue' : 'gray' }\n        _hover={ hasLink ? { opacity: 0.76 } : undefined }\n      >\n        <EntityTagLink data={ data } noLink={ noLink }>\n          { icon }\n          <TruncatedValue value={ name } tooltipPlacement=\"top\"/>\n        </EntityTagLink>\n      </Tag>\n    </EntityTagPopover>\n  );\n};\n\nexport default React.memo(EntityTag);\n","import { Box, Flex, PopoverBody, PopoverContent, PopoverTrigger, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { EntityTag as TEntityTag } from './types';\n\nimport config from 'configs/app';\nimport useIsMobile from 'lib/hooks/useIsMobile';\nimport Popover from 'ui/shared/chakra/Popover';\nimport Tag from 'ui/shared/chakra/Tag';\n\nimport EntityTag from './EntityTag';\n\ninterface Props {\n  className?: string;\n  tags: Array<TEntityTag>;\n  isLoading?: boolean;\n}\n\nconst EntityTags = ({ tags, className, isLoading }: Props) => {\n  const isMobile = useIsMobile();\n  const visibleNum = isMobile ? 2 : 3;\n\n  const metaSuitesPlaceholder = config.features.metasuites.isEnabled ?\n    <Box display=\"none\" id=\"meta-suites__address-tag\" data-ready={ !isLoading }/> :\n    null;\n\n  if (tags.length === 0) {\n    return metaSuitesPlaceholder;\n  }\n\n  const content = (() => {\n    const tagMaxW = {\n      base: tags.length === 1 ? '100%' : '60%',\n      lg: '300px',\n    };\n\n    if (tags.length > visibleNum) {\n      return (\n        <>\n          { tags.slice(0, visibleNum).map((tag) => <EntityTag key={ tag.slug } data={ tag } isLoading={ isLoading } maxW={ tagMaxW }/>) }\n          { metaSuitesPlaceholder }\n          <Popover trigger=\"click\" placement=\"bottom-start\" isLazy>\n            <PopoverTrigger>\n              <Tag isLoading={ isLoading } cursor=\"pointer\" as=\"button\" _hover={{ color: 'link_hovered' }}>\n                +{ tags.length - visibleNum }\n              </Tag>\n            </PopoverTrigger>\n            <PopoverContent maxW=\"300px\" w=\"auto\">\n              <PopoverBody >\n                <Flex columnGap={ 2 } rowGap={ 2 } flexWrap=\"wrap\">\n                  { tags.slice(visibleNum).map((tag) => <EntityTag key={ tag.slug } data={ tag }/>) }\n                </Flex>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        </>\n      );\n    }\n\n    return (\n      <>\n        { tags.map((tag) => <EntityTag key={ tag.slug } data={ tag } isLoading={ isLoading } maxW={ tagMaxW }/>) }\n        { metaSuitesPlaceholder }\n      </>\n    );\n  })();\n\n  return (\n    <Flex className={ className } columnGap={ 2 } rowGap={ 2 } flexWrap=\"nowrap\" alignItems=\"center\" flexGrow={ 1 } maxW=\"100%\">\n      { content }\n    </Flex>\n  );\n};\n\nexport default React.memo(chakra(EntityTags));\n","import {\n  Image,\n  useColorModeValue,\n  chakra,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { NetworkExplorer as TNetworkExplorer } from 'types/networks';\n\nimport config from 'configs/app';\nimport stripTrailingSlash from 'lib/stripTrailingSlash';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LinkExternal from 'ui/shared/links/LinkExternal';\nimport VerifyWith from 'ui/shared/VerifyWith';\n\ninterface Props {\n  className?: string;\n  type: keyof TNetworkExplorer['paths'];\n  pathParam: string;\n}\n\nconst NetworkExplorers = ({ className, type, pathParam }: Props) => {\n  const defaultIconColor = useColorModeValue('gray.400', 'gray.500');\n\n  const explorersLinks = React.useMemo(() => {\n    return config.UI.explorers.items\n      .filter((explorer) => typeof explorer.paths[type] === 'string')\n      .map((explorer) => {\n        const url = new URL(stripTrailingSlash(explorer.paths[type] || '') + '/' + pathParam, explorer.baseUrl);\n        return (\n          <LinkExternal h=\"34px\" key={ explorer.baseUrl } href={ url.toString() } alignItems=\"center\" display=\"inline-flex\" minW=\"120px\">\n            { explorer.logo ?\n              <Image boxSize={ 5 } mr={ 2 } src={ explorer.logo } alt={ `${ explorer.title } icon` }/> :\n              <IconSvg name=\"explorer\" boxSize={ 5 } color={ defaultIconColor } mr={ 2 }/>\n            }\n            { explorer.title }\n          </LinkExternal>\n        );\n      });\n  }, [ pathParam, type, defaultIconColor ]);\n\n  if (explorersLinks.length === 0) {\n    return null;\n  }\n\n  return (\n    <VerifyWith\n      className={ className }\n      links={ explorersLinks }\n      label=\"Verify with other explorers\"\n      longText={ `${ explorersLinks.length } Explorer${ explorersLinks.length > 1 ? 's' : '' }` }\n      shortText={ explorersLinks.length.toString() }\n    />\n  );\n};\n\nexport default React.memo(chakra(NetworkExplorers));\n","import { Tooltip, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport useIsMobile from 'lib/hooks/useIsMobile';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\ntype Props = {\n  label: string;\n  isLoading?: boolean;\n  className?: string;\n  children: React.ReactNode;\n};\n\nconst PopoverTriggerTooltip = ({ label, isLoading, className, children }: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n  const isMobile = useIsMobile();\n  return (\n    // tooltip need to be wrapped in div for proper popover positioning\n    <Skeleton isLoaded={ !isLoading } borderRadius=\"base\" ref={ ref } className={ className }>\n      <Tooltip\n        label={ label }\n        isDisabled={ isMobile }\n        // need a delay to avoid flickering when closing the popover\n        openDelay={ 100 }\n      >\n        { children }\n      </Tooltip>\n    </Skeleton>\n  );\n};\n\nexport default chakra(React.forwardRef(PopoverTriggerTooltip));\n","import {\n  Button,\n  PopoverTrigger,\n  PopoverBody,\n  PopoverContent,\n  Show,\n  Hide,\n  chakra,\n  useDisclosure,\n  Grid,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport Popover from 'ui/shared/chakra/Popover';\nimport IconSvg from 'ui/shared/IconSvg';\nimport PopoverTriggerTooltip from 'ui/shared/PopoverTriggerTooltip';\n\ninterface Props {\n  className?: string;\n  links: Array<React.ReactNode>;\n  label: string;\n  longText: string;\n  shortText?: string;\n}\n\nconst VerifyWith = ({ className, links, label, longText, shortText }: Props) => {\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  return (\n    <Popover isOpen={ isOpen } onClose={ onClose } placement=\"bottom-start\" isLazy>\n      <PopoverTrigger>\n        <PopoverTriggerTooltip label={ label } className={ className }>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            colorScheme=\"gray\"\n            onClick={ onToggle }\n            isActive={ isOpen }\n            aria-label={ label }\n            fontWeight={ 500 }\n            px={ shortText ? 2 : 1 }\n            h=\"32px\"\n            flexShrink={ 0 }\n          >\n            <IconSvg name=\"explorer\" boxSize={ 5 }/>\n            <Show above=\"xl\">\n              <chakra.span ml={ 1 }>{ longText }</chakra.span>\n            </Show>\n            { shortText && (\n              <Hide above=\"xl\">\n                <chakra.span ml={ 1 }>{ shortText }</chakra.span>\n              </Hide>\n            ) }\n          </Button>\n        </PopoverTriggerTooltip>\n      </PopoverTrigger>\n      <PopoverContent w=\"auto\">\n        <PopoverBody >\n          <chakra.span color=\"text_secondary\" fontSize=\"xs\">{ label }</chakra.span>\n          <Grid\n            alignItems=\"center\"\n            templateColumns={ links.length > 1 ? 'auto auto' : '1fr' }\n            columnGap={ 4 }\n            rowGap={ 2 }\n            mt={ 3 }\n          >\n            { links }\n          </Grid>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default chakra(VerifyWith);\n"],"names":["makePrettyLink","url","urlObj","URL","href","domain","hostname","error","getTagLinkParams","data","meta","warpcastHandle","type","tagUrl","tagType","route","pathname","query","slug","tagName","name","React","children","noLink","linkParams","undefined","linkProps","color","display","overflow","_hover","textDecor","onClick","handleLinkClick","mixpanel","PAGE_WIDGET","Type","Info","LinkInternal","LinkExternal","iconColor","textColor","EntityTagPopover","bgColor","useColorModeValue","link","tooltipUrl","hasPopover","Boolean","tooltipIcon","tooltipTitle","tooltipDescription","Popover","trigger","isLazy","gutter","PopoverTrigger","PopoverContent","borderRadius","maxW","w","PopoverArrow","DarkMode","PopoverBody","p","fontSize","flexDir","rowGap","Flex","columnGap","alignItems","Image","src","boxSize","alt","chakra","span","fontWeight","isLoading","Skeleton","h","hasLink","icon","tagIcon","mr","flexShrink","IconSvg","whiteSpace","Tag","minW","bg","colorScheme","opacity","EntityTagLink","TruncatedValue","value","tooltipPlacement","tags","EntityTags","className","visibleNum","useIsMobile","metaSuitesPlaceholder","config","features","metasuites","isEnabled","Box","id","data-ready","length","content","tagMaxW","base","lg","slice","map","EntityTag","tag","placement","cursor","as","flexWrap","flexGrow","pathParam","defaultIconColor","explorersLinks","UI","explorers","items","filter","explorer","paths","stripTrailingSlash","baseUrl","toString","logo","title","VerifyWith","links","label","longText","shortText","ref","PopoverTriggerTooltip","isMobile","isLoaded","Tooltip","isDisabled","openDelay","isOpen","onToggle","onClose","useDisclosure","Button","size","variant","isActive","aria-label","px","Show","above","ml","Hide","Grid","templateColumns","mt"],"sourceRoot":"","ignoreList":[]}
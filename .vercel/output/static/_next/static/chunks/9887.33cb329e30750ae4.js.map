{"version":3,"file":"static/chunks/9887.33cb329e30750ae4.js","mappings":"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","sources":["webpack://_N_E/./ui/validatorsBlackfort/utils.ts","webpack://_N_E/./ui/validatorsBlackfort/ValidatorsCounters.tsx","webpack://_N_E/./ui/validatorsBlackfort/ValidatorsListItem.tsx","webpack://_N_E/./ui/validatorsBlackfort/ValidatorsList.tsx","webpack://_N_E/./ui/validatorsBlackfort/ValidatorsTableItem.tsx","webpack://_N_E/./ui/validatorsBlackfort/ValidatorsTable.tsx","webpack://_N_E/./ui/pages/ValidatorsBlackfort.tsx"],"sourcesContent":["import type {\n  ValidatorsBlackfortSortingValue,\n  ValidatorsBlackfortSortingField,\n} from 'types/api/validators';\nimport type { SelectOption } from 'ui/shared/select/types';\n\nexport const VALIDATORS_BLACKFORT_SORT_OPTIONS: Array<SelectOption<ValidatorsBlackfortSortingValue>> = [\n  { label: 'Default', value: undefined },\n  { label: 'Address descending', value: 'address_hash-desc' },\n  { label: 'Address ascending', value: 'address_hash-asc' },\n];\n\nexport const VALIDATORS_BLACKFORT_SORT_SEQUENCE: Record<ValidatorsBlackfortSortingField, Array<ValidatorsBlackfortSortingValue | undefined>> = {\n  address_hash: [ 'address_hash-desc', 'address_hash-asc', undefined ],\n};\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { VALIDATORS_BLACKFORT_COUNTERS } from 'stubs/validators';\nimport StatsWidget from 'ui/shared/stats/StatsWidget';\n\nconst ValidatorsCounters = () => {\n  const countersQuery = useApiQuery('validators_blackfort_counters', {\n    queryOptions: {\n      enabled: config.features.validators.isEnabled,\n      placeholderData: VALIDATORS_BLACKFORT_COUNTERS,\n    },\n  });\n\n  if (!countersQuery.data) {\n    return null;\n  }\n\n  return (\n    <Box columnGap={ 3 } rowGap={ 3 } mb={ 6 } display=\"grid\" gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}>\n      <StatsWidget\n        label=\"Total validators\"\n        value={ Number(countersQuery.data.validators_counter).toLocaleString() }\n        diff={ Number(countersQuery.data.new_validators_counter_24h).toLocaleString() }\n        isLoading={ countersQuery.isPlaceholderData }\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(ValidatorsCounters);\n","import { Flex } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { ValidatorBlackfort } from 'types/api/validators';\n\nimport config from 'configs/app';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\nimport TruncatedValue from 'ui/shared/TruncatedValue';\n\ninterface Props {\n  data: ValidatorBlackfort;\n  isLoading?: boolean;\n}\n\nconst ValidatorsListItem = ({ data, isLoading }: Props) => {\n\n  return (\n    <ListItemMobileGrid.Container gridTemplateColumns=\"130px auto\">\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Address</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <AddressEntity\n          isLoading={ isLoading }\n          address={ data.address }\n          truncation=\"constant\"\n        />\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Name</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Flex><TruncatedValue value={ data.name } isLoading={ isLoading }/></Flex>\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Commission</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { `${ data.commission / 100 }%` }\n        </Skeleton>\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Self bonded</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { `${ BigNumber(data.self_bonded_amount).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() } ${ currencyUnits.ether }` }\n        </Skeleton>\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Delegated amount</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { `${ BigNumber(data.delegated_amount).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() } ${ currencyUnits.ether }` }\n        </Skeleton>\n      </ListItemMobileGrid.Value>\n\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default React.memo(ValidatorsListItem);\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { ValidatorBlackfort } from 'types/api/validators';\n\nimport ValidatorsListItem from './ValidatorsListItem';\n\nconst ValidatorsList = ({ data, isLoading }: { data: Array<ValidatorBlackfort>; isLoading: boolean }) => {\n  return (\n    <Box>\n      { data.map((item, index) => (\n        <ValidatorsListItem\n          key={ item.address.hash + (isLoading ? index : '') }\n          data={ item }\n          isLoading={ isLoading }\n        />\n      )) }\n    </Box>\n  );\n};\n\nexport default React.memo(ValidatorsList);\n","import { Tr, Td, Flex } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { ValidatorBlackfort } from 'types/api/validators';\n\nimport config from 'configs/app';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport TruncatedValue from 'ui/shared/TruncatedValue';\n\ninterface Props {\n  data: ValidatorBlackfort;\n  isLoading?: boolean;\n}\n\nconst ValidatorsTableItem = ({ data, isLoading }: Props) => {\n  return (\n    <Tr>\n      <Td verticalAlign=\"middle\">\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n          truncation=\"constant\"\n        />\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <Flex>\n          <TruncatedValue value={ data.name } isLoading={ isLoading }/>\n        </Flex>\n      </Td>\n      <Td verticalAlign=\"middle\" isNumeric>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { `${ data.commission / 100 }%` }\n        </Skeleton>\n      </Td>\n      <Td verticalAlign=\"middle\" isNumeric>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(data.self_bonded_amount).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </Td>\n      <Td verticalAlign=\"middle\" isNumeric>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(data.delegated_amount).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(ValidatorsTableItem);\n","import { Table, Tbody, Tr, Th, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type {\n  ValidatorBlackfort,\n  ValidatorsBlackfortSorting,\n  ValidatorsBlackfortSortingField,\n  ValidatorsBlackfortSortingValue,\n} from 'types/api/validators';\n\nimport { currencyUnits } from 'lib/units';\nimport IconSvg from 'ui/shared/IconSvg';\nimport getNextSortValue from 'ui/shared/sort/getNextSortValue';\nimport { default as Thead } from 'ui/shared/TheadSticky';\n\nimport { VALIDATORS_BLACKFORT_SORT_SEQUENCE } from './utils';\nimport ValidatorsTableItem from './ValidatorsTableItem';\n\ninterface Props {\n  data: Array<ValidatorBlackfort>;\n  sort: ValidatorsBlackfortSortingValue | undefined;\n  setSorting: (val: ValidatorsBlackfortSortingValue | undefined) => void;\n  isLoading?: boolean;\n  top: number;\n}\n\nconst ValidatorsTable = ({ data, sort, setSorting, isLoading, top }: Props) => {\n  const sortIconTransform = sort?.includes('asc' as ValidatorsBlackfortSorting['order']) ? 'rotate(-90deg)' : 'rotate(90deg)';\n\n  const onSortToggle = React.useCallback((field: ValidatorsBlackfortSortingField) => () => {\n    const value = getNextSortValue<ValidatorsBlackfortSortingField, ValidatorsBlackfortSortingValue>(VALIDATORS_BLACKFORT_SORT_SEQUENCE, field)(sort);\n    setSorting(value);\n  }, [ sort, setSorting ]);\n\n  return (\n    <Table>\n      <Thead top={ top }>\n        <Tr>\n          <Th>\n            <Link\n              display=\"flex\"\n              alignItems=\"center\"\n              onClick={ isLoading ? undefined : onSortToggle('address_hash') }\n              columnGap={ 1 }\n            >\n              { sort?.includes('address') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n              Validator’s address\n            </Link>\n          </Th>\n          <Th>Name</Th>\n          <Th isNumeric>Commission</Th>\n          <Th isNumeric>{ `Self bonded ${ currencyUnits.ether }` }</Th>\n          <Th isNumeric>{ `Delegated amount ${ currencyUnits.ether }` }</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        { data.map((item, index) => (\n          <ValidatorsTableItem\n            key={ item.address.hash + (isLoading ? index : '') }\n            data={ item }\n            isLoading={ isLoading }/>\n        )) }\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default React.memo(ValidatorsTable);\n","import { Box, Hide, HStack, Show } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type {\n  ValidatorsBlackfortSorting,\n  ValidatorsBlackfortSortingField,\n  ValidatorsBlackfortSortingValue,\n} from 'types/api/validators';\n\nimport config from 'configs/app';\nimport { generateListStub } from 'stubs/utils';\nimport { VALIDATOR_BLACKFORT } from 'stubs/validators';\nimport ActionBar, { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport PageTitle from 'ui/shared/Page/PageTitle';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport getSortParamsFromValue from 'ui/shared/sort/getSortParamsFromValue';\nimport getSortValueFromQuery from 'ui/shared/sort/getSortValueFromQuery';\nimport Sort from 'ui/shared/sort/Sort';\nimport { VALIDATORS_BLACKFORT_SORT_OPTIONS } from 'ui/validatorsBlackfort/utils';\nimport ValidatorsCounters from 'ui/validatorsBlackfort/ValidatorsCounters';\nimport ValidatorsList from 'ui/validatorsBlackfort/ValidatorsList';\nimport ValidatorsTable from 'ui/validatorsBlackfort/ValidatorsTable';\n\nconst ValidatorsBlackfort = () => {\n  const router = useRouter();\n  const [ sort, setSort ] =\n    React.useState<ValidatorsBlackfortSortingValue | undefined>(\n      getSortValueFromQuery<ValidatorsBlackfortSortingValue>(router.query, VALIDATORS_BLACKFORT_SORT_OPTIONS),\n    );\n\n  const { isError, isPlaceholderData, data, pagination, onSortingChange } = useQueryWithPages({\n    resourceName: 'validators_blackfort',\n    sorting: getSortParamsFromValue<ValidatorsBlackfortSortingValue, ValidatorsBlackfortSortingField, ValidatorsBlackfortSorting['order']>(sort),\n    options: {\n      enabled: config.features.validators.isEnabled,\n      placeholderData: generateListStub<'validators_blackfort'>(\n        VALIDATOR_BLACKFORT,\n        50,\n        { next_page_params: null },\n      ),\n    },\n  });\n\n  const handleSortChange = React.useCallback((value?: ValidatorsBlackfortSortingValue) => {\n    setSort(value);\n    onSortingChange(getSortParamsFromValue(value));\n  }, [ onSortingChange ]);\n\n  const sortButton = (\n    <Sort\n      name=\"validators_sorting\"\n      defaultValue={ sort }\n      options={ VALIDATORS_BLACKFORT_SORT_OPTIONS }\n      onChange={ handleSortChange }\n    />\n  );\n\n  const actionBar = (\n    <>\n      <HStack spacing={ 3 } mb={ 6 } display={{ base: 'flex', lg: 'none' }}>\n        { sortButton }\n      </HStack>\n      { pagination.isVisible && (\n        <ActionBar mt={ -6 }>\n          <Pagination ml=\"auto\" { ...pagination }/>\n        </ActionBar>\n      ) }\n    </>\n  );\n\n  const content = data?.items ? (\n    <>\n      <Show below=\"lg\" ssr={ false }>\n        <ValidatorsList data={ data.items } isLoading={ isPlaceholderData }/>\n      </Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <ValidatorsTable\n          data={ data.items }\n          sort={ sort }\n          setSorting={ handleSortChange }\n          isLoading={ isPlaceholderData }\n          top={ pagination.isVisible ? ACTION_BAR_HEIGHT_DESKTOP : 0 }\n        />\n      </Hide>\n    </>\n  ) : null;\n\n  return (\n    <Box>\n      <PageTitle title=\"Validators\" withTextAd/>\n      <ValidatorsCounters/>\n      <DataListDisplay\n        isError={ isError }\n        items={ data?.items }\n        emptyText=\"There are no validators.\"\n        content={ content }\n        actionBar={ actionBar }\n      />\n    </Box>\n  );\n};\n\nexport default ValidatorsBlackfort;\n"],"names":["VALIDATORS_BLACKFORT_SORT_OPTIONS","label","value","undefined","address_hash","React","countersQuery","useApiQuery","queryOptions","enabled","config","features","validators","isEnabled","placeholderData","VALIDATORS_BLACKFORT_COUNTERS","data","Box","columnGap","rowGap","mb","display","gridTemplateColumns","base","lg","StatsWidget","Number","validators_counter","toLocaleString","diff","new_validators_counter_24h","isLoading","isPlaceholderData","ValidatorsListItem","ListItemMobileGrid","Container","Label","Value","AddressEntity","address","truncation","Flex","TruncatedValue","name","Skeleton","isLoaded","commission","currencyUnits","BigNumber","self_bonded_amount","div","chain","currency","decimals","toFormat","ether","delegated_amount","ValidatorsList","map","item","index","hash","ValidatorsTableItem","Tr","Td","verticalAlign","isNumeric","ValidatorsTable","sort","setSorting","top","sortIconTransform","includes","onSortToggle","getNextSortValue","field","Table","Thead","Th","Link","alignItems","onClick","IconSvg","boxSize","transform","Tbody","router","useRouter","ValidatorsBlackfort","setSort","getSortValueFromQuery","query","isError","pagination","onSortingChange","useQueryWithPages","resourceName","sorting","getSortParamsFromValue","options","generateListStub","VALIDATOR_BLACKFORT","next_page_params","handleSortChange","sortButton","Sort","defaultValue","onChange","actionBar","HStack","spacing","isVisible","ActionBar","mt","Pagination","ml","content","items","Show","below","ssr","Hide","ACTION_BAR_HEIGHT_DESKTOP","PageTitle","title","withTextAd","ValidatorsCounters","DataListDisplay"],"sourceRoot":"","ignoreList":[]}
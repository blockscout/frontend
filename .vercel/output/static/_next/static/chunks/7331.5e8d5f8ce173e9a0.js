"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7331],{87331:(e,t,n)=>{let i,r,s,o;n.d(t,{S:()=>e5,T:()=>e4,a:()=>e6});var a=Object.defineProperty,l=(e,t)=>a(e,"name",{value:t,configurable:!0});function u(e){return c(e,[])}function c(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return p(e,t);default:return String(e)}}function p(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";let n=[...t,e];if(d(e)){let t=e.toJSON();if(t!==e)return"string"==typeof t?t:c(t,n)}else if(Array.isArray(e))return h(e,n);return f(e,n)}function d(e){return"function"==typeof e.toJSON}function f(e,t){let n=Object.entries(e);return 0===n.length?"{}":t.length>2?"["+y(e)+"]":"{ "+n.map(([e,n])=>e+": "+c(n,t)).join(", ")+" }"}function h(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";let n=Math.min(10,e.length),i=e.length-n,r=[];for(let i=0;i<n;++i)r.push(c(e[i],t));return 1===i?r.push("... 1 more item"):i>1&&r.push(`... ${i} more items`),"["+r.join(", ")+"]"}function y(e){let t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){let t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}function v(e,t){if(!e)throw Error(null!=t?t:"Unexpected invariant triggered.")}function m(e){return 9===e||32===e}function N(e){return e>=48&&e<=57}function T(e){return e>=97&&e<=122||e>=65&&e<=90}function I(e){return T(e)||95===e}function E(e){return T(e)||N(e)||95===e}function g(e,t){let n=e.replace(/"""/g,'\\"""'),i=n.split(/\r\n|[\n\r]/g),r=1===i.length,s=i.length>1&&i.slice(1).every(e=>0===e.length||m(e.charCodeAt(0))),o=n.endsWith('\\"""'),a=e.endsWith('"')&&!o,l=e.endsWith("\\"),u=a||l,c=!(null!=t&&t.minimize)&&(!r||e.length>70||u||s||o),p="",d=r&&m(e.charCodeAt(0));return(c&&!d||s)&&(p+="\n"),p+=n,(c||u)&&(p+="\n"),'"""'+p+'"""'}function b(e){return`"${e.replace(O,S)}"`}l(u,"inspect"),l(c,"formatValue"),l(p,"formatObjectValue"),l(d,"isJSONable"),l(f,"formatObject"),l(h,"formatArray"),l(y,"getObjectTag"),l(v,"invariant"),function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(i||(i={})),l(m,"isWhiteSpace"),l(N,"isDigit$1"),l(T,"isLetter"),l(I,"isNameStart"),l(E,"isNameContinue"),l(g,"printBlockString"),l(b,"printString");let O=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function S(e){return A[e.charCodeAt(0)]}l(S,"escapedReplacer");let A=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function L(e,t){if(!e)throw Error(t)}l(L,"devAssert");let _={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},w=new Set(Object.keys(_));function D(e){let t=null==e?void 0:e.kind;return"string"==typeof t&&w.has(t)}l(D,"isNode"),function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(r||(r={})),function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(s||(s={}));let F=Object.freeze({});function x(e,t,n=_){let i,r,o;let a=new Map;for(let e of Object.values(s))a.set(e,R(t,e));let l=Array.isArray(e),c=[e],p=-1,d=[],f=e,h=[],y=[];do{var v,m,N;let e;let s=++p===c.length,T=s&&0!==d.length;if(s){if(r=0===y.length?void 0:h[h.length-1],f=o,o=y.pop(),T){if(l){f=f.slice();let e=0;for(let[t,n]of d){let i=t-e;null===n?(f.splice(i,1),e++):f[i]=n}}else for(let[e,t]of(f=Object.defineProperties({},Object.getOwnPropertyDescriptors(f)),d))f[e]=t}p=i.index,c=i.keys,d=i.edits,l=i.inArray,i=i.prev}else if(o){if(null==(f=o[r=l?p:c[p]]))continue;h.push(r)}if(!Array.isArray(f)){D(f)||L(!1,`Invalid AST Node: ${u(f)}.`);let n=s?null===(v=a.get(f.kind))||void 0===v?void 0:v.leave:null===(m=a.get(f.kind))||void 0===m?void 0:m.enter;if((e=null==n?void 0:n.call(t,f,r,o,h,y))===F)break;if(!1===e){if(!s){h.pop();continue}}else if(void 0!==e&&(d.push([r,e]),!s)){if(D(e))f=e;else{h.pop();continue}}}void 0===e&&T&&d.push([r,f]),s?h.pop():(i={inArray:l,index:p,keys:c,edits:d,prev:i},c=(l=Array.isArray(f))?f:null!==(N=n[f.kind])&&void 0!==N?N:[],p=-1,d=[],o&&y.push(o),o=f)}while(void 0!==i);return 0!==d.length?d[d.length-1][1]:e}function R(e,t){let n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function j(e){return x(e,U)}l(x,"visit"),l(R,"getEnterLeaveForKind"),l(j,"print");let U={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>V(e.definitions,"\n\n")},OperationDefinition:{leave(e){let t=$("(",V(e.variableDefinitions,", "),")"),n=V([e.operation,V([e.name,t]),V(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+$(" = ",n)+$(" ",V(i," "))},SelectionSet:{leave:({selections:e})=>C(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){let s=$("",e,": ")+t,o=s+$("(",V(n,", "),")");return o.length>80&&(o=s+$("(\n",M(V(n,"\n")),"\n)")),V([o,V(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+$(" ",V(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>V(["...",$("on ",e),V(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${$("(",V(n,", "),")")} on ${t} ${$("",V(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?g(e):b(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+V(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+V(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+$("(",V(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>$("",e,"\n")+V(["schema",V(t," "),C(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>$("",e,"\n")+V(["scalar",t,V(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>$("",e,"\n")+V(["type",t,$("implements ",V(n," & ")),V(i," "),C(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>$("",e,"\n")+t+(k(n)?$("(\n",M(V(n,"\n")),"\n)"):$("(",V(n,", "),")"))+": "+i+$(" ",V(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>$("",e,"\n")+V([t+": "+n,$("= ",i),V(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>$("",e,"\n")+V(["interface",t,$("implements ",V(n," & ")),V(i," "),C(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>$("",e,"\n")+V(["union",t,V(n," "),$("= ",V(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>$("",e,"\n")+V(["enum",t,V(n," "),C(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>$("",e,"\n")+V([t,V(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>$("",e,"\n")+V(["input",t,V(n," "),C(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>$("",e,"\n")+"directive @"+t+(k(n)?$("(\n",M(V(n,"\n")),"\n)"):$("(",V(n,", "),")"))+(i?" repeatable":"")+" on "+V(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>V(["extend schema",V(e," "),C(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>V(["extend scalar",e,V(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>V(["extend type",e,$("implements ",V(t," & ")),V(n," "),C(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>V(["extend interface",e,$("implements ",V(t," & ")),V(n," "),C(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>V(["extend union",e,V(t," "),$("= ",V(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>V(["extend enum",e,V(t," "),C(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>V(["extend input",e,V(t," "),C(n)]," ")}};function V(e,t=""){var n;return null!==(n=null==e?void 0:e.filter(e=>e).join(t))&&void 0!==n?n:""}function C(e){return $("{\n",M(V(e,"\n")),"\n}")}function $(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function M(e){return $("  ",e.replace(/\n/g,"\n  "))}function k(e){var t;return null!==(t=null==e?void 0:e.some(e=>e.includes("\n")))&&void 0!==t&&t}function B(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}function G(e){return"object"==typeof e&&null!==e}function P(e,t){let[n,i]=t?[e,t]:[void 0,e],r=" Did you mean ";n&&(r+=n+" ");let s=i.map(e=>`"${e}"`);switch(s.length){case 0:return"";case 1:return r+s[0]+"?";case 2:return r+s[0]+" or "+s[1]+"?"}let o=s.slice(0,5),a=o.pop();return r+o.join(", ")+", or "+a+"?"}function J(e){return e}l(V,"join"),l(C,"block"),l($,"wrap"),l(M,"indent"),l(k,"hasMultilineItems"),l(B,"isIterableObject"),l(G,"isObjectLike"),l(P,"didYouMean"),l(J,"identityFunc");let Q=l(function(e,t){return e instanceof t},"instanceOf");function Y(e,t){let n=Object.create(null);for(let i of e)n[t(i)]=i;return n}function z(e,t,n){let i=Object.create(null);for(let r of e)i[t(r)]=n(r);return i}function q(e,t){let n=Object.create(null);for(let i of Object.keys(e))n[i]=t(e[i],i);return n}function H(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let r=e.charCodeAt(n),s=t.charCodeAt(i);if(W(r)&&W(s)){let o=0;do++n,o=10*o+r-X,r=e.charCodeAt(n);while(W(r)&&o>0);let a=0;do++i,a=10*a+s-X,s=t.charCodeAt(i);while(W(s)&&a>0);if(o<a)return -1;if(o>a)return 1}else{if(r<s)return -1;if(r>s)return 1;++n,++i}}return e.length-t.length}l(Y,"keyMap"),l(z,"keyValMap"),l(q,"mapValue"),l(H,"naturalCompare");let X=48;function W(e){return!isNaN(e)&&X<=e&&e<=57}function K(e,t){let n=Object.create(null),i=new Z(e),r=Math.floor(.4*e.length)+1;for(let e of t){let t=i.measure(e,r);void 0!==t&&(n[e]=t)}return Object.keys(n).sort((e,t)=>{let i=n[e]-n[t];return 0!==i?i:H(e,t)})}l(W,"isDigit"),l(K,"suggestionList");class Z{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=ee(this._inputLowerCase),this._rows=[Array(e.length+1).fill(0),Array(e.length+1).fill(0),Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;let n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=ee(n),r=this._inputArray;if(i.length<r.length){let e=i;i=r,r=e}let s=i.length,o=r.length;if(s-o>t)return;let a=this._rows;for(let e=0;e<=o;e++)a[0][e]=e;for(let e=1;e<=s;e++){let n=a[(e-1)%3],s=a[e%3],l=s[0]=e;for(let t=1;t<=o;t++){let o=i[e-1]===r[t-1]?0:1,u=Math.min(n[t]+1,s[t-1]+1,n[t-1]+o);e>1&&t>1&&i[e-1]===r[t-2]&&i[e-2]===r[t-1]&&(u=Math.min(u,a[(e-2)%3][t-2]+1)),u<l&&(l=u),s[t]=u}if(l>t)return}let l=a[s%3][o];return l<=t?l:void 0}}function ee(e){let t=e.length,n=Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}function et(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;let t=Object.create(null);for(let[n,i]of Object.entries(e))t[n]=i;return t}l(Z,"LexicalDistance"),l(ee,"stringToArray"),l(et,"toObjMap");let en=/\r\n|[\n\r]/g;function ei(e,t){let n=0,i=1;for(let r of e.body.matchAll(en)){if("number"==typeof r.index||v(!1),r.index>=t)break;n=r.index+r[0].length,i+=1}return{line:i,column:t+1-n}}function er(e){return es(e.source,ei(e.source,e.start))}function es(e,t){let n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,s=e.locationOffset.line-1,o=t.line+s,a=1===t.line?n:0,l=t.column+a,u=`${e.name}:${o}:${l}
`,c=i.split(/\r\n|[\n\r]/g),p=c[r];if(p.length>120){let e=Math.floor(l/80),t=[];for(let e=0;e<p.length;e+=80)t.push(p.slice(e,e+80));return u+eo([[`${o} |`,t[0]],...t.slice(1,e+1).map(e=>["|",e]),["|","^".padStart(l%80)],["|",t[e+1]]])}return u+eo([[`${o-1} |`,c[r-1]],[`${o} |`,p],["|","^".padStart(l)],[`${o+1} |`,c[r+1]]])}function eo(e){let t=e.filter(([e,t])=>void 0!==t),n=Math.max(...t.map(([e])=>e.length));return t.map(([e,t])=>e.padStart(n)+(t?" "+t:"")).join("\n")}function ea(e){let t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}l(ei,"getLocation"),l(er,"printLocation"),l(es,"printSourceLocation"),l(eo,"printPrefixedLines"),l(ea,"toNormalizedOptions");class el extends Error{constructor(e,...t){var n,i,r;let{nodes:s,source:o,positions:a,path:l,originalError:u,extensions:c}=ea(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=u?u:void 0,this.nodes=eu(Array.isArray(s)?s:s?[s]:void 0);let p=eu(null===(n=this.nodes)||void 0===n?void 0:n.map(e=>e.loc).filter(e=>null!=e));this.source=null!=o?o:null==p?void 0:null===(i=p[0])||void 0===i?void 0:i.source,this.positions=null!=a?a:null==p?void 0:p.map(e=>e.start),this.locations=a&&o?a.map(e=>ei(o,e)):null==p?void 0:p.map(e=>ei(e.source,e.start));let d=G(null==u?void 0:u.extensions)?null==u?void 0:u.extensions:void 0;this.extensions=null!==(r=null!=c?c:d)&&void 0!==r?r:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=u&&u.stack?Object.defineProperty(this,"stack",{value:u.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,el):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(let t of this.nodes)t.loc&&(e+="\n\n"+er(t.loc));else if(this.source&&this.locations)for(let t of this.locations)e+="\n\n"+es(this.source,t);return e}toJSON(){let e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function eu(e){return void 0===e||0===e.length?void 0:e}function ec(e,t){switch(e.kind){case s.NULL:return null;case s.INT:return parseInt(e.value,10);case s.FLOAT:return parseFloat(e.value);case s.STRING:case s.ENUM:case s.BOOLEAN:return e.value;case s.LIST:return e.values.map(e=>ec(e,t));case s.OBJECT:return z(e.fields,e=>e.name.value,e=>ec(e.value,t));case s.VARIABLE:return null==t?void 0:t[e.name.value]}}function ep(e){if(null!=e||L(!1,"Must provide name."),"string"==typeof e||L(!1,"Expected name to be a string."),0===e.length)throw new el("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!E(e.charCodeAt(t)))throw new el(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!I(e.charCodeAt(0)))throw new el(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function ed(e){if("true"===e||"false"===e||"null"===e)throw new el(`Enum values cannot be named: ${e}`);return ep(e)}function ef(e){return eh(e)||ey(e)||ev(e)||em(e)||eN(e)||eT(e)||eI(e)||eE(e)}function eh(e){return Q(e,ew)}function ey(e){return Q(e,eD)}function ev(e){return Q(e,eC)}function em(e){return Q(e,e$)}function eN(e){return Q(e,ek)}function eT(e){return Q(e,eP)}function eI(e){return Q(e,eO)}function eE(e){return Q(e,eS)}function eg(e){return eh(e)||eN(e)}function eb(e){return ev(e)||em(e)}l(el,"GraphQLError"),l(eu,"undefinedIfEmpty"),l(ec,"valueFromASTUntyped"),l(ep,"assertName"),l(ed,"assertEnumValueName"),l(ef,"isType"),l(eh,"isScalarType"),l(ey,"isObjectType"),l(ev,"isInterfaceType"),l(em,"isUnionType"),l(eN,"isEnumType"),l(eT,"isInputObjectType"),l(eI,"isListType"),l(eE,"isNonNullType"),l(eg,"isLeafType"),l(eb,"isAbstractType");class eO{constructor(e){ef(e)||L(!1,`Expected ${u(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}l(eO,"GraphQLList");class eS{constructor(e){eA(e)||L(!1,`Expected ${u(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function eA(e){return ef(e)&&!eE(e)}function eL(e){return"function"==typeof e?e():e}function e_(e){return"function"==typeof e?e():e}l(eS,"GraphQLNonNull"),l(eA,"isNullableType"),l(eL,"resolveReadonlyArrayThunk"),l(e_,"resolveObjMapThunk");class ew{constructor(e){var t,n,i,r;let s=null!==(t=e.parseValue)&&void 0!==t?t:J;this.name=ep(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:J,this.parseValue=s,this.parseLiteral=null!==(i=e.parseLiteral)&&void 0!==i?i:(e,t)=>s(ec(e,t)),this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(r=e.extensionASTNodes)&&void 0!==r?r:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||L(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${u(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||L(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||L(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}l(ew,"GraphQLScalarType");class eD{constructor(e){var t;this.name=ep(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>ex(e),this._interfaces=()=>eF(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||L(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${u(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:eU(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eF(e){var t;let n=eL(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||L(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function ex(e){let t=e_(e.fields);return ej(t)||L(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),q(t,(t,n)=>{var i;ej(t)||L(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||L(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${u(t.resolve)}.`);let r=null!==(i=t.args)&&void 0!==i?i:{};return ej(r)||L(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:ep(n),description:t.description,type:t.type,args:eR(r),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:et(t.extensions),astNode:t.astNode}})}function eR(e){return Object.entries(e).map(([e,t])=>({name:ep(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:et(t.extensions),astNode:t.astNode}))}function ej(e){return G(e)&&!Array.isArray(e)}function eU(e){return q(e,e=>({description:e.description,type:e.type,args:eV(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}function eV(e){return z(e,e=>e.name,e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}l(eD,"GraphQLObjectType"),l(eF,"defineInterfaces"),l(ex,"defineFieldMap"),l(eR,"defineArguments"),l(ej,"isPlainObj"),l(eU,"fieldsToFieldsConfig"),l(eV,"argsToArgsConfig");class eC{constructor(e){var t;this.name=ep(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ex.bind(void 0,e),this._interfaces=eF.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||L(!1,`${this.name} must provide "resolveType" as a function, but got: ${u(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:eU(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}l(eC,"GraphQLInterfaceType");class e${constructor(e){var t;this.name=ep(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=eM.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||L(!1,`${this.name} must provide "resolveType" as a function, but got: ${u(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eM(e){let t=eL(e.types);return Array.isArray(t)||L(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}l(e$,"GraphQLUnionType"),l(eM,"defineTypes");class ek{constructor(e){var t;this.name=ep(e.name),this.description=e.description,this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=eG(this.name,e.values),this._valueLookup=new Map(this._values.map(e=>[e.value,e])),this._nameLookup=Y(this._values,e=>e.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){let t=this._valueLookup.get(e);if(void 0===t)throw new el(`Enum "${this.name}" cannot represent value: ${u(e)}`);return t.name}parseValue(e){if("string"!=typeof e){let t=u(e);throw new el(`Enum "${this.name}" cannot represent non-string value: ${t}.`+eB(this,t))}let t=this.getValue(e);if(null==t)throw new el(`Value "${e}" does not exist in "${this.name}" enum.`+eB(this,e));return t.value}parseLiteral(e,t){if(e.kind!==s.ENUM){let t=j(e);throw new el(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+eB(this,t),{nodes:e})}let n=this.getValue(e.value);if(null==n){let t=j(e);throw new el(`Value "${t}" does not exist in "${this.name}" enum.`+eB(this,t),{nodes:e})}return n.value}toConfig(){let e=z(this.getValues(),e=>e.name,e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eB(e,t){return P("the enum value",K(t,e.getValues().map(e=>e.name)))}function eG(e,t){return ej(t)||L(!1,`${e} values must be an object with value names as keys.`),Object.entries(t).map(([t,n])=>(ej(n)||L(!1,`${e}.${t} must refer to an object with a "value" key representing an internal value but got: ${u(n)}.`),{name:ed(t),description:n.description,value:void 0!==n.value?n.value:t,deprecationReason:n.deprecationReason,extensions:et(n.extensions),astNode:n.astNode}))}l(ek,"GraphQLEnumType"),l(eB,"didYouMeanEnumValue"),l(eG,"defineEnumValues");class eP{constructor(e){var t;this.name=ep(e.name),this.description=e.description,this.extensions=et(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=eJ.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){let e=q(this.getFields(),e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eJ(e){let t=e_(e.fields);return ej(t)||L(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),q(t,(t,n)=>("resolve"in t&&L(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:ep(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:et(t.extensions),astNode:t.astNode}))}l(eP,"GraphQLInputObjectType"),l(eJ,"defineInputFieldMap");let eQ=new ew({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){let t=eX(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new el(`Int cannot represent non-integer value: ${u(t)}`);if(n>0x7fffffff||n<-0x80000000)throw new el("Int cannot represent non 32-bit signed integer value: "+u(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new el(`Int cannot represent non-integer value: ${u(e)}`);if(e>0x7fffffff||e<-0x80000000)throw new el(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==s.INT)throw new el(`Int cannot represent non-integer value: ${j(e)}`,{nodes:e});let t=parseInt(e.value,10);if(t>0x7fffffff||t<-0x80000000)throw new el(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),eY=new ew({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){let t=eX(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new el(`Float cannot represent non numeric value: ${u(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new el(`Float cannot represent non numeric value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==s.FLOAT&&e.kind!==s.INT)throw new el(`Float cannot represent non numeric value: ${j(e)}`,e);return parseFloat(e.value)}}),ez=new ew({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){let t=eX(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new el(`String cannot represent value: ${u(e)}`)},parseValue(e){if("string"!=typeof e)throw new el(`String cannot represent a non string value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==s.STRING)throw new el(`String cannot represent a non string value: ${j(e)}`,{nodes:e});return e.value}}),eq=new ew({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){let t=eX(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new el(`Boolean cannot represent a non boolean value: ${u(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new el(`Boolean cannot represent a non boolean value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==s.BOOLEAN)throw new el(`Boolean cannot represent a non boolean value: ${j(e)}`,{nodes:e});return e.value}}),eH=new ew({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){let t=eX(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new el(`ID cannot represent value: ${u(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new el(`ID cannot represent value: ${u(e)}`)},parseLiteral(e){if(e.kind!==s.STRING&&e.kind!==s.INT)throw new el("ID cannot represent a non-string and non-integer value: "+j(e),{nodes:e});return e.value}});function eX(e){if(G(e)){if("function"==typeof e.valueOf){let t=e.valueOf();if(!G(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}function eW(e,t){if(eE(t)){let n=eW(e,t.ofType);return(null==n?void 0:n.kind)===s.NULL?null:n}if(null===e)return{kind:s.NULL};if(void 0===e)return null;if(eI(t)){let n=t.ofType;if(B(e)){let t=[];for(let i of e){let e=eW(i,n);null!=e&&t.push(e)}return{kind:s.LIST,values:t}}return eW(e,n)}if(eT(t)){if(!G(e))return null;let n=[];for(let i of Object.values(t.getFields())){let t=eW(e[i.name],i.type);t&&n.push({kind:s.OBJECT_FIELD,name:{kind:s.NAME,value:i.name},value:t})}return{kind:s.OBJECT,fields:n}}if(eg(t)){let n=t.serialize(e);if(null==n)return null;if("boolean"==typeof n)return{kind:s.BOOLEAN,value:n};if("number"==typeof n&&Number.isFinite(n)){let e=String(n);return eK.test(e)?{kind:s.INT,value:e}:{kind:s.FLOAT,value:e}}if("string"==typeof n)return eN(t)?{kind:s.ENUM,value:n}:t===eH&&eK.test(n)?{kind:s.INT,value:n}:{kind:s.STRING,value:n};throw TypeError(`Cannot convert value to AST: ${u(n)}.`)}v(!1,"Unexpected input type: "+u(t))}Object.freeze([ez,eQ,eY,eq,eH]),l(eX,"serializeObject"),l(eW,"astFromValue");let eK=/^-?(?:0|[1-9][0-9]*)$/,eZ=new eD({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:ez,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new eS(new eO(new eS(e8))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new eS(e8),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:e8,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:e8,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new eS(new eO(new eS(e0))),resolve:e=>e.getDirectives()}})}),e0=new eD({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new eS(ez),resolve:e=>e.name},description:{type:ez,resolve:e=>e.description},isRepeatable:{type:new eS(eq),resolve:e=>e.isRepeatable},locations:{type:new eS(new eO(new eS(e1))),resolve:e=>e.locations},args:{type:new eS(new eO(new eS(e2))),args:{includeDeprecated:{type:eq,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter(e=>null==e.deprecationReason)}})}),e1=new ek({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:i.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:i.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:i.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:i.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:i.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:i.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:i.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:i.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:i.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:i.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:i.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:i.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:i.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:i.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:i.UNION,description:"Location adjacent to a union definition."},ENUM:{value:i.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:i.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:i.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:i.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),e8=new eD({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new eS(e7),resolve:e=>eh(e)?o.SCALAR:ey(e)?o.OBJECT:ev(e)?o.INTERFACE:em(e)?o.UNION:eN(e)?o.ENUM:eT(e)?o.INPUT_OBJECT:eI(e)?o.LIST:eE(e)?o.NON_NULL:void v(!1,`Unexpected type: "${u(e)}".`)},name:{type:ez,resolve:e=>"name"in e?e.name:void 0},description:{type:ez,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:ez,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new eO(new eS(e9)),args:{includeDeprecated:{type:eq,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(ey(e)||ev(e)){let n=Object.values(e.getFields());return t?n:n.filter(e=>null==e.deprecationReason)}}},interfaces:{type:new eO(new eS(e8)),resolve(e){if(ey(e)||ev(e))return e.getInterfaces()}},possibleTypes:{type:new eO(new eS(e8)),resolve(e,t,n,{schema:i}){if(eb(e))return i.getPossibleTypes(e)}},enumValues:{type:new eO(new eS(e3)),args:{includeDeprecated:{type:eq,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(eN(e)){let n=e.getValues();return t?n:n.filter(e=>null==e.deprecationReason)}}},inputFields:{type:new eO(new eS(e2)),args:{includeDeprecated:{type:eq,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(eT(e)){let n=Object.values(e.getFields());return t?n:n.filter(e=>null==e.deprecationReason)}}},ofType:{type:e8,resolve:e=>"ofType"in e?e.ofType:void 0}})}),e9=new eD({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new eS(ez),resolve:e=>e.name},description:{type:ez,resolve:e=>e.description},args:{type:new eS(new eO(new eS(e2))),args:{includeDeprecated:{type:eq,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter(e=>null==e.deprecationReason)},type:{type:new eS(e8),resolve:e=>e.type},isDeprecated:{type:new eS(eq),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:ez,resolve:e=>e.deprecationReason}})}),e2=new eD({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new eS(ez),resolve:e=>e.name},description:{type:ez,resolve:e=>e.description},type:{type:new eS(e8),resolve:e=>e.type},defaultValue:{type:ez,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){let{type:t,defaultValue:n}=e,i=eW(n,t);return i?j(i):null}},isDeprecated:{type:new eS(eq),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:ez,resolve:e=>e.deprecationReason}})}),e3=new eD({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new eS(ez),resolve:e=>e.name},description:{type:ez,resolve:e=>e.description},isDeprecated:{type:new eS(eq),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:ez,resolve:e=>e.deprecationReason}})});!function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(o||(o={}));let e7=new ek({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:o.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:o.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:o.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:o.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:o.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:o.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:o.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:o.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),e5={name:"__schema",type:new eS(eZ),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},e4={name:"__type",type:e8,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new eS(ez),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},e6={name:"__typename",type:new eS(ez),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};Object.freeze([eZ,e0,e1,e8,e9,e2,e3,e7])}}]);
//# sourceMappingURL=7331.5e8d5f8ce173e9a0.js.map
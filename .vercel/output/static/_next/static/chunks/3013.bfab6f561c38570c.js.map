{"version":3,"file":"static/chunks/3013.bfab6f561c38570c.js","mappings":"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","sources":["webpack://_N_E/./lib/capitalizeFirstLetter.ts","webpack://_N_E/./ui/validatorsStability/utils.ts","webpack://_N_E/./ui/validatorsStability/ValidatorsCounters.tsx","webpack://_N_E/./ui/validatorsStability/ValidatorsFilter.tsx","webpack://_N_E/./ui/shared/statusTag/ValidatorStabilityStatus.tsx","webpack://_N_E/./ui/validatorsStability/ValidatorsListItem.tsx","webpack://_N_E/./ui/validatorsStability/ValidatorsList.tsx","webpack://_N_E/./ui/validatorsStability/ValidatorsTableItem.tsx","webpack://_N_E/./ui/validatorsStability/ValidatorsTable.tsx","webpack://_N_E/./ui/pages/ValidatorsStability.tsx","webpack://_N_E/./ui/shared/chakra/Tag.tsx","webpack://_N_E/./ui/shared/filters/FilterButton.tsx","webpack://_N_E/./ui/shared/filters/PopoverFilterRadio.tsx","webpack://_N_E/./ui/shared/statusTag/StatusTag.tsx"],"sourcesContent":["export default function capitalizeFirstLetter(text: string) {\n  if (!text || !text.length) {\n    return '';\n  }\n\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n","import type {\n  ValidatorsStabilitySortingValue,\n  ValidatorsStabilitySortingField,\n} from 'types/api/validators';\nimport type { SelectOption } from 'ui/shared/select/types';\n\nexport const VALIDATORS_STABILITY_SORT_OPTIONS: Array<SelectOption<ValidatorsStabilitySortingValue>> = [\n  { label: 'Default', value: undefined },\n  { label: 'Status descending', value: 'state-desc' },\n  { label: 'Status ascending', value: 'state-asc' },\n  { label: 'Blocks validated descending', value: 'blocks_validated-desc' },\n  { label: 'Blocks validated ascending', value: 'blocks_validated-asc' },\n];\n\nexport const VALIDATORS_STABILITY_SORT_SEQUENCE: Record<ValidatorsStabilitySortingField, Array<ValidatorsStabilitySortingValue | undefined>> = {\n  state: [ 'state-desc', 'state-asc', undefined ],\n  blocks_validated: [ 'blocks_validated-desc', 'blocks_validated-asc', undefined ],\n};\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { VALIDATORS_STABILITY_COUNTERS } from 'stubs/validators';\nimport StatsWidget from 'ui/shared/stats/StatsWidget';\n\nconst ValidatorsCounters = () => {\n  const countersQuery = useApiQuery('validators_stability_counters', {\n    queryOptions: {\n      enabled: config.features.validators.isEnabled,\n      placeholderData: VALIDATORS_STABILITY_COUNTERS,\n    },\n  });\n\n  if (!countersQuery.data) {\n    return null;\n  }\n\n  return (\n    <Box columnGap={ 3 } rowGap={ 3 } mb={ 6 } display=\"grid\" gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}>\n      <StatsWidget\n        label=\"Total validators\"\n        value={ Number(countersQuery.data.validators_counter).toLocaleString() }\n        diff={ Number(countersQuery.data.new_validators_counter_24h).toLocaleString() }\n        isLoading={ countersQuery.isPlaceholderData }\n      />\n      <StatsWidget\n        label=\"Active validators\"\n        value={ `${ Number(countersQuery.data.active_validators_percentage).toLocaleString() }%` }\n        isLoading={ countersQuery.isPlaceholderData }\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(ValidatorsCounters);\n","import React from 'react';\n\nimport type { ValidatorsStabilityFilters } from 'types/api/validators';\n\nimport PopoverFilterRadio from 'ui/shared/filters/PopoverFilterRadio';\n\nconst OPTIONS = [\n  { value: 'all', label: 'All' },\n  { value: 'active', label: 'Active' },\n  { value: 'probation', label: 'Probation' },\n  { value: 'inactive', label: 'Inactive' },\n];\n\ninterface Props {\n  hasActiveFilter: boolean;\n  defaultValue: ValidatorsStabilityFilters['state_filter'] | undefined;\n  onChange: (nextValue: string | Array<string>) => void;\n}\n\nconst ValidatorsFilter = ({ onChange, defaultValue, hasActiveFilter }: Props) => {\n  return (\n    <PopoverFilterRadio\n      name=\"validators_filter\"\n      options={ OPTIONS }\n      onChange={ onChange }\n      hasActiveFilter={ hasActiveFilter }\n      defaultValue={ defaultValue || OPTIONS[0].value }\n    />\n  );\n};\n\nexport default React.memo(ValidatorsFilter);\n","import React from 'react';\n\nimport type { ValidatorStability } from 'types/api/validators';\n\nimport StatusTag from './StatusTag';\n\ninterface Props {\n  state: ValidatorStability['state'];\n  isLoading?: boolean;\n}\n\nconst ValidatorStabilityStatus = ({ state, isLoading }: Props) => {\n  switch (state) {\n    case 'active':\n      return <StatusTag type=\"ok\" text=\"Active\" isLoading={ isLoading }/>;\n    case 'probation':\n      return <StatusTag type=\"pending\" text=\"Probation\" isLoading={ isLoading }/>;\n    case 'inactive':\n      return <StatusTag type=\"error\" text=\"Inactive\" isLoading={ isLoading }/>;\n  }\n};\n\nexport default React.memo(ValidatorStabilityStatus);\n","import React from 'react';\n\nimport type { ValidatorStability } from 'types/api/validators';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\nimport ValidatorStatus from 'ui/shared/statusTag/ValidatorStabilityStatus';\n\ninterface Props {\n  data: ValidatorStability;\n  isLoading?: boolean;\n}\n\nconst ValidatorsListItem = ({ data, isLoading }: Props) => {\n\n  return (\n    <ListItemMobileGrid.Container>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Address</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <AddressEntity\n          isLoading={ isLoading }\n          address={ data.address }\n          truncation=\"constant\"\n        />\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Status</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <ValidatorStatus state={ data.state } isLoading={ isLoading }/>\n      </ListItemMobileGrid.Value>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Blocks</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { data.blocks_validated_count.toLocaleString() }\n        </Skeleton>\n      </ListItemMobileGrid.Value>\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default React.memo(ValidatorsListItem);\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { ValidatorStability } from 'types/api/validators';\n\nimport ValidatorsListItem from './ValidatorsListItem';\n\nconst ValidatorsList = ({ data, isLoading }: { data: Array<ValidatorStability>; isLoading: boolean }) => {\n  return (\n    <Box>\n      { data.map((item, index) => (\n        <ValidatorsListItem\n          key={ item.address.hash + (isLoading ? index : '') }\n          data={ item }\n          isLoading={ isLoading }\n        />\n      )) }\n    </Box>\n  );\n};\n\nexport default React.memo(ValidatorsList);\n","import { Tr, Td } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { ValidatorStability } from 'types/api/validators';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ValidatorStatus from 'ui/shared/statusTag/ValidatorStabilityStatus';\n\ninterface Props {\n  data: ValidatorStability;\n  isLoading?: boolean;\n}\n\nconst ValidatorsTableItem = ({ data, isLoading }: Props) => {\n  return (\n    <Tr>\n      <Td verticalAlign=\"middle\">\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n          truncation=\"constant\"\n        />\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <ValidatorStatus state={ data.state } isLoading={ isLoading }/>\n      </Td>\n      <Td verticalAlign=\"middle\" isNumeric>\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { data.blocks_validated_count.toLocaleString() }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(ValidatorsTableItem);\n","import { Table, Tbody, Tr, Th, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type {\n  ValidatorStability,\n  ValidatorsStabilitySorting,\n  ValidatorsStabilitySortingField,\n  ValidatorsStabilitySortingValue,\n} from 'types/api/validators';\n\nimport { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport IconSvg from 'ui/shared/IconSvg';\nimport getNextSortValue from 'ui/shared/sort/getNextSortValue';\nimport { default as Thead } from 'ui/shared/TheadSticky';\n\nimport { VALIDATORS_STABILITY_SORT_SEQUENCE } from './utils';\nimport ValidatorsTableItem from './ValidatorsTableItem';\n\ninterface Props {\n  data: Array<ValidatorStability>;\n  sort: ValidatorsStabilitySortingValue | undefined;\n  setSorting: (val: ValidatorsStabilitySortingValue | undefined) => void;\n  isLoading?: boolean;\n}\n\nconst ValidatorsTable = ({ data, sort, setSorting, isLoading }: Props) => {\n  const sortIconTransform = sort?.includes('asc' as ValidatorsStabilitySorting['order']) ? 'rotate(-90deg)' : 'rotate(90deg)';\n\n  const onSortToggle = React.useCallback((field: ValidatorsStabilitySortingField) => () => {\n    const value = getNextSortValue<ValidatorsStabilitySortingField, ValidatorsStabilitySortingValue>(VALIDATORS_STABILITY_SORT_SEQUENCE, field)(sort);\n    setSorting(value);\n  }, [ sort, setSorting ]);\n\n  return (\n    <Table>\n      <Thead top={ ACTION_BAR_HEIGHT_DESKTOP }>\n        <Tr>\n          <Th width=\"50%\">Validator’s address</Th>\n          <Th width=\"25%\">\n            <Link\n              display=\"flex\"\n              alignItems=\"center\"\n              onClick={ isLoading ? undefined : onSortToggle('state') }\n              columnGap={ 1 }\n            >\n              { sort?.includes('state') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n              Status\n            </Link>\n          </Th>\n          <Th width=\"25%\" isNumeric>\n            <Link\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"flex-end\"\n              onClick={ isLoading ? undefined : onSortToggle('blocks_validated') }\n              columnGap={ 1 }\n            >\n              { sort?.includes('blocks_validated') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n              Blocks\n            </Link>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        { data.map((item, index) => (\n          <ValidatorsTableItem\n            key={ item.address.hash + (isLoading ? index : '') }\n            data={ item }\n            isLoading={ isLoading }/>\n        )) }\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default React.memo(ValidatorsTable);\n","import { Box, Hide, HStack, Show } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type {\n  ValidatorsStabilityFilters,\n  ValidatorsStabilitySorting,\n  ValidatorsStabilitySortingField,\n  ValidatorsStabilitySortingValue,\n} from 'types/api/validators';\n\nimport config from 'configs/app';\n// import useDebounce from 'lib/hooks/useDebounce';\nimport useIsMobile from 'lib/hooks/useIsMobile';\nimport { apos } from 'lib/html-entities';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport { generateListStub } from 'stubs/utils';\nimport { VALIDATOR_STABILITY } from 'stubs/validators';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\n// import FilterInput from 'ui/shared/filters/FilterInput';\nimport PageTitle from 'ui/shared/Page/PageTitle';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport getSortParamsFromValue from 'ui/shared/sort/getSortParamsFromValue';\nimport getSortValueFromQuery from 'ui/shared/sort/getSortValueFromQuery';\nimport Sort from 'ui/shared/sort/Sort';\nimport { VALIDATORS_STABILITY_SORT_OPTIONS } from 'ui/validatorsStability/utils';\nimport ValidatorsCounters from 'ui/validatorsStability/ValidatorsCounters';\nimport ValidatorsFilter from 'ui/validatorsStability/ValidatorsFilter';\nimport ValidatorsList from 'ui/validatorsStability/ValidatorsList';\nimport ValidatorsTable from 'ui/validatorsStability/ValidatorsTable';\n\nconst ValidatorsStability = () => {\n  const router = useRouter();\n  // const [ searchTerm, setSearchTerm ] = React.useState(getQueryParamString(router.query.address_hash) || undefined);\n  const [ statusFilter, setStatusFilter ] =\n    React.useState(getQueryParamString(router.query.state_filter) as ValidatorsStabilityFilters['state_filter'] || undefined);\n  const [ sort, setSort ] = React.useState<ValidatorsStabilitySortingValue | undefined>(\n    getSortValueFromQuery<ValidatorsStabilitySortingValue>(router.query, VALIDATORS_STABILITY_SORT_OPTIONS),\n  );\n\n  // const debouncedSearchTerm = useDebounce(searchTerm || '', 300);\n\n  const isMobile = useIsMobile();\n\n  const { isError, isPlaceholderData, data, pagination, onFilterChange, onSortingChange } = useQueryWithPages({\n    resourceName: 'validators_stability',\n    filters: {\n      // address_hash: debouncedSearchTerm,\n      state_filter: statusFilter,\n    },\n    sorting: getSortParamsFromValue<ValidatorsStabilitySortingValue, ValidatorsStabilitySortingField, ValidatorsStabilitySorting['order']>(sort),\n    options: {\n      enabled: config.features.validators.isEnabled,\n      placeholderData: generateListStub<'validators_stability'>(\n        VALIDATOR_STABILITY,\n        50,\n        { next_page_params: null },\n      ),\n    },\n  });\n\n  // const handleSearchTermChange = React.useCallback((value: string) => {\n  //   onFilterChange({\n  //     address_hash: value,\n  //     state_filter: statusFilter\n  //   });\n  //   setSearchTerm(value);\n  // }, [ statusFilter, onFilterChange ]);\n\n  const handleStateFilterChange = React.useCallback((value: string | Array<string>) => {\n    if (Array.isArray(value)) {\n      return;\n    }\n\n    const state = value === 'all' ? undefined : value as ValidatorsStabilityFilters['state_filter'];\n\n    onFilterChange({\n      // address_hash: debouncedSearchTerm,\n      state_filter: state,\n    });\n    setStatusFilter(state);\n  }, [ onFilterChange ]);\n\n  const handleSortChange = React.useCallback((value?: ValidatorsStabilitySortingValue) => {\n    setSort(value);\n    onSortingChange(getSortParamsFromValue(value));\n  }, [ onSortingChange ]);\n\n  const filterMenu =\n    <ValidatorsFilter onChange={ handleStateFilterChange } defaultValue={ statusFilter } hasActiveFilter={ Boolean(statusFilter) }/>;\n\n  // const filterInput = (\n  //   <FilterInput\n  //     w={{ base: '100%', lg: '350px' }}\n  //     size=\"xs\"\n  //     onChange={ handleSearchTermChange }\n  //     placeholder=\"Search by validator's address hash\"\n  //     initialValue={ searchTerm }\n  //   />\n  // );\n\n  const sortButton = (\n    <Sort\n      name=\"validators_sorting\"\n      defaultValue={ sort }\n      options={ VALIDATORS_STABILITY_SORT_OPTIONS }\n      onChange={ handleSortChange }\n    />\n  );\n\n  const actionBar = (\n    <>\n      <HStack spacing={ 3 } mb={ 6 } display={{ base: 'flex', lg: 'none' }}>\n        { filterMenu }\n        { sortButton }\n        { /* { filterInput } */ }\n      </HStack>\n      { (!isMobile || pagination.isVisible) && (\n        <ActionBar mt={ -6 }>\n          <HStack spacing={ 3 } display={{ base: 'none', lg: 'flex' }}>\n            { filterMenu }\n            { /* { filterInput } */ }\n          </HStack>\n          <Pagination ml=\"auto\" { ...pagination }/>\n        </ActionBar>\n      ) }\n    </>\n  );\n\n  const content = data?.items ? (\n    <>\n      <Show below=\"lg\" ssr={ false }>\n        <ValidatorsList data={ data.items } isLoading={ isPlaceholderData }/>\n      </Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <ValidatorsTable data={ data.items } sort={ sort } setSorting={ handleSortChange } isLoading={ isPlaceholderData }/>\n      </Hide>\n    </>\n  ) : null;\n\n  return (\n    <Box>\n      <PageTitle title=\"Validators\" withTextAd/>\n      <ValidatorsCounters/>\n      <DataListDisplay\n        isError={ isError }\n        items={ data?.items }\n        emptyText=\"There are no validators.\"\n        filterProps={{\n          emptyFilteredText: `Couldn${ apos }t find any validator that matches your query.`,\n          hasActiveFilters: Boolean(\n            // searchTerm ||\n            statusFilter,\n          ),\n        }}\n        content={ content }\n        actionBar={ actionBar }\n      />\n    </Box>\n  );\n};\n\nexport default ValidatorsStability;\n","import { Tag as ChakraTag } from '@chakra-ui/react';\nimport type { TagProps } from '@chakra-ui/react';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport TruncatedTextTooltip from 'ui/shared/TruncatedTextTooltip';\n\nexport interface Props extends TagProps {\n  isLoading?: boolean;\n}\n\nconst Tag = ({ isLoading, ...props }: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n\n  if (props.isTruncated && typeof props.children === 'string') {\n    if (!props.children) {\n      return null;\n    }\n\n    return (\n      <Skeleton isLoaded={ !isLoading } display=\"inline-block\" borderRadius=\"12px\" maxW=\"100%\">\n        <TruncatedTextTooltip label={ props.children }>\n          <ChakraTag { ...props } ref={ ref }/>\n        </TruncatedTextTooltip>\n      </Skeleton>\n    );\n  }\n  return (\n    <Skeleton isLoaded={ !isLoading } display=\"inline-block\" borderRadius=\"12px\" maxW=\"100%\">\n      <ChakraTag { ...props } ref={ ref }/>\n    </Skeleton>\n  );\n};\n\nexport default React.memo(React.forwardRef(Tag));\n","import type { As } from '@chakra-ui/react';\nimport { Box, Button, Circle, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst FilterIcon = <IconSvg name=\"filter\" boxSize={ 5 } mr={{ base: 0, lg: 2 }}/>;\n\ninterface Props {\n  isActive?: boolean;\n  isLoading?: boolean;\n  appliedFiltersNum?: number;\n  onClick: () => void;\n  as?: As;\n}\n\nconst FilterButton = ({ isActive, isLoading, appliedFiltersNum, onClick, as }: Props, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  const badgeColor = useColorModeValue('white', 'black');\n  const badgeBgColor = useColorModeValue('blue.700', 'gray.50');\n\n  if (isLoading) {\n    return <Skeleton w={{ base: 9, lg: '78px' }} h={ 8 } borderRadius=\"base\" flexShrink={ 0 }/>;\n  }\n\n  const num = (\n    <Circle\n      className=\"AppliedFiltersNum\"\n      bg={ isActive ? 'link_hovered' : badgeBgColor }\n      size={ 5 }\n      color={ badgeColor }\n    >\n      { appliedFiltersNum }\n    </Circle>\n  );\n\n  return (\n    <Button\n      ref={ ref }\n      rightIcon={ appliedFiltersNum ? num : undefined }\n      size=\"sm\"\n      fontWeight=\"500\"\n      variant=\"outline\"\n      colorScheme=\"gray\"\n      onClick={ onClick }\n      isActive={ isActive }\n      data-selected={ Boolean(appliedFiltersNum) }\n      px={ 1.5 }\n      flexShrink={ 0 }\n      as={ as }\n      pointerEvents=\"all\"\n      _hover={ isActive ? {\n        color: 'link_hovered',\n        '.AppliedFiltersNum': {\n          bg: 'link_hovered',\n        },\n      } : undefined }\n    >\n      { FilterIcon }\n      <Box display={{ base: 'none', lg: 'block' }}>Filter</Box>\n    </Button>\n  );\n};\n\nexport default React.forwardRef(FilterButton);\n","import React from 'react';\n\nimport type { SelectOption } from 'ui/shared/select/types';\n\nimport FilterButton from 'ui/shared/filters/FilterButton';\nimport Select from 'ui/shared/select/Select';\ninterface Props {\n  name: string;\n  options: Array<SelectOption>;\n  hasActiveFilter: boolean;\n  defaultValue?: string;\n  isLoading?: boolean;\n  onChange: (nextValue: string) => void;\n}\n\nconst PopoverFilterRadio = ({ name, hasActiveFilter, options, isLoading, onChange, defaultValue }: Props) => {\n  return (\n    <Select\n      options={ options }\n      name={ name }\n      defaultValue={ defaultValue }\n      onChange={ onChange }\n    >\n      { ({ isOpen, onToggle }) => (\n        <FilterButton\n          isActive={ isOpen }\n          onClick={ onToggle }\n          appliedFiltersNum={ hasActiveFilter ? 1 : 0 }\n          isLoading={ isLoading }\n        />\n      ) }\n    </Select>\n  );\n};\n\nexport default React.memo(PopoverFilterRadio);\n","import { TagLabel, Tooltip, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport capitalizeFirstLetter from 'lib/capitalizeFirstLetter';\nimport Tag from 'ui/shared/chakra/Tag';\n\nexport type StatusTagType = 'ok' | 'error' | 'pending';\n\nexport interface Props {\n  type: 'ok' | 'error' | 'pending';\n  text: string;\n  errorText?: string | null;\n  isLoading?: boolean;\n  className?: string;\n}\n\nconst StatusTag = ({ type, text, errorText, isLoading, className }: Props) => {\n  let colorScheme;\n\n  const capitalizedText = capitalizeFirstLetter(text);\n\n  switch (type) {\n    case 'ok':\n      colorScheme = 'green';\n      break;\n    case 'error':\n      colorScheme = 'red';\n      break;\n    case 'pending':\n      colorScheme = 'gray';\n      break;\n  }\n\n  return (\n    <Tooltip label={ errorText }>\n      <Tag colorScheme={ colorScheme } display=\"flex\" px=\"8px\" isLoading={ isLoading } className={ className }>\n        <TagLabel display=\"block\" fontSize=\"12px\">{ capitalizedText }</TagLabel>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport default chakra(StatusTag);\n"],"names":["capitalizeFirstLetter","text","length","charAt","toUpperCase","slice","VALIDATORS_STABILITY_SORT_OPTIONS","label","value","undefined","state","blocks_validated","React","ValidatorsCounters","countersQuery","useApiQuery","queryOptions","enabled","config","features","validators","isEnabled","placeholderData","VALIDATORS_STABILITY_COUNTERS","data","Box","columnGap","rowGap","mb","display","gridTemplateColumns","base","lg","StatsWidget","Number","validators_counter","toLocaleString","diff","new_validators_counter_24h","isLoading","isPlaceholderData","active_validators_percentage","OPTIONS","onChange","defaultValue","hasActiveFilter","PopoverFilterRadio","name","options","ValidatorStabilityStatus","StatusTag","type","ValidatorsListItem","ListItemMobileGrid","Container","Label","Value","AddressEntity","address","truncation","ValidatorStatus","Skeleton","isLoaded","blocks_validated_count","ValidatorsList","map","item","index","hash","ValidatorsTableItem","Tr","Td","verticalAlign","isNumeric","ValidatorsTable","sort","setSorting","sortIconTransform","includes","onSortToggle","getNextSortValue","field","Table","Thead","top","ACTION_BAR_HEIGHT_DESKTOP","Th","width","Link","alignItems","onClick","IconSvg","boxSize","transform","justifyContent","Tbody","router","useRouter","ValidatorsStability","statusFilter","setStatusFilter","getQueryParamString","query","state_filter","setSort","getSortValueFromQuery","isMobile","useIsMobile","isError","pagination","onFilterChange","onSortingChange","useQueryWithPages","resourceName","filters","sorting","getSortParamsFromValue","generateListStub","VALIDATOR_STABILITY","next_page_params","handleStateFilterChange","Array","isArray","handleSortChange","filterMenu","ValidatorsFilter","Boolean","sortButton","Sort","actionBar","HStack","spacing","isVisible","ActionBar","mt","Pagination","ml","content","items","Show","below","ssr","Hide","PageTitle","title","withTextAd","DataListDisplay","filterProps","emptyFilteredText","apos","hasActiveFilters","Tag","ref","props","isTruncated","children","borderRadius","maxW","TruncatedTextTooltip","ChakraTag","FilterIcon","mr","FilterButton","isActive","appliedFiltersNum","as","badgeColor","useColorModeValue","badgeBgColor","w","h","flexShrink","num","Circle","className","bg","size","color","Button","rightIcon","fontWeight","variant","colorScheme","data-selected","px","pointerEvents","_hover","Select","isOpen","onToggle","chakra","errorText","capitalizedText","Tooltip","TagLabel","fontSize"],"sourceRoot":"","ignoreList":[]}
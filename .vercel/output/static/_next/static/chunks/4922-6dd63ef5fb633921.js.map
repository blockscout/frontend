{"version":3,"file":"static/chunks/4922-6dd63ef5fb633921.js","mappings":"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","sources":["webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepAddress.tsx","webpack://_N_E/./ui/shared/forms/validators/signature.ts","webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepSignature.tsx","webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepSuccess.tsx","webpack://_N_E/./ui/addressVerification/AddressVerificationModal.tsx","webpack://_N_E/./ui/shared/ListItemMobile/ListItemMobileGrid.tsx","webpack://_N_E/./ui/shared/forms/fields/FormFieldAddress.tsx","webpack://_N_E/./ui/shared/texts/AdminSupportText.tsx"],"sourcesContent":["import { Alert, Box, Button, Flex } from '@chakra-ui/react';\nimport React from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport type {\n  AddressVerificationResponseError,\n  AddressCheckResponseSuccess,\n  AddressCheckStatusSuccess,\n  AddressVerificationFormFirstStepFields,\n  RootFields,\n} from '../types';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\nimport type { ResourceError } from 'lib/api/resources';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport FormFieldAddress from 'ui/shared/forms/fields/FormFieldAddress';\nimport LinkInternal from 'ui/shared/links/LinkInternal';\nimport AdminSupportText from 'ui/shared/texts/AdminSupportText';\n\ntype Fields = RootFields & AddressVerificationFormFirstStepFields;\n\ninterface Props {\n  defaultAddress?: string;\n  onContinue: (data: AddressVerificationFormFirstStepFields & AddressCheckStatusSuccess) => void;\n}\n\nconst AddressVerificationStepAddress = ({ defaultAddress, onContinue }: Props) => {\n  const formApi = useForm<Fields>({\n    mode: 'onBlur',\n    defaultValues: {\n      address: defaultAddress,\n    },\n  });\n  const { handleSubmit, formState, setError, clearErrors, watch } = formApi;\n  const apiFetch = useApiFetch();\n\n  const address = watch('address');\n\n  React.useEffect(() => {\n    clearErrors('root');\n  }, [ address, clearErrors ]);\n\n  const onFormSubmit: SubmitHandler<Fields> = React.useCallback(async(data) => {\n    try {\n      const body = {\n        contractAddress: data.address,\n      };\n      const response = await apiFetch<'address_verification', AddressCheckResponseSuccess, AddressVerificationResponseError>('address_verification', {\n        fetchParams: { method: 'POST', body },\n        pathParams: { chainId: config.chain.id, type: ':prepare' },\n      });\n\n      if (response.status !== 'SUCCESS') {\n        const type = typeof response.status === 'number' ? 'UNKNOWN_ERROR' : response.status;\n        const message = ('payload' in response ? response.payload?.message : undefined) || 'Oops! Something went wrong';\n        return setError('root', { type, message });\n      }\n\n      onContinue({ ...response.result, address: data.address });\n    } catch (_error) {\n      const error = _error as ResourceError<AddressVerificationResponseError>;\n      setError('root', { type: 'manual', message: error.payload?.message || 'Oops! Something went wrong' });\n    }\n\n  }, [ apiFetch, onContinue, setError ]);\n\n  const onSubmit = handleSubmit(onFormSubmit);\n\n  const rootError = (() => {\n    switch (formState.errors.root?.type) {\n      case 'INVALID_ADDRESS_ERROR': {\n        return <span>Specified address either does not exist or is EOA.</span>;\n      }\n      case 'IS_OWNER_ERROR': {\n        return <span>Ownership of this contract address is already verified by this account.</span>;\n      }\n      case 'OWNERSHIP_VERIFIED_ERROR': {\n        return <span>Ownership of this contract address is already verified by another account.</span>;\n      }\n      case 'SOURCE_CODE_NOT_VERIFIED_ERROR': {\n        const href = route({ pathname: '/address/[hash]/contract-verification', query: { hash: address } });\n        return (\n          <Box>\n            <span>The contract source code you entered is not yet verified. Please follow these steps to </span>\n            <LinkInternal href={ href }>verify the contract</LinkInternal>\n            <span>.</span>\n          </Box>\n        );\n      }\n      case undefined: {\n        return null;\n      }\n      default: {\n        return formState.errors.root?.message;\n      }\n    }\n  })();\n\n  return (\n    <FormProvider { ...formApi }>\n      <form noValidate onSubmit={ onSubmit }>\n        <Box>Enter the contract address you are verifying ownership for.</Box>\n        { rootError && <Alert status=\"warning\" mt={ 3 }>{ rootError }</Alert> }\n        <FormFieldAddress<Fields>\n          name=\"address\"\n          isRequired\n          bgColor=\"dialog_bg\"\n          placeholder=\"Smart contract address (0x...)\"\n          mt={ 8 }\n        />\n        <Flex alignItems={{ base: 'flex-start', lg: 'center' }} mt={ 8 } columnGap={ 5 } rowGap={ 2 } flexDir={{ base: 'column', lg: 'row' }}>\n          <Button size=\"lg\" type=\"submit\" isLoading={ formState.isSubmitting } loadingText=\"Continue\" flexShrink={ 0 }>\n            Continue\n          </Button>\n          <AdminSupportText/>\n        </Flex>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default React.memo(AddressVerificationStepAddress);\n","export const SIGNATURE_REGEXP = /^0x[a-fA-F\\d]{130}$/;\n","import { Alert, Box, Button, chakra, Flex, Link, Radio, RadioGroup } from '@chakra-ui/react';\nimport { useAppKit } from '@reown/appkit/react';\nimport React from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useSignMessage, useAccount } from 'wagmi';\n\nimport type {\n  AddressVerificationFormSecondStepFields,\n  AddressCheckStatusSuccess,\n  AddressVerificationFormFirstStepFields,\n  RootFields,\n  AddressVerificationResponseError,\n  AddressValidationResponseSuccess,\n} from '../types';\nimport type { VerifiedAddress } from 'types/api/account';\n\nimport config from 'configs/app';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport shortenString from 'lib/shortenString';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\nimport FormFieldText from 'ui/shared/forms/fields/FormFieldText';\nimport { SIGNATURE_REGEXP } from 'ui/shared/forms/validators/signature';\nimport AdminSupportText from 'ui/shared/texts/AdminSupportText';\n\ntype Fields = RootFields & AddressVerificationFormSecondStepFields;\n\ntype SignMethod = 'wallet' | 'manual';\n\ninterface Props extends AddressVerificationFormFirstStepFields, AddressCheckStatusSuccess {\n  onContinue: (newItem: VerifiedAddress, signMethod: SignMethod) => void;\n  noWeb3Provider?: boolean;\n}\n\nconst AddressVerificationStepSignature = ({ address, signingMessage, contractCreator, contractOwner, onContinue, noWeb3Provider }: Props) => {\n  const [ signMethod, setSignMethod ] = React.useState<SignMethod>(noWeb3Provider ? 'manual' : 'wallet');\n\n  const { open: openWeb3Modal } = useAppKit();\n  const { isConnected } = useAccount();\n\n  const formApi = useForm<Fields>({\n    mode: 'onBlur',\n    defaultValues: {\n      message: signingMessage,\n    },\n  });\n  const { handleSubmit, formState, setValue, getValues, setError, clearErrors, watch } = formApi;\n\n  const apiFetch = useApiFetch();\n\n  const signature = watch('signature');\n  React.useEffect(() => {\n    clearErrors('root');\n  }, [ clearErrors, signature ]);\n\n  const onFormSubmit: SubmitHandler<Fields> = React.useCallback(async(data) => {\n    try {\n      const body = {\n        contractAddress: address,\n        message: data.message,\n        signature: data.signature,\n      };\n\n      const response = await apiFetch<'address_verification', AddressValidationResponseSuccess, AddressVerificationResponseError>('address_verification', {\n        fetchParams: { method: 'POST', body },\n        pathParams: { chainId: config.chain.id, type: ':verify' },\n      });\n\n      if (response.status !== 'SUCCESS') {\n        const type = typeof response.status === 'number' ? 'UNKNOWN_STATUS' : response.status;\n        return setError('root', { type, message: response.status === 'INVALID_SIGNER_ERROR' ? response.invalidSigner.signer : undefined });\n      }\n\n      onContinue(response.result.verifiedAddress, signMethod);\n    } catch (error) {\n      setError('root', { type: 'UNKNOWN_STATUS' });\n    }\n  }, [ address, apiFetch, onContinue, setError, signMethod ]);\n\n  const onSubmit = handleSubmit(onFormSubmit);\n\n  const { signMessage, isPending: isSigning } = useSignMessage();\n\n  const handleSignMethodChange = React.useCallback((value: typeof signMethod) => {\n    setSignMethod(value);\n    clearErrors('root');\n  }, [ clearErrors ]);\n\n  const handleOpenWeb3Modal = React.useCallback(() => {\n    clearErrors('root');\n    openWeb3Modal();\n  }, [ clearErrors, openWeb3Modal ]);\n\n  const handleWeb3SignClick = React.useCallback(() => {\n    clearErrors('root');\n\n    if (!isConnected) {\n      return setError('root', { type: 'manual', message: 'Please connect to your Web3 wallet first' });\n    }\n\n    const message = getValues('message');\n    signMessage({ message }, {\n      onSuccess: (data) => {\n        setValue('signature', data);\n        onSubmit();\n      },\n      onError: (error) => {\n        return setError('root', { type: 'SIGNING_FAIL', message: (error as Error)?.message || 'Oops! Something went wrong' });\n      },\n    });\n  }, [ clearErrors, isConnected, getValues, signMessage, setError, setValue, onSubmit ]);\n\n  const handleManualSignClick = React.useCallback(() => {\n    clearErrors('root');\n    onSubmit();\n  }, [ clearErrors, onSubmit ]);\n\n  const button = (() => {\n    if (signMethod === 'manual') {\n      return (\n        <Button\n          size=\"lg\"\n          onClick={ handleManualSignClick }\n          isLoading={ formState.isSubmitting }\n          loadingText=\"Verifying\"\n        >\n          Verify\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        size=\"lg\"\n        onClick={ isConnected ? handleWeb3SignClick : handleOpenWeb3Modal }\n        isLoading={ formState.isSubmitting || isSigning }\n        loadingText={ isSigning ? 'Signing' : 'Verifying' }\n      >\n        { isConnected ? 'Sign and verify' : 'Connect wallet' }\n      </Button>\n    );\n  })();\n\n  const contactUsLink = <span>contact us <Link href=\"mailto:help@blockscout.com\">help@blockscout.com</Link></span>;\n\n  const rootError = (() => {\n    switch (formState.errors.root?.type) {\n      case 'INVALID_SIGNATURE_ERROR': {\n        return <span>The signature could not be processed.</span>;\n      }\n      case 'VALIDITY_EXPIRED_ERROR': {\n        return <span>This verification message has expired. Add the contract address to restart the process.</span>;\n      }\n      case 'SIGNING_FAIL': {\n        return <span>{ formState.errors.root.message }</span>;\n      }\n      case 'INVALID_SIGNER_ERROR': {\n        const signer = shortenString(formState.errors.root.message || '');\n        const expectedSigners = [ contractCreator, contractOwner ].filter(Boolean).map(s => shortenString(s)).join(', ');\n        return (\n          <Box>\n            <span>This address </span>\n            <span>{ signer }</span>\n            <span> is not a creator/owner of the requested contract and cannot claim ownership. Only </span>\n            <span>{ expectedSigners }</span>\n            <span> can verify ownership of this contract.</span>\n          </Box>\n        );\n      }\n      case 'UNKNOWN_STATUS': {\n        return (\n          <Box>\n            <span>We are not able to process the verify account ownership for this contract address. Kindly </span>\n            { contactUsLink }\n            <span> for further assistance.</span>\n          </Box>\n        );\n      }\n      case undefined: {\n        return null;\n      }\n    }\n  })();\n\n  return (\n    <FormProvider { ...formApi }>\n      <form noValidate onSubmit={ onSubmit }>\n        { rootError && <Alert status=\"warning\" mb={ 6 }>{ rootError }</Alert> }\n        <Box mb={ 8 }>\n          <span>Please select the address to sign and copy the message and sign it using the Blockscout message provider of your choice. </span>\n          <Link href=\"https://docs.blockscout.com/for-users/my-account/verified-addresses/copy-and-sign-message\" target=\"_blank\">\n            Additional instructions\n          </Link>\n          <span>. If you do not see your address here but are sure that you are the owner of the contract, kindly </span>\n          { contactUsLink }\n          <span> for further assistance.</span>\n        </Box>\n        { (contractOwner || contractCreator) && (\n          <Flex flexDir=\"column\" rowGap={ 4 } mb={ 4 }>\n            { contractCreator && (\n              <Box>\n                <chakra.span fontWeight={ 600 }>Contract creator: </chakra.span>\n                <chakra.span>{ contractCreator }</chakra.span>\n              </Box>\n            ) }\n            { contractOwner && (\n              <Box>\n                <chakra.span fontWeight={ 600 }>Contract owner: </chakra.span>\n                <chakra.span>{ contractOwner }</chakra.span>\n              </Box>\n            ) }\n          </Flex>\n        ) }\n        <Flex rowGap={ 5 } flexDir=\"column\">\n          <div>\n            <CopyToClipboard text={ signingMessage } ml=\"auto\" display=\"block\"/>\n            <FormFieldText<Fields>\n              name=\"message\"\n              placeholder=\"Message to sign\"\n              isRequired\n              asComponent=\"Textarea\"\n              isReadOnly\n              maxH={{ base: '140px', lg: '80px' }}\n              bgColor=\"dialog_bg\"\n            />\n          </div>\n          { !noWeb3Provider && (\n            <RadioGroup onChange={ handleSignMethodChange } value={ signMethod } display=\"flex\" flexDir=\"column\" rowGap={ 4 }>\n              <Radio value=\"wallet\">Sign via Web3 wallet</Radio>\n              <Radio value=\"manual\">Sign manually</Radio>\n            </RadioGroup>\n          ) }\n          { signMethod === 'manual' && (\n            <FormFieldText<Fields>\n              name=\"signature\"\n              placeholder=\"Signature hash\"\n              isRequired\n              rules={{ pattern: SIGNATURE_REGEXP }}\n              bgColor=\"dialog_bg\"\n            />\n          ) }\n        </Flex>\n        <Flex alignItems={{ base: 'flex-start', lg: 'center' }} mt={ 8 } columnGap={ 5 } rowGap={ 2 } flexDir={{ base: 'column', lg: 'row' }}>\n          { button }\n          <AdminSupportText/>\n        </Flex>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default React.memo(AddressVerificationStepSignature);\n","import { Alert, Box, Button, chakra, Flex } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  onShowListClick: () => void;\n  onAddTokenInfoClick: () => void;\n  isToken?: boolean;\n  address: string;\n}\n\nconst AddressVerificationStepSuccess = ({ onAddTokenInfoClick, onShowListClick, isToken, address }: Props) => {\n  return (\n    <Box>\n      <Alert status=\"success\" flexWrap=\"wrap\" whiteSpace=\"pre-wrap\" wordBreak=\"break-word\" mb={ 3 } display=\"inline-block\">\n        <span>The address ownership for </span>\n        <chakra.span fontWeight={ 700 }>{ address }</chakra.span>\n        <span> is verified.</span>\n      </Alert>\n      <p>You may now submit the “Add token information” request</p>\n      <Flex alignItems=\"center\" mt={ 8 } columnGap={ 5 } flexWrap=\"wrap\" rowGap={ 5 }>\n        <Button size=\"lg\" variant={ isToken ? 'outline' : 'solid' } onClick={ onShowListClick }>\n          View my verified addresses\n        </Button>\n        { isToken && (\n          <Button size=\"lg\" onClick={ onAddTokenInfoClick }>\n            Add token information\n          </Button>\n        ) }\n      </Flex>\n    </Box>\n  );\n};\n\nexport default React.memo(AddressVerificationStepSuccess);\n","import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { AddressVerificationFormFirstStepFields, AddressCheckStatusSuccess } from './types';\nimport type { VerifiedAddress } from 'types/api/account';\n\nimport config from 'configs/app';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport IconSvg from 'ui/shared/IconSvg';\nimport Web3ModalProvider from 'ui/shared/Web3ModalProvider';\n\nimport AddressVerificationStepAddress from './steps/AddressVerificationStepAddress';\nimport AddressVerificationStepSignature from './steps/AddressVerificationStepSignature';\nimport AddressVerificationStepSuccess from './steps/AddressVerificationStepSuccess';\n\ntype StateData = AddressVerificationFormFirstStepFields & AddressCheckStatusSuccess & { isToken?: boolean };\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (address: VerifiedAddress) => void;\n  onAddTokenInfoClick: (address: string) => void;\n  onShowListClick: () => void;\n  defaultAddress?: string;\n  pageType: string;\n}\n\nconst AddressVerificationModal = ({ defaultAddress, isOpen, onClose, onSubmit, onAddTokenInfoClick, onShowListClick, pageType }: Props) => {\n  const [ stepIndex, setStepIndex ] = React.useState(0);\n  const [ data, setData ] = React.useState<StateData>({ address: '', signingMessage: '' });\n\n  React.useEffect(() => {\n    isOpen && mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Form opened', 'Page type': pageType },\n    );\n  }, [ isOpen, pageType ]);\n\n  const handleGoToSecondStep = React.useCallback((firstStepResult: typeof data) => {\n    setData(firstStepResult);\n    setStepIndex((prev) => prev + 1);\n    mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Address entered', 'Page type': pageType },\n    );\n  }, [ pageType ]);\n\n  const handleGoToThirdStep = React.useCallback((address: VerifiedAddress, signMethod: 'wallet' | 'manual') => {\n    onSubmit(address);\n    setStepIndex((prev) => prev + 1);\n    setData((prev) => ({ ...prev, isToken: Boolean(address.metadata.tokenName) }));\n    mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Sign ownership', 'Page type': pageType, 'Sign method': signMethod },\n    );\n  }, [ onSubmit, pageType ]);\n\n  const handleGoToPrevStep = React.useCallback(() => {\n    setStepIndex((prev) => prev - 1);\n  }, []);\n\n  const handleClose = React.useCallback(() => {\n    onClose();\n    setStepIndex(0);\n    setData({ address: '', signingMessage: '' });\n  }, [ onClose ]);\n\n  const handleAddTokenInfoClick = React.useCallback(() => {\n    onAddTokenInfoClick(data.address);\n    handleClose();\n  }, [ handleClose, data.address, onAddTokenInfoClick ]);\n\n  const steps = [\n    {\n      title: 'Verify new address ownership',\n      content: <AddressVerificationStepAddress onContinue={ handleGoToSecondStep } defaultAddress={ defaultAddress }/>,\n    },\n    {\n      title: 'Copy and sign message',\n      content: (\n        <AddressVerificationStepSignature\n          { ...data }\n          onContinue={ handleGoToThirdStep }\n          noWeb3Provider={ !config.features.blockchainInteraction.isEnabled }\n        />\n      ),\n    },\n    {\n      title: 'Congrats! Address is verified.',\n      content: (\n        <AddressVerificationStepSuccess\n          onShowListClick={ onShowListClick }\n          onAddTokenInfoClick={ handleAddTokenInfoClick }\n          isToken={ data.isToken }\n          address={ data.address }\n        />\n      ),\n    },\n  ];\n  const step = steps[stepIndex];\n\n  return (\n    <Modal isOpen={ isOpen } onClose={ handleClose } size={{ base: 'full', lg: 'md' }}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader fontWeight=\"500\" textStyle=\"h3\" mb={ 6 }>\n          { stepIndex !== 0 && (\n            <Link mr={ 3 } onClick={ handleGoToPrevStep }>\n              <IconSvg name=\"arrows/east\" boxSize={ 6 } transform=\"rotate(180deg)\" verticalAlign=\"middle\" color=\"gray.400\"/>\n            </Link>\n          ) }\n          <span>{ step.title }</span>\n        </ModalHeader>\n        <ModalCloseButton/>\n        <ModalBody mb={ 0 }>\n          <Web3ModalProvider>\n            { step.content }\n          </Web3ModalProvider>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default React.memo(AddressVerificationModal);\n","import { Grid, chakra, GridItem } from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\ninterface ContainerProps {\n  className?: string;\n  isAnimated?: boolean;\n  children: React.ReactNode;\n}\n\nconst Container = chakra(({ isAnimated, children, className }: ContainerProps) => {\n  return (\n    <Grid\n      as={ motion.div }\n      w=\"100%\"\n      initial={ isAnimated ? { opacity: 0, scale: 0.97 } : { opacity: 1, scale: 1 } }\n      animate={{ opacity: 1, scale: 1 }}\n      transitionDuration=\"normal\"\n      transitionTimingFunction=\"linear\"\n      rowGap={ 2 }\n      columnGap={ 2 }\n      gridTemplateColumns=\"86px auto\"\n      alignItems=\"start\"\n      paddingY={ 4 }\n      borderColor=\"divider\"\n      borderTopWidth=\"1px\"\n      _last={{\n        borderBottomWidth: '1px',\n      }}\n      className={ className }\n      fontSize=\"sm\"\n      lineHeight=\"20px\"\n    >\n      { children }\n    </Grid>\n  );\n});\n\ninterface LabelProps {\n  className?: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n}\n\nconst Label = chakra(({ children, className, isLoading }: LabelProps) => {\n  return (\n    <Skeleton\n      className={ className }\n      isLoaded={ !isLoading }\n      fontWeight={ 500 }\n      my=\"5px\"\n      justifySelf=\"start\"\n    >\n      { children }\n    </Skeleton>\n  );\n});\n\ninterface ValueProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst Value = chakra(({ children, className }: ValueProps) => {\n  return (\n    <GridItem\n      className={ className }\n      py=\"5px\"\n      color=\"text_secondary\"\n      overflow=\"hidden\"\n    >\n      { children }\n    </GridItem>\n  );\n});\n\nconst ListItemMobileGrid = {\n  Container,\n  Label,\n  Value,\n};\n\nexport default ListItemMobileGrid;\n","import type { ChakraProps } from '@chakra-ui/react';\nimport React from 'react';\nimport type { FieldValues, Path } from 'react-hook-form';\n\nimport type { FormFieldPropsBase } from './types';\nimport type { PartialBy } from 'types/utils';\n\nimport { addressValidator } from '../validators/address';\nimport FormFieldText from './FormFieldText';\n\nconst FormFieldAddress = <FormFields extends FieldValues>(\n  props: PartialBy<FormFieldPropsBase<FormFields>, 'placeholder'>,\n) => {\n  const rules = React.useMemo(\n    () => ({\n      ...props.rules,\n      validate: {\n        ...props.rules?.validate,\n        address: addressValidator,\n      },\n    }),\n    [ props.rules ],\n  );\n\n  return (\n    <FormFieldText\n      { ...props }\n      placeholder={ props.placeholder || 'Address (0x...)' }\n      rules={ rules }\n    />\n  );\n};\n\nexport type WrappedComponent = <\n  FormFields extends FieldValues,\n  Name extends Path<FormFields> = Path<FormFields>,\n>(props: PartialBy<FormFieldPropsBase<FormFields, Name>, 'placeholder'> & ChakraProps) => React.JSX.Element;\n\nexport default React.memo(FormFieldAddress) as WrappedComponent;\n","import { Box, Link, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  className?: string;\n}\n\nconst AdminSupportText = ({ className }: Props) => {\n  return (\n    <Box className={ className }>\n      <span>Need help? Contact admin team at </span>\n      <Link href=\"mailto:help@blockscout.com\">help@blockscout.com</Link>\n      <span> for assistance!</span>\n    </Box>\n  );\n};\n\nexport default chakra(AdminSupportText);\n"],"names":["React","AddressVerificationStepAddress","defaultAddress","onContinue","formApi","useForm","mode","defaultValues","address","handleSubmit","formState","setError","clearErrors","watch","apiFetch","useApiFetch","onSubmit","onFormSubmit","data","response","error","body","contractAddress","fetchParams","method","pathParams","chainId","config","chain","id","type","status","message","payload","undefined","result","_error","rootError","errors","root","span","href","route","pathname","query","hash","Box","LinkInternal","FormProvider","form","noValidate","Alert","mt","FormFieldAddress","name","isRequired","bgColor","placeholder","Flex","alignItems","base","lg","columnGap","rowGap","flexDir","Button","size","isLoading","isSubmitting","loadingText","flexShrink","AdminSupportText","SIGNATURE_REGEXP","signingMessage","contractCreator","contractOwner","noWeb3Provider","signMethod","setSignMethod","open","openWeb3Modal","useAppKit","isConnected","useAccount","setValue","getValues","signature","invalidSigner","signer","verifiedAddress","signMessage","isPending","isSigning","useSignMessage","handleSignMethodChange","value","handleOpenWeb3Modal","handleWeb3SignClick","onSuccess","onError","handleManualSignClick","button","onClick","contactUsLink","Link","shortenString","expectedSigners","filter","Boolean","map","s","join","mb","target","chakra","fontWeight","div","CopyToClipboard","text","ml","display","FormFieldText","asComponent","isReadOnly","maxH","RadioGroup","onChange","Radio","rules","pattern","AddressVerificationStepSuccess","onAddTokenInfoClick","onShowListClick","isToken","flexWrap","whiteSpace","wordBreak","p","variant","AddressVerificationModal","isOpen","onClose","pageType","stepIndex","setStepIndex","setData","mixpanel","VERIFY_ADDRESS","Action","handleGoToSecondStep","firstStepResult","prev","handleGoToThirdStep","metadata","tokenName","handleGoToPrevStep","handleClose","handleAddTokenInfoClick","step","steps","title","content","AddressVerificationStepSignature","features","blockchainInteraction","isEnabled","Modal","ModalOverlay","ModalContent","ModalHeader","textStyle","mr","IconSvg","boxSize","transform","verticalAlign","color","ModalCloseButton","ModalBody","Web3ModalProvider","Container","isAnimated","children","className","Grid","as","motion","w","initial","opacity","scale","animate","transitionDuration","transitionTimingFunction","gridTemplateColumns","paddingY","borderColor","borderTopWidth","_last","borderBottomWidth","fontSize","lineHeight","Label","ListItemMobileGrid","Skeleton","isLoaded","my","justifySelf","Value","GridItem","py","overflow","props","validate","addressValidator"],"sourceRoot":"","ignoreList":[]}
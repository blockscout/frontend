{"version":3,"file":"static/chunks/6420.8a4c0ebf52100076.js","mappings":"gMAAA,wBACA,2BAA4D,kBAA2B,EAIvF,gBACA,OACA,SACA,UACA,gBACA,eACA,kBACA,cACA,YACA,aACA,oBACA,EAoEA,MAnEE,OAAY,OACd,QACA,eACA,YACA,iBACA,wBACA,KACA,gBACA,2BACA,KACA,oBACA,+BACA,KACA,sBACA,yBACA,QACA,2BAEA,KACA,aACA,mBACA,wDACA,uDACA,KACA,oBACA,oBAAsC,QAAY,cAClD,KACA,iBACA,kDACA,KACA,iBACA,sMACA,yBACA,KACA,gBAEA,GADA,cACA,UACA,aAA0B,mBAAyB,IACnD,+BACA,sBACA,KACA,CACA,CAEA,0DACA,KACA,iBACA,kBAA0C,QAAY,kBACtD,0BAA6C,IAAe,2CAC5D,KACA,iBACA,kBAA8C,QAAe,kBAC7D,0BAAiD,IAAW,eAC5D,KACA,mBACA,kBAA4C,QAAY,kBACxD,gCAAqD,IAAsB,oBAC3E,KACA,mBACA,8DACA,mCACA,KACA,iBACA,oCAEA,CACA,CAAG,EACH,CACA,CAEA,yBACA,IAAoB,GAAkB,4BAC3B,GAAkB,CAE7B,IAAoB,GAAgB,4BACzB,GAAgB,CAE3B,IAAoB,GAAoB,OAAS,QAAe,IACrD,GAAoB,CAE/B,eACA,uBAEA,CAEA,gBACA,YAAkB,WAAkB,IACpC,WACA,YAKA,cACA,OACA,aACA,gBACA,iBACA,qCAEA,CAEA,cACA,OACA,iBACA,gBACA,yBAEA,CAEA,cACA,uBACA,gBACA,gBACA,kBACA,0BACI,CACJ,gBACA,gBACA,kBACA,iBACA,qCAEA,CAEA,cACA,OACA,iBACA,0BACA,iBAA+B,QAAY,oBAC3C,CACA,CAEA,gBACA,OACA,YACA,gBACA,eAEA,CAEA,cACA,8BACA,CA1EA,mBAeA,mBAQA,YASA,yBAQA,6BAeA,4BAQA,6BAQA,wBAIA,oCC/JA,gBACA,SACA,IACA,4BACA,UACA,cAEA,qBAA6C,KAAQ,IACrD,OAEA,kBAZA,0BAaA,EAZA,QAA4D,MAY5D,eAZ4D,gBAA2B,oECDvF,4BACA,2BAA4D,kBAA2B,EAmBvF,cACA,OACA,+BAA6C,UAAkB,UAAwB,CACvF,CACA,CAEA,cACA,2BACA,uCACA,CAEA,gBACA,mBACA,yBACA,gCAGA,6CAFA,OAKA,gCACA,eACA,6BACA,8BACA,CAAG,gBACH,eACI,GAAU,6BACV,GAAU,yCACd,6BACA,qBACA,CAAG,eACH,eACI,GAAU,6BACV,GAAU,yCACd,sBACA,MACA,CAAG,YACH,MACA,gCACE,GAAU,4BACV,GAAU,uCACZ,CAEA,gBACA,oBACA,wBACA,sBACA,CAAG,EAEH,EADA,aACA,QACA,kCACA,MACA,yBACA,MACA,iBACA,GACA,QAEA,CACA,CACA,CAEA,sBAuBA,EAtBA,mCACA,+BACA,iBACA,6BACA,gCACA,6BACA,oEACA,oEACA,WACA,qEACA,YAEA,KACA,aAEA,yCACA,UACA,WAEA,oBACA,mBACA,oBAEA,mBACA,eACA,CAAG,qBACH,eACA,gBACA,mBACA,CAAG,eACH,eACI,GAAU,sBACV,GAAU,qBACV,GAAU,yCACd,iBACA,oBACA,gBACA,cACA,2BAEA,CAAO,OACD,cACN,2BAEA,CAAG,cACD,GAAU,qBACV,GAAU,oBACV,GAAU,uCACZ,CA5HA,GAAU,kCACV,UAAqB,GAAU,OAC/B,+BACI,GAAU,0CACd,wCACA,oBAEA,MACA,uBACA,8BACI,GAAU,oDACd,CACA,CAAC,EAMD,mBAKA,oBAgCA,mBAmBA,oBAmDA,oICpIA,4BACA,2BAA4D,kBAA2B,EA4DvF,kBACA,SACA,eACA,CAEA,kBACA,MAEA,IADA,sDACA,eAA+C,OAAiB,IAChE,CAEA,kBACA,MAEA,IADA,gEACA,mBAA8C,OAAqB,IACnE,CAEA,kBACA,MAEA,IADA,oDACA,aAAwC,OAAoB,KAC5D,oBACA,CAEA,kBACA,MACA,6DACA,qBACA,SACA,qBAA0C,OAAqB,IAC/D,CAEA,oBACA,oCACA,8BACA,aAAmB,IAAc,EACjC,kBACA,UACI,aAAsB,IAAW,EACrC,SACA,kBACA,UAEA,8CAA+F,OAAgB,OAE/G,gBACA,CAEA,oBACA,aAAmB,IAAc,EACjC,kBACA,UACI,aAAsB,IAAW,EACrC,SACA,kBACA,UAEA,8CAA2F,OAAgB,MAE3G,CAEA,kBACA,oBACA,MACA,mCACA,gCACA,oBACA,mCAEA,0CAEA,gBACA,CACA,QACA,CAEA,kBACA,0BACA,MACA,mCACA,gCACA,iBACA,oCACA,sCACA,qDACA,iBACA,mCACA,uCACA,oBACA,mCAEA,0CAEA,gBACA,CACA,CAEA,uBAAyD,aAAe,SACxE,UAEA,EADA,gBAEA,GAEA,CADA,+BACA,yBACA,+BACA,MACA,CAAO,GAEP,iCAEA,cACA,0CACA,gBACA,EAAI,IACJ,yCAEA,CAtKA,GAAU,yCACV,uBACA,OAEA,cACA,SACA,SACA,EAAmB,OAAW,mBAC9B,0EACA,mCACA,sCACA,SACA,oCAGA,OAFA,iBACA,kBACA,CACA,CAAI,2CACJ,mCACA,sCACA,SACA,oCAGA,OAFA,iBACA,sBACA,CACA,CAAI,oCACJ,mCACA,sCACA,SACA,oCAGA,OAFA,iBACA,gBACA,CACA,CAAI,0DACJ,mCACA,sCACA,SACA,oCAGA,OAFA,iBACA,mBACA,CACA,CAAI,gDACJ,mCACA,sCACA,gBACA,oCAGA,OAFA,iBACA,cACA,CACA,CACA,CAAC,EAKD,mBAMA,4BAMA,uBAOA,iBAQA,uBAgBA,4BAaA,kBAeA,yBAqBA,yBAqBA","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/SchemaReference.es.js","webpack://_N_E/./node_modules/@graphiql/react/dist/forEachState.es.js","webpack://_N_E/./node_modules/@graphiql/react/dist/info-addon.es.js","webpack://_N_E/./node_modules/@graphiql/react/dist/info.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { getNamedType, GraphQLInputObjectType, getNullableType, GraphQLList, GraphQLEnumType, isCompositeType } from \"graphql\";\nimport { S as SchemaMetaFieldDef, T as TypeMetaFieldDef, a as TypeNameMetaFieldDef } from \"./introspection.es.js\";\nimport { f as forEachState } from \"./forEachState.es.js\";\nfunction getTypeInfo(schema, tokenState) {\n  const info = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null\n  };\n  forEachState(tokenState, (state) => {\n    var _a, _b;\n    switch (state.kind) {\n      case \"Query\":\n      case \"ShortQuery\":\n        info.type = schema.getQueryType();\n        break;\n      case \"Mutation\":\n        info.type = schema.getMutationType();\n        break;\n      case \"Subscription\":\n        info.type = schema.getSubscriptionType();\n        break;\n      case \"InlineFragment\":\n      case \"FragmentDefinition\":\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n        break;\n      case \"Field\":\n      case \"AliasedField\":\n        info.fieldDef = info.type && state.name ? getFieldDef(schema, info.parentType, state.name) : null;\n        info.type = (_a = info.fieldDef) === null || _a === void 0 ? void 0 : _a.type;\n        break;\n      case \"SelectionSet\":\n        info.parentType = info.type ? getNamedType(info.type) : null;\n        break;\n      case \"Directive\":\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n      case \"Arguments\":\n        const parentDef = state.prevState ? state.prevState.kind === \"Field\" ? info.fieldDef : state.prevState.kind === \"Directive\" ? info.directiveDef : state.prevState.kind === \"AliasedField\" ? state.prevState.name && getFieldDef(schema, info.parentType, state.prevState.name) : null : null;\n        info.argDefs = parentDef ? parentDef.args : null;\n        break;\n      case \"Argument\":\n        info.argDef = null;\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n        info.inputType = (_b = info.argDef) === null || _b === void 0 ? void 0 : _b.type;\n        break;\n      case \"EnumValue\":\n        const enumType = info.inputType ? getNamedType(info.inputType) : null;\n        info.enumValue = enumType instanceof GraphQLEnumType ? find(enumType.getValues(), (val) => val.value === state.name) : null;\n        break;\n      case \"ListValue\":\n        const nullableType = info.inputType ? getNullableType(info.inputType) : null;\n        info.inputType = nullableType instanceof GraphQLList ? nullableType.ofType : null;\n        break;\n      case \"ObjectValue\":\n        const objectType = info.inputType ? getNamedType(info.inputType) : null;\n        info.objectFieldDefs = objectType instanceof GraphQLInputObjectType ? objectType.getFields() : null;\n        break;\n      case \"ObjectField\":\n        const objectField = state.name && info.objectFieldDefs ? info.objectFieldDefs[state.name] : null;\n        info.inputType = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n        break;\n      case \"NamedType\":\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n  return info;\n}\n__name(getTypeInfo, \"getTypeInfo\");\nfunction getFieldDef(schema, type, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return SchemaMetaFieldDef;\n  }\n  if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return TypeMetaFieldDef;\n  }\n  if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (type && type.getFields) {\n    return type.getFields()[fieldName];\n  }\n}\n__name(getFieldDef, \"getFieldDef\");\nfunction find(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}\n__name(find, \"find\");\nfunction getFieldReference(typeInfo) {\n  return {\n    kind: \"Field\",\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n__name(getFieldReference, \"getFieldReference\");\nfunction getDirectiveReference(typeInfo) {\n  return {\n    kind: \"Directive\",\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef\n  };\n}\n__name(getDirectiveReference, \"getDirectiveReference\");\nfunction getArgumentReference(typeInfo) {\n  return typeInfo.directiveDef ? {\n    kind: \"Argument\",\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    directive: typeInfo.directiveDef\n  } : {\n    kind: \"Argument\",\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n__name(getArgumentReference, \"getArgumentReference\");\nfunction getEnumValueReference(typeInfo) {\n  return {\n    kind: \"EnumValue\",\n    value: typeInfo.enumValue || void 0,\n    type: typeInfo.inputType ? getNamedType(typeInfo.inputType) : void 0\n  };\n}\n__name(getEnumValueReference, \"getEnumValueReference\");\nfunction getTypeReference(typeInfo, type) {\n  return {\n    kind: \"Type\",\n    schema: typeInfo.schema,\n    type: type || typeInfo.type\n  };\n}\n__name(getTypeReference, \"getTypeReference\");\nfunction isMetaField(fieldDef) {\n  return fieldDef.name.slice(0, 2) === \"__\";\n}\n__name(isMetaField, \"isMetaField\");\nexport { getFieldReference as a, getDirectiveReference as b, getArgumentReference as c, getEnumValueReference as d, getTypeReference as e, getTypeInfo as g };\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nfunction forEachState(stack, fn) {\n  const reverseStateStack = [];\n  let state = stack;\n  while (state === null || state === void 0 ? void 0 : state.kind) {\n    reverseStateStack.push(state);\n    state = state.prevState;\n  }\n  for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n    fn(reverseStateStack[i]);\n  }\n}\n__name(forEachState, \"forEachState\");\nexport { forEachState as f };\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport \"./index.es.js\";\nimport \"react\";\nimport \"graphql\";\nimport \"react-dom\";\nCodeMirror.defineOption(\"info\", false, (cm, options, old) => {\n  if (old && old !== CodeMirror.Init) {\n    const oldOnMouseOver = cm.state.info.onMouseOver;\n    CodeMirror.off(cm.getWrapperElement(), \"mouseover\", oldOnMouseOver);\n    clearTimeout(cm.state.info.hoverTimeout);\n    delete cm.state.info;\n  }\n  if (options) {\n    const state = cm.state.info = createState(options);\n    state.onMouseOver = onMouseOver.bind(null, cm);\n    CodeMirror.on(cm.getWrapperElement(), \"mouseover\", state.onMouseOver);\n  }\n});\nfunction createState(options) {\n  return {\n    options: options instanceof Function ? { render: options } : options === true ? {} : options\n  };\n}\n__name(createState, \"createState\");\nfunction getHoverTime(cm) {\n  const options = cm.state.info.options;\n  return (options === null || options === void 0 ? void 0 : options.hoverTime) || 500;\n}\n__name(getHoverTime, \"getHoverTime\");\nfunction onMouseOver(cm, e) {\n  const state = cm.state.info;\n  const target = e.target || e.srcElement;\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  if (target.nodeName !== \"SPAN\" || state.hoverTimeout !== void 0) {\n    return;\n  }\n  const box = target.getBoundingClientRect();\n  const onMouseMove = /* @__PURE__ */ __name(function() {\n    clearTimeout(state.hoverTimeout);\n    state.hoverTimeout = setTimeout(onHover, hoverTime);\n  }, \"onMouseMove\");\n  const onMouseOut = /* @__PURE__ */ __name(function() {\n    CodeMirror.off(document, \"mousemove\", onMouseMove);\n    CodeMirror.off(cm.getWrapperElement(), \"mouseout\", onMouseOut);\n    clearTimeout(state.hoverTimeout);\n    state.hoverTimeout = void 0;\n  }, \"onMouseOut\");\n  const onHover = /* @__PURE__ */ __name(function() {\n    CodeMirror.off(document, \"mousemove\", onMouseMove);\n    CodeMirror.off(cm.getWrapperElement(), \"mouseout\", onMouseOut);\n    state.hoverTimeout = void 0;\n    onMouseHover(cm, box);\n  }, \"onHover\");\n  const hoverTime = getHoverTime(cm);\n  state.hoverTimeout = setTimeout(onHover, hoverTime);\n  CodeMirror.on(document, \"mousemove\", onMouseMove);\n  CodeMirror.on(cm.getWrapperElement(), \"mouseout\", onMouseOut);\n}\n__name(onMouseOver, \"onMouseOver\");\nfunction onMouseHover(cm, box) {\n  const pos = cm.coordsChar({\n    left: (box.left + box.right) / 2,\n    top: (box.top + box.bottom) / 2\n  });\n  const state = cm.state.info;\n  const options = state.options;\n  const render = options.render || cm.getHelper(pos, \"info\");\n  if (render) {\n    const token = cm.getTokenAt(pos, true);\n    if (token) {\n      const info = render(token, options, cm, pos);\n      if (info) {\n        showPopup(cm, box, info);\n      }\n    }\n  }\n}\n__name(onMouseHover, \"onMouseHover\");\nfunction showPopup(cm, box, info) {\n  const popup = document.createElement(\"div\");\n  popup.className = \"CodeMirror-info\";\n  popup.appendChild(info);\n  document.body.appendChild(popup);\n  const popupBox = popup.getBoundingClientRect();\n  const popupStyle = window.getComputedStyle(popup);\n  const popupWidth = popupBox.right - popupBox.left + parseFloat(popupStyle.marginLeft) + parseFloat(popupStyle.marginRight);\n  const popupHeight = popupBox.bottom - popupBox.top + parseFloat(popupStyle.marginTop) + parseFloat(popupStyle.marginBottom);\n  let topPos = box.bottom;\n  if (popupHeight > window.innerHeight - box.bottom - 15 && box.top > window.innerHeight - box.bottom) {\n    topPos = box.top - popupHeight;\n  }\n  if (topPos < 0) {\n    topPos = box.bottom;\n  }\n  let leftPos = Math.max(0, window.innerWidth - popupWidth - 15);\n  if (leftPos > box.left) {\n    leftPos = box.left;\n  }\n  popup.style.opacity = \"1\";\n  popup.style.top = topPos + \"px\";\n  popup.style.left = leftPos + \"px\";\n  let popupTimeout;\n  const onMouseOverPopup = /* @__PURE__ */ __name(function() {\n    clearTimeout(popupTimeout);\n  }, \"onMouseOverPopup\");\n  const onMouseOut = /* @__PURE__ */ __name(function() {\n    clearTimeout(popupTimeout);\n    popupTimeout = setTimeout(hidePopup, 200);\n  }, \"onMouseOut\");\n  const hidePopup = /* @__PURE__ */ __name(function() {\n    CodeMirror.off(popup, \"mouseover\", onMouseOverPopup);\n    CodeMirror.off(popup, \"mouseout\", onMouseOut);\n    CodeMirror.off(cm.getWrapperElement(), \"mouseout\", onMouseOut);\n    if (popup.style.opacity) {\n      popup.style.opacity = \"0\";\n      setTimeout(() => {\n        if (popup.parentNode) {\n          popup.parentNode.removeChild(popup);\n        }\n      }, 600);\n    } else if (popup.parentNode) {\n      popup.parentNode.removeChild(popup);\n    }\n  }, \"hidePopup\");\n  CodeMirror.on(popup, \"mouseover\", onMouseOverPopup);\n  CodeMirror.on(popup, \"mouseout\", onMouseOut);\n  CodeMirror.on(cm.getWrapperElement(), \"mouseout\", onMouseOut);\n}\n__name(showPopup, \"showPopup\");\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { GraphQLNonNull, GraphQLList } from \"graphql\";\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport { g as getTypeInfo, a as getFieldReference, b as getDirectiveReference, c as getArgumentReference, d as getEnumValueReference, e as getTypeReference } from \"./SchemaReference.es.js\";\nimport \"./info-addon.es.js\";\nimport \"./index.es.js\";\nimport \"react\";\nimport \"react-dom\";\nimport \"./introspection.es.js\";\nimport \"./forEachState.es.js\";\nCodeMirror.registerHelper(\"info\", \"graphql\", (token, options) => {\n  if (!options.schema || !token.state) {\n    return;\n  }\n  const state = token.state;\n  const kind = state.kind;\n  const step = state.step;\n  const typeInfo = getTypeInfo(options.schema, token.state);\n  if (kind === \"Field\" && step === 0 && typeInfo.fieldDef || kind === \"AliasedField\" && step === 2 && typeInfo.fieldDef) {\n    const header = document.createElement(\"div\");\n    header.className = \"CodeMirror-info-header\";\n    renderField(header, typeInfo, options);\n    const into = document.createElement(\"div\");\n    into.appendChild(header);\n    renderDescription(into, options, typeInfo.fieldDef);\n    return into;\n  } else if (kind === \"Directive\" && step === 1 && typeInfo.directiveDef) {\n    const header = document.createElement(\"div\");\n    header.className = \"CodeMirror-info-header\";\n    renderDirective(header, typeInfo, options);\n    const into = document.createElement(\"div\");\n    into.appendChild(header);\n    renderDescription(into, options, typeInfo.directiveDef);\n    return into;\n  } else if (kind === \"Argument\" && step === 0 && typeInfo.argDef) {\n    const header = document.createElement(\"div\");\n    header.className = \"CodeMirror-info-header\";\n    renderArg(header, typeInfo, options);\n    const into = document.createElement(\"div\");\n    into.appendChild(header);\n    renderDescription(into, options, typeInfo.argDef);\n    return into;\n  } else if (kind === \"EnumValue\" && typeInfo.enumValue && typeInfo.enumValue.description) {\n    const header = document.createElement(\"div\");\n    header.className = \"CodeMirror-info-header\";\n    renderEnumValue(header, typeInfo, options);\n    const into = document.createElement(\"div\");\n    into.appendChild(header);\n    renderDescription(into, options, typeInfo.enumValue);\n    return into;\n  } else if (kind === \"NamedType\" && typeInfo.type && typeInfo.type.description) {\n    const header = document.createElement(\"div\");\n    header.className = \"CodeMirror-info-header\";\n    renderType(header, typeInfo, options, typeInfo.type);\n    const into = document.createElement(\"div\");\n    into.appendChild(header);\n    renderDescription(into, options, typeInfo.type);\n    return into;\n  }\n});\nfunction renderField(into, typeInfo, options) {\n  renderQualifiedField(into, typeInfo, options);\n  renderTypeAnnotation(into, typeInfo, options, typeInfo.type);\n}\n__name(renderField, \"renderField\");\nfunction renderQualifiedField(into, typeInfo, options) {\n  var _a;\n  const fieldName = ((_a = typeInfo.fieldDef) === null || _a === void 0 ? void 0 : _a.name) || \"\";\n  text(into, fieldName, \"field-name\", options, getFieldReference(typeInfo));\n}\n__name(renderQualifiedField, \"renderQualifiedField\");\nfunction renderDirective(into, typeInfo, options) {\n  var _a;\n  const name = \"@\" + (((_a = typeInfo.directiveDef) === null || _a === void 0 ? void 0 : _a.name) || \"\");\n  text(into, name, \"directive-name\", options, getDirectiveReference(typeInfo));\n}\n__name(renderDirective, \"renderDirective\");\nfunction renderArg(into, typeInfo, options) {\n  var _a;\n  const name = ((_a = typeInfo.argDef) === null || _a === void 0 ? void 0 : _a.name) || \"\";\n  text(into, name, \"arg-name\", options, getArgumentReference(typeInfo));\n  renderTypeAnnotation(into, typeInfo, options, typeInfo.inputType);\n}\n__name(renderArg, \"renderArg\");\nfunction renderEnumValue(into, typeInfo, options) {\n  var _a;\n  const name = ((_a = typeInfo.enumValue) === null || _a === void 0 ? void 0 : _a.name) || \"\";\n  renderType(into, typeInfo, options, typeInfo.inputType);\n  text(into, \".\");\n  text(into, name, \"enum-value\", options, getEnumValueReference(typeInfo));\n}\n__name(renderEnumValue, \"renderEnumValue\");\nfunction renderTypeAnnotation(into, typeInfo, options, t) {\n  const typeSpan = document.createElement(\"span\");\n  typeSpan.className = \"type-name-pill\";\n  if (t instanceof GraphQLNonNull) {\n    renderType(typeSpan, typeInfo, options, t.ofType);\n    text(typeSpan, \"!\");\n  } else if (t instanceof GraphQLList) {\n    text(typeSpan, \"[\");\n    renderType(typeSpan, typeInfo, options, t.ofType);\n    text(typeSpan, \"]\");\n  } else {\n    text(typeSpan, (t === null || t === void 0 ? void 0 : t.name) || \"\", \"type-name\", options, getTypeReference(typeInfo, t));\n  }\n  into.appendChild(typeSpan);\n}\n__name(renderTypeAnnotation, \"renderTypeAnnotation\");\nfunction renderType(into, typeInfo, options, t) {\n  if (t instanceof GraphQLNonNull) {\n    renderType(into, typeInfo, options, t.ofType);\n    text(into, \"!\");\n  } else if (t instanceof GraphQLList) {\n    text(into, \"[\");\n    renderType(into, typeInfo, options, t.ofType);\n    text(into, \"]\");\n  } else {\n    text(into, (t === null || t === void 0 ? void 0 : t.name) || \"\", \"type-name\", options, getTypeReference(typeInfo, t));\n  }\n}\n__name(renderType, \"renderType\");\nfunction renderDescription(into, options, def) {\n  const description = def.description;\n  if (description) {\n    const descriptionDiv = document.createElement(\"div\");\n    descriptionDiv.className = \"info-description\";\n    if (options.renderDescription) {\n      descriptionDiv.innerHTML = options.renderDescription(description);\n    } else {\n      descriptionDiv.appendChild(document.createTextNode(description));\n    }\n    into.appendChild(descriptionDiv);\n  }\n  renderDeprecation(into, options, def);\n}\n__name(renderDescription, \"renderDescription\");\nfunction renderDeprecation(into, options, def) {\n  const reason = def.deprecationReason;\n  if (reason) {\n    const deprecationDiv = document.createElement(\"div\");\n    deprecationDiv.className = \"info-deprecation\";\n    into.appendChild(deprecationDiv);\n    const label = document.createElement(\"span\");\n    label.className = \"info-deprecation-label\";\n    label.appendChild(document.createTextNode(\"Deprecated\"));\n    deprecationDiv.appendChild(label);\n    const reasonDiv = document.createElement(\"div\");\n    reasonDiv.className = \"info-deprecation-reason\";\n    if (options.renderDescription) {\n      reasonDiv.innerHTML = options.renderDescription(reason);\n    } else {\n      reasonDiv.appendChild(document.createTextNode(reason));\n    }\n    deprecationDiv.appendChild(reasonDiv);\n  }\n}\n__name(renderDeprecation, \"renderDeprecation\");\nfunction text(into, content, className = \"\", options = { onClick: null }, ref = null) {\n  if (className) {\n    const onClick = options.onClick;\n    let node;\n    if (onClick) {\n      node = document.createElement(\"a\");\n      node.href = \"javascript:void 0\";\n      node.addEventListener(\"click\", (e) => {\n        onClick(ref, e);\n      });\n    } else {\n      node = document.createElement(\"span\");\n    }\n    node.className = className;\n    node.appendChild(document.createTextNode(content));\n    into.appendChild(node);\n  } else {\n    into.appendChild(document.createTextNode(content));\n  }\n}\n__name(text, \"text\");\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
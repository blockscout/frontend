{"version":3,"file":"static/chunks/1853-2527e4fabfc9ef22.js","mappings":"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","sources":["webpack://_N_E/./lib/hooks/useIsMounted.tsx","webpack://_N_E/./stubs/address.ts","webpack://_N_E/./stubs/mud.ts","webpack://_N_E/./ui/address/details/AddressQrCode.tsx","webpack://_N_E/./lib/web3/useProvider.tsx","webpack://_N_E/./lib/web3/useAddOrSwitchChain.tsx","webpack://_N_E/./lib/web3/wallets.ts","webpack://_N_E/./ui/shared/address/AddressAddToWallet.tsx","webpack://_N_E/./ui/shared/nft/NftFallback.tsx","webpack://_N_E/./ui/shared/nft/utils.ts","webpack://_N_E/./ui/shared/nft/NftHtml.tsx","webpack://_N_E/./ui/shared/nft/NftMediaFullscreenModal.tsx","webpack://_N_E/./ui/shared/nft/NftHtmlFullscreen.tsx","webpack://_N_E/./ui/shared/nft/NftImage.tsx","webpack://_N_E/./ui/shared/nft/NftImageFullscreen.tsx","webpack://_N_E/./ui/shared/nft/NftVideo.tsx","webpack://_N_E/./ui/shared/nft/NftVideoFullscreen.tsx","webpack://_N_E/./ui/shared/nft/useNftMediaInfo.tsx","webpack://_N_E/./ui/shared/nft/NftMedia.tsx"],"sourcesContent":["import React from 'react';\n\nexport default function useIsMounted() {\n  const [ isMounted, setIsMounted ] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, [ ]);\n\n  return isMounted;\n}\n","import type {\n  Address,\n  AddressCoinBalanceHistoryItem,\n  AddressCollection,\n  AddressCounters,\n  AddressEpochRewardsItem,\n  AddressMudTableItem,\n  AddressNFT,\n  AddressTabsCounters,\n  AddressTokenBalance,\n} from 'types/api/address';\nimport type { AddressesItem } from 'types/api/addresses';\n\nimport { ADDRESS_HASH, ADDRESS_PARAMS } from './addressParams';\nimport { MUD_SCHEMA, MUD_TABLE } from './mud';\nimport { TOKEN_INFO_ERC_1155, TOKEN_INFO_ERC_20, TOKEN_INFO_ERC_721, TOKEN_INFO_ERC_404, TOKEN_INSTANCE } from './token';\nimport { TX_HASH } from './tx';\n\nexport const ADDRESS_INFO: Address = {\n  block_number_balance_updated_at: 8774377,\n  coin_balance: '810941268802273085757',\n  creation_transaction_hash: null,\n  creator_address_hash: ADDRESS_HASH,\n  exchange_rate: null,\n  has_decompiled_code: false,\n  has_logs: true,\n  has_token_transfers: false,\n  has_tokens: false,\n  has_validated_blocks: false,\n  hash: ADDRESS_HASH,\n  implementations: [ { address: ADDRESS_HASH, name: 'Transparent Upgradable Proxy' } ],\n  is_contract: true,\n  is_verified: true,\n  name: 'ChainLink Token (goerli)',\n  token: TOKEN_INFO_ERC_20,\n  private_tags: [],\n  public_tags: [],\n  watchlist_names: [],\n  watchlist_address_id: null,\n  ens_domain_name: null,\n};\n\nexport const ADDRESS_COUNTERS: AddressCounters = {\n  gas_usage_count: '8028907522',\n  token_transfers_count: '420',\n  transactions_count: '119020',\n  validations_count: '0',\n};\n\nexport const ADDRESS_TABS_COUNTERS: AddressTabsCounters = {\n  internal_transactions_count: 10,\n  logs_count: 10,\n  token_balances_count: 10,\n  token_transfers_count: 10,\n  transactions_count: 10,\n  validations_count: 10,\n  withdrawals_count: 10,\n};\n\nexport const TOP_ADDRESS: AddressesItem = {\n  coin_balance: '11886682377162664596540805',\n  transaction_count: '1835',\n  hash: '0x4f7A67464B5976d7547c860109e4432d50AfB38e',\n  implementations: null,\n  is_contract: false,\n  is_verified: null,\n  name: null,\n  private_tags: [],\n  public_tags: [ ],\n  watchlist_names: [],\n  ens_domain_name: null,\n};\n\nexport const ADDRESS_COIN_BALANCE: AddressCoinBalanceHistoryItem = {\n  block_number: 9004413,\n  block_timestamp: '2023-05-15T13:16:24Z',\n  delta: '1000000000000000000',\n  transaction_hash: TX_HASH,\n  value: '953427250000000000000000',\n};\n\nexport const ADDRESS_TOKEN_BALANCE_ERC_20: AddressTokenBalance = {\n  token: TOKEN_INFO_ERC_20,\n  token_id: null,\n  token_instance: null,\n  value: '1000000000000000000000000',\n};\n\nexport const ADDRESS_NFT_721: AddressNFT = {\n  token_type: 'ERC-721',\n  token: TOKEN_INFO_ERC_721,\n  value: '1',\n  ...TOKEN_INSTANCE,\n};\n\nexport const ADDRESS_NFT_1155: AddressNFT = {\n  token_type: 'ERC-1155',\n  token: TOKEN_INFO_ERC_1155,\n  value: '10',\n  ...TOKEN_INSTANCE,\n};\n\nexport const ADDRESS_NFT_404: AddressNFT = {\n  token_type: 'ERC-404',\n  token: TOKEN_INFO_ERC_404,\n  value: '10',\n  ...TOKEN_INSTANCE,\n};\n\nexport const ADDRESS_COLLECTION: AddressCollection = {\n  token: TOKEN_INFO_ERC_1155,\n  amount: '4',\n  token_instances: Array(4).fill(TOKEN_INSTANCE),\n};\n\nexport const ADDRESS_MUD_TABLE_ITEM: AddressMudTableItem = {\n  schema: MUD_SCHEMA,\n  table: MUD_TABLE,\n};\n\nexport const EPOCH_REWARD_ITEM: AddressEpochRewardsItem = {\n  amount: '136609473658452408568',\n  block_number: 10355938,\n  block_timestamp: '2022-05-15T13:16:24Z',\n  type: 'voter',\n  token: TOKEN_INFO_ERC_20,\n  block_hash: '0x5956a847d8089e254e02e5111cad6992b99ceb9e5c2dc4343fd53002834c4dc6',\n  account: ADDRESS_PARAMS,\n  epoch_number: 1234,\n  associated_account: ADDRESS_PARAMS,\n};\n","import type { MudWorldItem, MudWorldSchema, MudWorldTable } from 'types/api/mudWorlds';\n\nimport { ADDRESS_PARAMS } from './addressParams';\n\nexport const MUD_TABLE: MudWorldTable = {\n  table_full_name: 'ot.Match',\n  table_id: '0x6f7400000000000000000000000000004d617463680000000000000000000000',\n  table_name: 'Match',\n  table_namespace: '',\n  table_type: 'offchain',\n};\n\nexport const MUD_SCHEMA: MudWorldSchema = {\n  key_names: [ 'matchEntityKey', 'entity' ],\n  key_types: [ 'bytes32', 'bytes32' ],\n  value_names: [ 'matchEntity' ],\n  value_types: [ 'bytes32' ],\n};\n\nexport const MUD_WORLD: MudWorldItem = {\n  address: ADDRESS_PARAMS,\n  coin_balance: '7072643779453701031672',\n  transaction_count: 442,\n};\n","import {\n  chakra,\n  Alert,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  ModalOverlay,\n  LightMode,\n  Box,\n  useDisclosure,\n  Tooltip,\n  IconButton,\n} from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport QRCode from 'qrcode';\nimport React from 'react';\n\nimport type { Address as AddressType } from 'types/api/address';\n\nimport getPageType from 'lib/mixpanel/getPageType';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport { useRollbar } from 'lib/rollbar';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst SVG_OPTIONS = {\n  margin: 0,\n};\n\ninterface Props {\n  className?: string;\n  address: AddressType;\n  isLoading?: boolean;\n}\n\nconst AddressQrCode = ({ address, className, isLoading }: Props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const router = useRouter();\n  const rollbar = useRollbar();\n\n  const [ qr, setQr ] = React.useState('');\n  const [ error, setError ] = React.useState('');\n\n  const pageType = getPageType(router.pathname);\n\n  React.useEffect(() => {\n    if (isOpen) {\n      QRCode.toString(address.hash, SVG_OPTIONS, (error: Error | null | undefined, svg: string) => {\n        if (error) {\n          setError('We were unable to generate QR code.');\n          rollbar?.warn('QR code generation failed');\n          return;\n        }\n\n        setError('');\n        setQr(svg);\n        mixpanel.logEvent(mixpanel.EventTypes.QR_CODE, { 'Page type': pageType });\n      });\n    }\n  }, [ address.hash, isOpen, onClose, pageType, rollbar ]);\n\n  if (isLoading) {\n    return <Skeleton className={ className } w=\"36px\" h=\"32px\" borderRadius=\"base\"/>;\n  }\n\n  return (\n    <>\n      <Tooltip label=\"Click to view QR code\">\n        <IconButton\n          className={ className }\n          aria-label=\"Show QR code\"\n          variant=\"outline\"\n          size=\"sm\"\n          pl=\"6px\"\n          pr=\"6px\"\n          onClick={ onOpen }\n          icon={ <IconSvg name=\"qr_code\" boxSize={ 5 }/> }\n          flexShrink={ 0 }\n        />\n      </Tooltip>\n\n      { error && (\n        <Modal isOpen={ isOpen } onClose={ onClose } size={{ base: 'full', lg: 'sm' }}>\n          <ModalOverlay/>\n          <ModalContent>\n            <ModalBody mb={ 0 }>\n              <Alert status=\"warning\">{ error }</Alert>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      ) }\n      { !error && (\n        <LightMode>\n          <Modal isOpen={ isOpen } onClose={ onClose } size={{ base: 'full', lg: 'sm' }}>\n            <ModalOverlay/>\n            <ModalContent>\n              <ModalHeader fontWeight=\"500\" textStyle=\"h3\" mb={ 4 }>Address QR code</ModalHeader>\n              <ModalCloseButton/>\n              <ModalBody mb={ 0 }>\n                <AddressEntity\n                  mb={ 3 }\n                  fontWeight={ 500 }\n                  color=\"text\"\n                  address={ address }\n                  noLink\n                />\n                <Box p={ 4 } dangerouslySetInnerHTML={{ __html: qr }}/>\n              </ModalBody>\n            </ModalContent>\n          </Modal>\n        </LightMode>\n      ) }\n    </>\n  );\n};\n\nexport default React.memo(chakra(AddressQrCode));\n","import React from 'react';\n\nimport type { WalletType } from 'types/client/wallets';\nimport type { WalletProvider } from 'types/web3';\n\nimport config from 'configs/app';\n\nconst feature = config.features.web3Wallet;\n\nexport default function useProvider() {\n  const [ provider, setProvider ] = React.useState<WalletProvider>();\n  const [ wallet, setWallet ] = React.useState<WalletType>();\n\n  const initializeProvider = React.useMemo(() => async() => {\n    if (!feature.isEnabled) {\n      return;\n    }\n\n    if (!('ethereum' in window && window.ethereum)) {\n      if (feature.wallets.includes('metamask') && window.navigator.userAgent.includes('Firefox')) {\n        const { WindowPostMessageStream } = (await import('@metamask/post-message-stream'));\n        const { initializeProvider } = (await import('@metamask/providers'));\n\n        // workaround for MetaMask in Firefox\n        // Firefox blocks MetaMask injection script because of our CSP for 'script-src'\n        // so we have to inject it manually while the issue is not fixed\n        // https://github.com/MetaMask/metamask-extension/issues/3133#issuecomment-1025641185\n        const metamaskStream = new WindowPostMessageStream({\n          name: 'metamask-inpage',\n          target: 'metamask-contentscript',\n        });\n\n        // this will initialize the provider and set it as window.ethereum\n        initializeProvider({\n          connectionStream: metamaskStream as never,\n          shouldShimWeb3: true,\n        });\n      } else {\n        return;\n      }\n    }\n\n    // have to check again in case provider was not set as window.ethereum in the previous step for MM in FF\n    // and also it makes typescript happy\n    if (!('ethereum' in window && window.ethereum)) {\n      return;\n    }\n\n    // if user has multiple wallets installed, they all are injected in the window.ethereum.providers array\n    // if user has only one wallet, the provider is injected in the window.ethereum directly\n    const providers = Array.isArray(window.ethereum.providers) ? window.ethereum.providers : [ window.ethereum ];\n\n    for (const wallet of feature.wallets) {\n      const provider = providers.find((provider) => {\n        return (\n          // some wallets (e.g TokenPocket, Liquality, etc) try to look like MetaMask but they are not (not even close)\n          // so we have to check in addition the presence of the provider._events property\n          // found this hack in wagmi repo\n          // https://github.com/wagmi-dev/wagmi/blob/399b9eab8cfd698b49bfaa8456598dad9b597e0e/packages/connectors/src/types.ts#L65\n          // for now it's the only way to distinguish them\n          (wallet === 'metamask' && provider.isMetaMask && Boolean(provider._events)) ||\n          (wallet === 'coinbase' && provider.isCoinbaseWallet) ||\n          (wallet === 'token_pocket' && provider.isTokenPocket)\n        );\n      });\n\n      if (provider) {\n        setProvider(provider);\n        setWallet(wallet);\n        break;\n      }\n    }\n  }, []);\n\n  React.useEffect(() => {\n    initializeProvider();\n  }, [ initializeProvider ]);\n\n  return { provider, wallet };\n}\n","import { get } from 'es-toolkit/compat';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport getErrorObj from 'lib/errors/getErrorObj';\n\nimport useProvider from './useProvider';\n\nexport default function useAddOrSwitchChain() {\n  const { wallet, provider } = useProvider();\n\n  return React.useCallback(async() => {\n    if (!wallet || !provider) {\n      return;\n    }\n\n    const hexadecimalChainId = '0x' + Number(config.chain.id).toString(16);\n\n    try {\n      return await provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [ { chainId: hexadecimalChainId } ],\n      });\n    } catch (error) {\n\n      const errorObj = getErrorObj(error);\n      const code = errorObj && 'code' in errorObj ? errorObj.code : undefined;\n      const originalErrorCode = get(errorObj, 'data.originalError.code');\n\n      // This error code indicates that the chain has not been added to Wallet.\n      if (code === 4902 || originalErrorCode === 4902) {\n        const params = [ {\n          chainId: hexadecimalChainId,\n          chainName: config.chain.name,\n          nativeCurrency: {\n            name: config.chain.currency.name,\n            symbol: config.chain.currency.symbol,\n            decimals: config.chain.currency.decimals,\n          },\n          rpcUrls: config.chain.rpcUrls,\n          blockExplorerUrls: [ config.app.baseUrl ],\n        } ] as never;\n        // in wagmi types for wallet_addEthereumChain method is not provided\n\n        return await provider.request({\n          method: 'wallet_addEthereumChain',\n          params: params,\n        });\n      }\n\n      throw error;\n    }\n  }, [ provider, wallet ]);\n}\n","import type { WalletType, WalletInfo } from 'types/client/wallets';\n\nexport const WALLETS_INFO: Record<Exclude<WalletType, 'none'>, WalletInfo> = {\n  metamask: {\n    name: 'MetaMask',\n    icon: 'wallets/metamask',\n  },\n  coinbase: {\n    name: 'Coinbase Wallet',\n    icon: 'wallets/coinbase',\n  },\n  token_pocket: {\n    name: 'TokenPocket',\n    icon: 'wallets/token-pocket',\n  },\n};\n","import { Box, chakra, IconButton, Tooltip } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenInfo } from 'types/api/token';\n\nimport config from 'configs/app';\nimport useToast from 'lib/hooks/useToast';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport useAddOrSwitchChain from 'lib/web3/useAddOrSwitchChain';\nimport useProvider from 'lib/web3/useProvider';\nimport { WALLETS_INFO } from 'lib/web3/wallets';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst feature = config.features.web3Wallet;\n\ninterface Props {\n  className?: string;\n  token: TokenInfo;\n  isLoading?: boolean;\n  variant?: 'icon' | 'button';\n  iconSize?: number;\n}\n\nconst AddressAddToWallet = ({ className, token, isLoading, variant = 'icon', iconSize = 6 }: Props) => {\n  const toast = useToast();\n  const { provider, wallet } = useProvider();\n  const addOrSwitchChain = useAddOrSwitchChain();\n\n  const handleClick = React.useCallback(async() => {\n    if (!wallet) {\n      return;\n    }\n\n    try {\n      // switch to the correct network otherwise the token will be added to the wrong one\n      await addOrSwitchChain();\n\n      const wasAdded = await provider?.request?.({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20', // Initially only supports ERC20, but eventually more!\n          options: {\n            address: token.address,\n            symbol: token.symbol || '',\n            decimals: Number(token.decimals) || 18,\n            image: token.icon_url || '',\n          },\n        },\n      });\n\n      if (wasAdded) {\n        toast({\n          position: 'top-right',\n          title: 'Success',\n          description: 'Successfully added token to your wallet',\n          status: 'success',\n          variant: 'subtle',\n          isClosable: true,\n        });\n\n        mixpanel.logEvent(mixpanel.EventTypes.ADD_TO_WALLET, {\n          Target: 'token',\n          Wallet: wallet,\n          Token: token.symbol || '',\n        });\n      }\n    } catch (error) {\n      toast({\n        position: 'top-right',\n        title: 'Error',\n        description: (error as Error)?.message || 'Something went wrong',\n        status: 'error',\n        variant: 'subtle',\n        isClosable: true,\n      });\n    }\n  }, [ toast, token, provider, wallet, addOrSwitchChain ]);\n\n  if (!provider || !wallet) {\n    return null;\n  }\n\n  if (isLoading) {\n    return <Skeleton className={ className } boxSize={ iconSize } borderRadius=\"base\"/>;\n  }\n\n  if (!feature.isEnabled) {\n    return null;\n  }\n\n  if (variant === 'button') {\n    return (\n      <Tooltip label={ `Add token to ${ WALLETS_INFO[wallet].name }` }>\n        <IconButton\n          className={ className }\n          aria-label=\"Add token to wallet\"\n          variant=\"outline\"\n          size=\"sm\"\n          px={ 1 }\n          onClick={ handleClick }\n          icon={ <IconSvg name={ WALLETS_INFO[wallet].icon } boxSize={ 6 }/> }\n          flexShrink={ 0 }\n        />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Tooltip label={ `Add token to ${ WALLETS_INFO[wallet].name }` }>\n      <Box className={ className } display=\"inline-flex\" cursor=\"pointer\" onClick={ handleClick } flexShrink={ 0 } aria-label=\"Add token to wallet\">\n        <IconSvg name={ WALLETS_INFO[wallet].icon } boxSize={ iconSize }/>\n      </Box>\n    </Tooltip>\n  );\n};\n\nexport default React.memo(chakra(AddressAddToWallet));\n","import { useColorModeValue, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst NftFallback = ({ className }: { className?: string }) => {\n  return (\n    <IconSvg\n      className={ className }\n      name=\"nft_shield\"\n      p=\"50px\"\n      color={ useColorModeValue('blackAlpha.500', 'whiteAlpha.500') }\n      bgColor={ useColorModeValue('blackAlpha.50', 'whiteAlpha.50') }\n    />\n  );\n};\n\nexport default chakra(NftFallback);\n","export type MediaType = 'image' | 'video' | 'html';\n\nexport type SrcType = 'url' | 'blob';\n\nconst IMAGE_EXTENSIONS = [\n  '.jpg', 'jpeg',\n  '.png',\n  '.gif',\n  '.svg',\n];\n\nconst VIDEO_EXTENSIONS = [\n  '.mp4',\n  '.webm',\n  '.ogg',\n];\n\nexport function getPreliminaryMediaType(url: string): MediaType | undefined {\n  if (IMAGE_EXTENSIONS.some((ext) => url.endsWith(ext))) {\n    return 'image';\n  }\n\n  if (url.startsWith('data:image')) {\n    return 'image';\n  }\n\n  if (VIDEO_EXTENSIONS.some((ext) => url.endsWith(ext))) {\n    return 'video';\n  }\n}\n\nexport const mediaStyleProps = {\n  transitionProperty: 'transform',\n  transitionDuration: 'normal',\n  transitionTimingFunction: 'ease',\n  cursor: 'pointer',\n  _hover: {\n    base: {},\n    lg: {\n      transform: 'scale(1.2)',\n    },\n  },\n};\n\nexport const videoPlayProps = {\n  disablePictureInPicture: true,\n  loop: true,\n  muted: true,\n  playsInline: true,\n};\n","import { chakra, LinkOverlay } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { mediaStyleProps } from './utils';\n\ninterface Props {\n  src: string;\n  onLoad: () => void;\n  onError: () => void;\n  onClick?: () => void;\n}\n\nconst NftHtml = ({ src, onLoad, onError, onClick }: Props) => {\n  return (\n    <LinkOverlay\n      onClick={ onClick }\n      { ...mediaStyleProps }\n    >\n      <chakra.iframe\n        src={ src }\n        h=\"100%\"\n        w=\"100%\"\n        sandbox=\"allow-scripts\"\n        onLoad={ onLoad }\n        onError={ onError }\n      />\n    </LinkOverlay>\n  );\n};\n\nexport default NftHtml;\n","import {\n  Modal,\n  ModalContent,\n  ModalCloseButton,\n  ModalOverlay,\n} from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nconst NftMediaFullscreenModal = ({ isOpen, onClose, children }: Props) => {\n  return (\n    <Modal isOpen={ isOpen } onClose={ onClose } motionPreset=\"none\">\n      <ModalOverlay/>\n      <ModalContent w=\"unset\" maxW=\"100vw\" p={ 0 } background=\"none\" boxShadow=\"none\">\n        <ModalCloseButton position=\"fixed\" top={{ base: 2.5, lg: 8 }} right={{ base: 2.5, lg: 8 }} color=\"whiteAlpha.800\"/>\n        { children }\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default NftMediaFullscreenModal;\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport NftMediaFullscreenModal from './NftMediaFullscreenModal';\n\ninterface Props {\n  src: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NftHtmlFullscreen = ({ src, isOpen, onClose }: Props) => {\n  return (\n    <NftMediaFullscreenModal isOpen={ isOpen } onClose={ onClose }>\n      <chakra.iframe\n        w=\"90vw\"\n        h=\"90vh\"\n        src={ src }\n        sandbox=\"allow-scripts\"\n      />\n    </NftMediaFullscreenModal>\n  );\n};\n\nexport default NftHtmlFullscreen;\n","import { Image } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { mediaStyleProps } from './utils';\n\ninterface Props {\n  src: string;\n  srcSet?: string;\n  onLoad: () => void;\n  onError: () => void;\n  onClick?: () => void;\n}\n\nconst NftImage = ({ src, srcSet, onLoad, onError, onClick }: Props) => {\n  return (\n    <Image\n      w=\"100%\"\n      h=\"100%\"\n      src={ src }\n      srcSet={ srcSet }\n      alt=\"Token instance image\"\n      onError={ onError }\n      onLoad={ onLoad }\n      onClick={ onClick }\n      { ...mediaStyleProps }\n    />\n  );\n};\n\nexport default NftImage;\n","import {\n  Image,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport NftMediaFullscreenModal from './NftMediaFullscreenModal';\n\ninterface Props {\n  src: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NftImageFullscreen = ({ src, isOpen, onClose }: Props) => {\n  const imgRef = React.useRef<HTMLImageElement>(null);\n  const [ hasDimensions, setHasDimensions ] = React.useState<boolean>(true);\n\n  const checkWidth = React.useCallback(() => {\n    if (imgRef.current?.getBoundingClientRect().width === 0) {\n      setHasDimensions(false);\n    }\n  }, [ ]);\n\n  return (\n    <NftMediaFullscreenModal isOpen={ isOpen } onClose={ onClose }>\n      <Image\n        src={ src }\n        alt=\"Token instance image\"\n        maxH=\"90vh\"\n        maxW=\"90vw\"\n        ref={ imgRef }\n        onLoad={ checkWidth }\n        { ...(hasDimensions ? {} : { width: '90vw', height: '90vh' }) }\n      />\n    </NftMediaFullscreenModal>\n  );\n};\n\nexport default NftImageFullscreen;\n","import { chakra } from '@chakra-ui/react';\nimport { verifiedFetch } from '@helia/verified-fetch';\nimport React from 'react';\n\nimport type { TokenInstance } from 'types/api/token';\n\nimport config from 'configs/app';\n\nimport { mediaStyleProps, videoPlayProps } from './utils';\n\ninterface Props {\n  src: string;\n  instance: TokenInstance;\n  autoPlay?: boolean;\n  onLoad: () => void;\n  onError: () => void;\n  onClick?: () => void;\n}\n\nconst NftVideo = ({ src, instance, autoPlay = true, onLoad, onError, onClick }: Props) => {\n  const ref = React.useRef<HTMLVideoElement>(null);\n  const controller = React.useRef<AbortController | null>(null);\n\n  const fetchVideoPoster = React.useCallback(async() => {\n    if (!ref.current) {\n      return;\n    }\n\n    try {\n      if (!config.UI.views.nft.verifiedFetch.isEnabled) {\n        throw new Error('Helia verified fetch is disabled');\n      }\n      const imageUrl = typeof instance.metadata?.image === 'string' ? instance.metadata.image : undefined;\n      if (!imageUrl) {\n        throw new Error('No image URL found');\n      }\n      controller.current = new AbortController();\n      const response = await verifiedFetch(imageUrl, { signal: controller.current.signal });\n      const blob = await response.blob();\n      const src = URL.createObjectURL(blob);\n      ref.current.poster = src;\n\n      // we want to call onLoad right after the poster is loaded\n      // otherwise, the skeleton will be shown underneath the element until the video is loaded\n      onLoad();\n    } catch (error) {\n      const src = instance.thumbnails?.['500x500'] || instance.thumbnails?.original || instance.image_url;\n      if (src) {\n        ref.current.poster = src;\n\n        // we want to call onLoad right after the poster is loaded\n        // otherwise, the skeleton will be shown underneath the element until the video is loaded\n        const poster = new Image();\n        poster.src = ref.current.poster;\n        poster.onload = onLoad;\n      }\n    }\n  }, [ instance.image_url, instance.metadata?.image, instance.thumbnails, onLoad ]);\n\n  React.useEffect(() => {\n    !autoPlay && fetchVideoPoster();\n    return () => {\n      controller.current?.abort();\n    };\n  // run only on mount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleMouseEnter = React.useCallback(() => {\n    !autoPlay && ref.current?.play();\n  }, [ autoPlay ]);\n\n  const handleMouseLeave = React.useCallback(() => {\n    !autoPlay && ref.current?.pause();\n  }, [ autoPlay ]);\n\n  return (\n    <chakra.video\n      ref={ ref }\n      { ...videoPlayProps }\n      autoPlay={ autoPlay }\n      src={ src }\n      onCanPlayThrough={ onLoad }\n      onError={ onError }\n      borderRadius=\"md\"\n      onClick={ onClick }\n      onMouseEnter={ handleMouseEnter }\n      onMouseLeave={ handleMouseLeave }\n      { ...mediaStyleProps }\n    />\n  );\n};\n\nexport default chakra(NftVideo);\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport NftMediaFullscreenModal from './NftMediaFullscreenModal';\nimport { videoPlayProps } from './utils';\n\ninterface Props {\n  src: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NftVideoFullscreen = ({ src, isOpen, onClose }: Props) => {\n  return (\n    <NftMediaFullscreenModal isOpen={ isOpen } onClose={ onClose }>\n      <chakra.video\n        { ...videoPlayProps }\n        src={ src }\n        maxH=\"90vh\"\n        maxW=\"90vw\"\n        autoPlay={ true }\n      />\n    </NftMediaFullscreenModal>\n  );\n};\n\nexport default NftVideoFullscreen;\n","import { verifiedFetch } from '@helia/verified-fetch';\nimport { useQuery } from '@tanstack/react-query';\nimport React from 'react';\n\nimport type { TokenInstance } from 'types/api/token';\n\nimport type { StaticRoute } from 'nextjs-routes';\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\nimport type { ResourceError } from 'lib/api/resources';\nimport useFetch from 'lib/hooks/useFetch';\n\nimport type { MediaType, SrcType } from './utils';\nimport { getPreliminaryMediaType } from './utils';\n\ninterface Params {\n  data: TokenInstance;\n  isEnabled: boolean;\n}\n\ninterface AssetsData {\n  imageUrl: string | undefined;\n  animationUrl: string | undefined;\n}\n\ntype TransportType = 'http' | 'ipfs';\n\ntype ReturnType =\n{\n  src: string;\n  mediaType: MediaType;\n  srcType: SrcType;\n} |\n{\n  mediaType: undefined;\n} |\nnull;\n\nexport default function useNftMediaInfo({ data, isEnabled }: Params): ReturnType | null {\n\n  const assetsData = composeAssetsData(data);\n  const httpPrimaryQuery = useNftMediaTypeQuery(assetsData.http.animationUrl, isEnabled);\n  const ipfsPrimaryQuery = useFetchAssetViaIpfs(\n    assetsData.ipfs.animationUrl,\n    httpPrimaryQuery.data?.mediaType,\n    isEnabled && (httpPrimaryQuery.data === null || Boolean(httpPrimaryQuery.data?.mediaType)),\n  );\n  const httpSecondaryQuery = useNftMediaTypeQuery(assetsData.http.imageUrl, isEnabled && !httpPrimaryQuery.data && !ipfsPrimaryQuery);\n  const ipfsSecondaryQuery = useFetchAssetViaIpfs(\n    assetsData.ipfs.imageUrl,\n    httpSecondaryQuery.data?.mediaType,\n    isEnabled && (httpSecondaryQuery.data === null || Boolean(httpSecondaryQuery.data?.mediaType)),\n  );\n\n  return React.useMemo(() => {\n    return ipfsPrimaryQuery || httpPrimaryQuery.data || ipfsSecondaryQuery || httpSecondaryQuery.data || null;\n  }, [ httpPrimaryQuery.data, httpSecondaryQuery.data, ipfsPrimaryQuery, ipfsSecondaryQuery ]);\n}\n\nfunction composeAssetsData(data: TokenInstance): Record<TransportType, AssetsData> {\n  return {\n    http: {\n      imageUrl: data.image_url || undefined,\n      animationUrl: data.animation_url || undefined,\n    },\n    ipfs: {\n      imageUrl: typeof data.metadata?.image === 'string' ? data.metadata.image : undefined,\n      animationUrl: typeof data.metadata?.animation_url === 'string' ? data.metadata.animation_url : undefined,\n    },\n  };\n}\n\n// As of now we fetch only images via IPFS because video streaming has performance issues\n// Also, we don't want to store the entire file content in the ReactQuery cache, so we don't use useQuery hook here\nfunction useFetchAssetViaIpfs(url: string | undefined, mediaType: MediaType | undefined, isEnabled: boolean): ReturnType | null {\n  const [ result, setResult ] = React.useState<ReturnType | null>({ mediaType: undefined });\n  const controller = React.useRef<AbortController | null>(null);\n\n  const fetchAsset = React.useCallback(async(url: string) => {\n    try {\n      controller.current = new AbortController();\n      const response = await verifiedFetch(url, { signal: controller.current.signal });\n      if (response.status === 200) {\n        const blob = await response.blob();\n        const src = URL.createObjectURL(blob);\n        setResult({ mediaType: 'image', src, srcType: 'blob' });\n        return;\n      }\n    } catch (error) {}\n    setResult(null);\n  }, []);\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      if (config.UI.views.nft.verifiedFetch.isEnabled && mediaType === 'image' && url && url.includes('ipfs')) {\n        fetchAsset(url);\n      } else {\n        setResult(null);\n      }\n    } else {\n      setResult({ mediaType: undefined });\n    }\n  }, [ fetchAsset, url, mediaType, isEnabled ]);\n\n  React.useEffect(() => {\n    return () => {\n      controller.current?.abort();\n    };\n  }, []);\n\n  return result;\n}\n\nfunction useNftMediaTypeQuery(url: string | undefined, enabled: boolean) {\n  const fetch = useFetch();\n\n  return useQuery<ReturnType | null, ResourceError<unknown>, ReturnType | null>({\n    queryKey: [ 'nft-media-type', url ],\n    queryFn: async() => {\n      if (!url) {\n        return null;\n      }\n\n      // media could be either image, gif, video or html-page\n      // so we pre-fetch the resources in order to get its content type\n      // have to do it via Node.js due to strict CSP for connect-src\n      // but in order not to abuse our server firstly we check file url extension\n      // and if it is valid we will trust it and display corresponding media component\n\n      const preliminaryType = getPreliminaryMediaType(url);\n\n      if (preliminaryType) {\n        return { mediaType: preliminaryType, src: url, srcType: 'url' };\n      }\n\n      const mediaType = await (async() => {\n        try {\n          const mediaTypeResourceUrl = route({ pathname: '/node-api/media-type' as StaticRoute<'/api/media-type'>['pathname'], query: { url } });\n          const response = await fetch<{ type: MediaType | undefined }, ResourceError>(mediaTypeResourceUrl, undefined, { resource: 'media-type' });\n\n          return 'type' in response ? response.type : undefined;\n        } catch (error) {\n          return;\n        }\n      })();\n\n      if (!mediaType) {\n        return null;\n      }\n\n      return { mediaType, src: url, srcType: 'url' };\n    },\n    enabled,\n    placeholderData: { mediaType: undefined },\n    staleTime: Infinity,\n  });\n}\n","import { AspectRatio, chakra, useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport type { TokenInstance } from 'types/api/token';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\nimport NftFallback from './NftFallback';\nimport NftHtml from './NftHtml';\nimport NftHtmlFullscreen from './NftHtmlFullscreen';\nimport NftImage from './NftImage';\nimport NftImageFullscreen from './NftImageFullscreen';\nimport NftVideo from './NftVideo';\nimport NftVideoFullscreen from './NftVideoFullscreen';\nimport useNftMediaInfo from './useNftMediaInfo';\nimport { mediaStyleProps } from './utils';\n\ninterface Props {\n  data: TokenInstance;\n  className?: string;\n  isLoading?: boolean;\n  withFullscreen?: boolean;\n  autoplayVideo?: boolean;\n}\n\nconst NftMedia = ({ data, className, isLoading, withFullscreen, autoplayVideo }: Props) => {\n  const [ isMediaLoading, setIsMediaLoading ] = React.useState(true);\n  const [ isLoadingError, setIsLoadingError ] = React.useState(false);\n\n  const { ref, inView } = useInView({ triggerOnce: true });\n\n  const mediaInfo = useNftMediaInfo({ data, isEnabled: !isLoading && inView });\n\n  React.useEffect(() => {\n    if (!isLoading && !mediaInfo) {\n      setIsMediaLoading(false);\n      setIsLoadingError(true);\n    }\n  }, [ isLoading, mediaInfo ]);\n\n  const handleMediaLoaded = React.useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n\n  const handleMediaLoadError = React.useCallback(() => {\n    setIsMediaLoading(false);\n    setIsLoadingError(true);\n  }, []);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const content = (() => {\n    if (isLoading) {\n      return null;\n    }\n\n    if (!mediaInfo || isLoadingError) {\n      const styleProps = withFullscreen ? {} : mediaStyleProps;\n      return <NftFallback { ...styleProps }/>;\n    }\n\n    const props = {\n      onLoad: handleMediaLoaded,\n      onError: handleMediaLoadError,\n      ...(withFullscreen ? { onClick: onOpen } : {}),\n    };\n\n    switch (mediaInfo.mediaType) {\n      case 'video': {\n        return <NftVideo { ...props } src={ mediaInfo.src } autoPlay={ autoplayVideo } instance={ data }/>;\n      }\n      case 'html':\n        return <NftHtml { ...props } src={ mediaInfo.src }/>;\n      case 'image': {\n        if (mediaInfo.srcType === 'url' && data.thumbnails) {\n          const srcSet = data.thumbnails['250x250'] && data.thumbnails['500x500'] ? `${ data.thumbnails['500x500'] } 2x` : undefined;\n          const src = (srcSet ? data.thumbnails['250x250'] : undefined) || data.thumbnails['500x500'] || data.thumbnails.original;\n          if (src) {\n            return <NftImage { ...props } src={ src } srcSet={ srcSet }/>;\n          }\n        }\n\n        return <NftImage { ...props } src={ mediaInfo.src }/>;\n      }\n      default:\n        return null;\n    }\n  })();\n\n  const modal = (() => {\n    if (!mediaInfo || !withFullscreen || isLoading) {\n      return null;\n    }\n\n    const props = {\n      isOpen,\n      onClose,\n    };\n\n    switch (mediaInfo.mediaType) {\n      case 'video':\n        return <NftVideoFullscreen { ...props } src={ mediaInfo.src }/>;\n      case 'html':\n        return <NftHtmlFullscreen { ...props } src={ mediaInfo.src }/>;\n      case 'image': {\n        const src = mediaInfo.srcType === 'url' && data.thumbnails?.original ? data.thumbnails.original : mediaInfo.src;\n        return <NftImageFullscreen { ...props } src={ src }/>;\n      }\n      default:\n        return null;\n    }\n  })();\n\n  return (\n    <AspectRatio\n      ref={ ref }\n      className={ className }\n      ratio={ 1 / 1 }\n      overflow=\"hidden\"\n      borderRadius=\"md\"\n      objectFit=\"contain\"\n      isolation=\"isolate\"\n      sx={{\n        '&>img, &>video': {\n          objectFit: 'contain',\n        },\n      }}\n    >\n      <>\n        { content }\n        { modal }\n        { isMediaLoading && <Skeleton position=\"absolute\" left={ 0 } top={ 0 } w=\"100%\" h=\"100%\" zIndex=\"1\"/> }\n      </>\n    </AspectRatio>\n  );\n};\n\nexport default chakra(NftMedia);\n"],"names":["useIsMounted","isMounted","setIsMounted","React","ADDRESS_INFO","block_number_balance_updated_at","coin_balance","creation_transaction_hash","creator_address_hash","ADDRESS_HASH","exchange_rate","has_decompiled_code","has_logs","has_token_transfers","has_tokens","has_validated_blocks","hash","implementations","address","name","is_contract","is_verified","token","TOKEN_INFO_ERC_20","private_tags","public_tags","watchlist_names","watchlist_address_id","ens_domain_name","gas_usage_count","token_transfers_count","transactions_count","validations_count","internal_transactions_count","logs_count","token_balances_count","withdrawals_count","transaction_count","block_number","block_timestamp","delta","transaction_hash","TX_HASH","value","token_id","token_instance","TOKEN_INFO_ERC_721","TOKEN_INSTANCE","ADDRESS_NFT_1155","token_type","TOKEN_INFO_ERC_1155","TOKEN_INFO_ERC_404","ADDRESS_COLLECTION","amount","token_instances","Array","fill","schema","MUD_SCHEMA","table","MUD_TABLE","type","block_hash","account","ADDRESS_PARAMS","epoch_number","associated_account","table_full_name","table_id","table_name","table_namespace","table_type","key_names","key_types","value_names","value_types","SVG_OPTIONS","margin","chakra","AddressQrCode","className","isLoading","isOpen","onOpen","onClose","useDisclosure","router","useRouter","rollbar","useRollbar","qr","setQr","error","setError","pageType","getPageType","pathname","QRCode","svg","warn","mixpanel","QR_CODE","Skeleton","w","h","borderRadius","Tooltip","label","IconButton","aria-label","variant","size","pl","pr","onClick","icon","IconSvg","boxSize","flexShrink","Modal","base","lg","ModalOverlay","ModalContent","ModalBody","mb","Alert","status","LightMode","ModalHeader","fontWeight","textStyle","ModalCloseButton","AddressEntity","color","noLink","Box","p","dangerouslySetInnerHTML","__html","feature","config","features","web3Wallet","useProvider","provider","setProvider","wallet","setWallet","initializeProvider","isEnabled","window","ethereum","wallets","includes","navigator","userAgent","WindowPostMessageStream","connectionStream","metamaskStream","target","shouldShimWeb3","providers","isArray","find","isMetaMask","Boolean","_events","isCoinbaseWallet","isTokenPocket","WALLETS_INFO","metamask","coinbase","token_pocket","AddressAddToWallet","iconSize","toast","useToast","addOrSwitchChain","useAddOrSwitchChain","hexadecimalChainId","Number","chain","id","toString","request","method","params","chainId","errorObj","getErrorObj","code","undefined","originalErrorCode","get","chainName","nativeCurrency","currency","symbol","decimals","rpcUrls","blockExplorerUrls","app","baseUrl","handleClick","options","image","icon_url","position","title","description","isClosable","ADD_TO_WALLET","Target","Wallet","Token","message","px","display","cursor","NftFallback","useColorModeValue","bgColor","IMAGE_EXTENSIONS","VIDEO_EXTENSIONS","mediaStyleProps","transitionProperty","transitionDuration","transitionTimingFunction","_hover","transform","videoPlayProps","disablePictureInPicture","loop","muted","playsInline","src","NftHtml","onLoad","onError","LinkOverlay","iframe","sandbox","NftMediaFullscreenModal","children","motionPreset","maxW","background","boxShadow","top","right","NftHtmlFullscreen","NftImage","srcSet","Image","alt","NftImageFullscreen","imgRef","hasDimensions","setHasDimensions","checkWidth","current","getBoundingClientRect","width","maxH","ref","height","instance","NftVideo","autoPlay","controller","fetchVideoPoster","UI","views","nft","verifiedFetch","imageUrl","metadata","Error","AbortController","response","signal","blob","URL","createObjectURL","poster","thumbnails","original","image_url","onload","abort","handleMouseEnter","play","handleMouseLeave","pause","video","onCanPlayThrough","onMouseEnter","onMouseLeave","NftVideoFullscreen","useFetchAssetViaIpfs","url","mediaType","result","setResult","fetchAsset","srcType","useNftMediaTypeQuery","enabled","fetch","useFetch","useQuery","queryKey","queryFn","preliminaryType","some","endsWith","getPreliminaryMediaType","ext","startsWith","mediaTypeResourceUrl","route","query","resource","placeholderData","staleTime","Infinity","NftMedia","data","withFullscreen","autoplayVideo","isMediaLoading","setIsMediaLoading","isLoadingError","setIsLoadingError","inView","useInView","triggerOnce","mediaInfo","useNftMediaInfo","httpPrimaryQuery","httpSecondaryQuery","assetsData","http","composeAssetsData","animationUrl","animation_url","ipfs","ipfsPrimaryQuery","ipfsSecondaryQuery","handleMediaLoaded","handleMediaLoadError","content","styleProps","props","modal","AspectRatio","ratio","overflow","objectFit","isolation","sx","left","zIndex"],"sourceRoot":"","ignoreList":[]}
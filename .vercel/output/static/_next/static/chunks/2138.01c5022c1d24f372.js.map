{"version":3,"file":"static/chunks/2138.01c5022c1d24f372.js","mappings":"6HAEe,SAASA,EAAoBC,CAA8B,EACxE,GAAM,CAAEC,EAAkBC,EAAqB,CAAGC,EAAAA,QAAc,EAACC,CAAQJ,GAQzE,OANAG,EAAAA,SAAe,CAAC,KACTH,GACHE,GAAoB,EAExB,EAAG,CAAEF,EAAW,EAETC,CACT,gFCPO,IAAMI,EAAkC,CAC7CC,GAAI,qEACJC,KAAM,gBACNC,OAAQ,CACN,CACEF,GAAI,wBACJG,cAAeC,EAAAA,CAAYA,CAC3BC,KAAMC,EAAAA,EAAc,CAACC,mBACvB,EACD,CACDC,MAAOC,EAAAA,CAAcA,CACrBC,iBAAkBD,EAAAA,CAAcA,CAChCE,WAAYF,EAAAA,CAAcA,CAC1BG,kBAAmB,2BACnBC,YAAa,2BACbC,gBAAiB,CACfC,IAAKX,EAAAA,CAAYA,EAEnBY,cAAUC,EACVC,wBAAwB,EACxBC,iBAAiB,CACnB,EAAE,EAEgD,CAChDC,iBAAkBC,EAAAA,EAAOA,CACzBC,UAAW,8BACXC,aAAcd,EAAAA,CAAcA,CAC5Be,OAAQ,YACV,EAAE,0CC/BK,IAAMpB,EAAe,6CAA6C,EAE7B,CAC1CqB,KAAMrB,EACNsB,gBAAiB,KACjBC,aAAa,EACbC,YAAa,KACb3B,KAAM,KACN4B,aAAc,EAAE,CAChBC,YAAa,EAAE,CACfC,gBAAiB,EAAE,CACnBC,gBAAiB,IACnB,EAAE,sFCTK,IAAMX,EAAU,qEAAqE,EAE7D,CAC7BC,UAAW,8BACXW,IAAK,CACH5B,KAAM,SACN6B,MAAO,kBACT,EACAC,UAAW,QACXC,aAAc,QACdC,OAAQ,KACRC,OAAQ,cACRC,cAAe,GACflC,KAAM,EACNmC,cAAe,UACfC,GAAIhC,EAAAA,CAAcA,CAClBiC,sBAAuB,KACvBC,gBAAiB,KACjBC,OAAQ,UACRnB,KAAM,qEACNoB,UAAW,eACXC,aAAc,KACdC,iBAAkB,KAClBC,KAAMvC,EAAAA,CAAcA,CACpBwC,gBAAiB,KACjBC,kBAAmB,CACjB,gBACD,CACDC,SAAU,QACVC,iBAAkB,KAClBC,SAAU,EACVC,MAAO,OACPC,oCAAoC,EACpCC,QAAS,EAAE,CACXC,cAAe,KACfC,0BAA0B,EAC1BC,UAAW,KACXzB,MAAO,uBACP0B,yBAA0B,KAC1BC,cAAe,KACfC,sBAAuB,CACrB,EACA,MACD,CACDC,gBAAiB,IACnB,EAAE,EAEsC,CACtC,GAAGC,CAAE,CACLC,mBAAoB,MACpBC,oBAAqB,qEACrBC,aAAc,yBACdC,kBAAmB,oEACrB,EAAE,EAE6C,EAAE,CAAC,EAEN,CAC1CC,2BAA4B,OAC5BC,yBAA0B,iBAC1BC,yBAA0B,uBAC1BC,uBAAwB,QAC1B,EAAE,kFCvCF,MAAe3E,EAAAA,IAAU,CAnBM,OAAC,MAAE4E,CAAI,CAAS,GAC7C,GAAI,CAACA,CAkB0CC,CAjB7C,CAiB8C,GAlBrC,GACF,KAKT,GAFmBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAACF,GAAMG,EAEf,MAFuB,CAACD,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,IAG3C,MAAO,UAACE,EAAAA,CAAMA,CAACC,IAAI,EAACC,MAAM,mBAAU,YAGtC,IAAMC,EAAOL,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAACF,GAAMO,IAAI,CAACL,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,GAAI,cACvC,EAAW,GACF,CADM,EACN,QAACE,EAAAA,CAAMA,CAACC,IAAI,EAACC,MAAM,oBAAYC,EAAM,gBAGvC,WAACH,EAAAA,CAAMA,CAACC,IAAI,EAACC,MAAM,2BAAiB,WAAUJ,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAACF,GAAMQ,OAAO,KAC1E,+XClBO,IAAMC,EAA0C,CACrD,CAAEC,MAAO,UAAWjD,WAAOjB,CAAU,EACrC,CAAEkE,MAAO,2BAA4BjD,MAAO,wBAAyB,EACrE,CAAEiD,MAAO,0BAA2BjD,MAAO,uBAAwB,EACpE,CAMYkD,EAAmB,KAA0CC,IAAI,MAACpE,EAJb,CAChEL,EAG2BwE,MAA6DE,UAHrE,CAAE,IAGkF,qBAHxD,6BAAyBrE,EAAW,GCwJrF,EAAepB,EAAAA,IAAU,CAtII,OAAC,YAC5B0F,CAAU,CAqImCC,EAAC,aApI9CC,CAAc,aACdC,CAAW,qBACXC,CAAmB,MACnBC,CAAI,cACJC,CAAY,WACZnG,CAAS,iBACToG,CAAe,YACfC,CAAU,eACVC,CAAa,sBACbC,CAAoB,yBACpBC,CAAuB,CACjB,GACAvG,EAAmBF,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACC,GAEvCyG,EACJ,UAACC,EAAAA,CAAWA,CAAAA,CACVC,EAAG,CAAEC,KAAM,OAAQC,GAAI,OAAQ,EAC/BC,KAAM,CAAEF,KAAM,OAAQC,GAAI,OAAQ,EAClCE,KAAK,KACLC,SAAWjB,EACXkB,YAAY,4BACZC,aAAerB,EACf7F,UAAYC,IAIVkH,EAAsBhH,EAAAA,WAAiB,CAAC,KAC5CqG,EAAwB,EAAE,CAC5B,EAAG,CAAEA,EAAyB,EAExBY,EAAqB,UAACC,EAAAA,EAAGA,CAAAA,CAACV,EAAE,OAAOW,kBAAkB,MAAMC,kBAAkB,UAAUC,GAAK,IAE5FC,EAAoBzB,EAAY0B,MAAM,EAAIpB,CAAAA,EAAiBA,EAAcoB,MAAM,CAAG,EAAInB,EAAqBmB,MAAM,EAAG,EAEpHC,EACJ,UAACC,EAAAA,CAAaA,CAAAA,CAACH,kBAAoBA,EAAoBI,aAAc,CAAEf,KAAM,QAASH,EAAG,aAAc,EAAG3G,UAAYC,WACpH,WAAC6H,MAAAA,WACGxB,GAAiBA,EAAcoB,MAAM,CAAG,GACxC,iCACE,WAACK,EAAAA,CAAIA,CAAAA,CAACC,eAAe,gBAAgBC,SAAS,KAAKC,GAAK,YACtD,UAACC,EAAAA,CAAIA,CAAAA,CAACC,WAAa,IAAMC,QAAQ,qBAAY,aAC7C,UAACC,EAAAA,CAAIA,CAAAA,CACHC,QAAUpB,EACV9B,MAAQiB,EAAcoB,MAAM,CAAG,EAAI,OAAS,iBAC5Cc,OAAQ,CACNnD,MAAOiB,EAAcoB,MAAM,CAAG,EAAI,eAAiB,gBACrD,WACD,aAIH,UAACe,EAAAA,CAAaA,CAAAA,CAAC1B,KAAK,KAAKvE,MAAQ+D,EAAuBmC,aAAenC,EAAuBS,SAAWR,WACvG,UAACmC,EAAAA,CAAMA,CAAAA,CAACC,IAAM,EAAIC,WAAW,sBACzBvC,EAAcwC,GAAG,CAAC,IAClB,IAAMC,EAAkBzH,EAAS0H,QAAQ,CAACF,GAAG,CAAEG,GAAW,IAAa,OAARA,IAAWC,IAAI,CAAC,KAC/E,MACE,UAACC,EAAAA,CAAQA,CAAAA,CAAqB3G,MAAQlB,EAAShB,EAAE,UAC/C,WAACyH,EAAAA,CAAIA,CAAAA,CAACc,WAAW,mBACf,UAACO,EAAAA,CAAKA,CAAAA,CACJC,IAAM/H,EAASgI,QAAQ,CACvBC,QAAU,EACVC,aAAa,KACbC,GAAK,EACLC,IAAM,GAAoB,OAAhBpI,EAASqI,KAAK,CAAE,kBAC1BC,SAAW,UAACC,EAAAA,CAAOA,CAAAA,CAACtJ,KAAK,WAAWgJ,QAAU,EAAIE,GAAK,IACvDK,iBAAmBxI,EAASgI,QAAQ,CAAG,UAAY,sBAErD,UAAClE,OAAAA,UAAO9D,EAASyI,UAAU,GAC3B,WAAC5E,EAAAA,CAAMA,CAACC,IAAI,EAACC,MAAM,iBAAiB2E,WAAW,gBAAM,IAAGjB,SAZ5CzH,EAAShB,EAAE,CAgB/B,OAGF8G,KAGN,WAACqB,EAAAA,CAAaA,CAAAA,CAAC1B,KAAK,KAAKC,SAAWf,EAAsBzD,MAAQwD,EAAc0C,aAAe1C,YAC7F,UAACmC,EAAAA,CAAIA,CAAAA,CAACE,QAAQ,YAAYD,WAAa,IAAMF,GAAK,EAAID,SAAS,cAAK,YACpE,UAACkB,EAAAA,CAAQA,CAAAA,CAAC3G,MAAM,WAAWyH,WAAa,CAAC7D,EAAkB8D,QAAQ,iBAAQ,aAG3E,UAACf,EAAAA,CAAQA,CAAAA,CACP3G,MAAM,cACN2H,GAAK,EACLF,WAAa,CAAC7D,EACd8D,QAAQ,iBACT,wBAGC9C,EACF,UAACe,EAAAA,CAAIA,CAAAA,CAACE,QAAQ,YAAYD,WAAa,IAAMF,GAAK,EAAID,SAAS,cAAK,WACpE,UAACkB,EAAAA,CAAQA,CAAAA,CAAC3G,MAAM,gBAAgB0H,QAAQ,iBAAQ,4BAQlDE,EACJ,UAACC,EAAAA,CAAIA,CAAAA,CACH9J,KAAK,uBACLmI,aAAexC,EACfoE,QAAU9E,EACVwB,SAAWb,CADWX,CAEtBxF,UAAYC,IAIhB,MACE,iCACE,WAACsK,EAAAA,CAAMA,CAAAA,CAACC,QAAU,EAAItC,GAAK,EAAIgC,QAAS,CAAEtD,KAAM,OAAQC,GAAI,MAAO,YAC/Dc,EACAyC,EACA3D,KAEJ,WAACgE,EAAAA,EAASA,CAAAA,CACRN,GAAK,CAAC,EACND,QAAS,CAAEtD,KAAMP,EAAWqE,SAAS,CAAG,OAAS,OAAQ7D,GAAI,MAAO,YAEpE,WAAC0D,EAAAA,CAAMA,CAAAA,CAACC,QAAU,EAAIN,QAAS,CAAEtD,KAAM,OAAQC,GAAI,MAAO,YACtDc,EACAlB,KAEJ,UAACkE,EAAAA,CAAUA,CAAAA,CAAG,GAAGtE,CAAU,CAAGuE,GAAG,cAIzC,yECnGA,MAAezK,EAAAA,IAAU,CAnDG,OAAC,MAC3BI,CAAI,MAkDwCsK,EAAC,GAjD7C7K,CAAS,CACTgB,iBAAkB8J,CAAe,CACjC5J,kBAAmB6J,CAAgB,CACnC5J,YAAa6J,CAAU,UACvB1J,CAAQ,CACF,GACN,MACE,WAAC2J,EAAAA,CAAkBA,CAACC,SAAS,YAC3B,UAACD,EAAAA,CAAkBA,CAACE,KAAK,EAACnL,UAAYA,WAAY,WAClD,UAACiL,EAAAA,CAAkBA,CAACG,KAAK,WACvB,UAACC,EAAAA,EAASA,CAAAA,CAACpC,OAAS1I,EAAOe,SAAWA,EAAWtB,UAAYA,EAAYoI,WAAa,QAGtF0C,GACA,iCACE,UAACG,EAAAA,CAAkBA,CAACE,KAAK,EAACnL,UAAYA,WAAY,YAClD,UAACiL,EAAAA,CAAkBA,CAACG,KAAK,WACvB,UAACE,EAAAA,EAAaA,CAAAA,CAACC,QAAUT,EAAkB9K,UAAYA,EAAYoI,WAAa,WAKpF2C,GACA,iCACE,UAACE,EAAAA,CAAkBA,CAACE,KAAK,EAACnL,UAAYA,WAAY,kBAClD,UAACiL,EAAAA,CAAkBA,CAACG,KAAK,WACvB,WAACI,EAAAA,CAAQA,CAAAA,CAACC,SAAW,CAACzL,YACpB,UAAC8H,MAAAA,UAAM7C,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC8F,GAAkBW,MAAM,CAAC,SACtC,WAAC5D,MAAAA,WAAI,IAAG7C,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC8F,GAAkBxF,OAAO,cAM7CyF,GACA,iCACE,UAACC,EAAAA,CAAkBA,CAACE,KAAK,EAACnL,UAAYA,WAAY,oBAClD,UAACiL,EAAAA,CAAkBA,CAACG,KAAK,WACvB,WAACI,EAAAA,CAAQA,CAAAA,CAACC,SAAW,CAACzL,EAAYgK,WAAW,qBAC3C,WAAClC,MAAAA,WAAM7C,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC+F,GAAYU,MAAM,CAAC,OAAQ,OACxC,UAAC1G,EAAAA,CAAsBA,CAAAA,CAACD,KAAOiG,cAO7C,yECZA,MAAe7K,EAAAA,IAAU,CArCI,OAAC,WAC5BH,CAAS,EAoCoC2L,EAAC,EAnC9CpL,CAAI,CACJS,iBAAkB8J,CAAe,CACjC5J,kBAAmB6J,CAAgB,CACnC5J,YAAa6J,CAAU,CACvB1J,UAAQ,CACF,GAEN,MACE,WAACsK,EAAAA,EAAEA,CAAAA,WACD,UAACC,EAAAA,EAAEA,CAAAA,CAACC,cAAc,kBAChB,UAACT,EAAAA,EAASA,CAAAA,CAACpC,OAAS1I,EAAOe,SAAWA,EAAWtB,UAAYA,EAAYoI,WAAa,QAExF,UAACyD,EAAAA,EAAEA,CAAAA,CAACC,cAAc,kBACdhB,GAAmB,UAACQ,EAAAA,EAAaA,CAAAA,CAACC,QAAUT,EAAkB9K,UAAYA,EAAYoI,WAAa,QAEvG,UAACyD,EAAAA,EAAEA,CAAAA,CAACC,cAAc,SAASC,GAAK,WAC5BhB,GACA,WAACS,EAAAA,CAAQA,CAAAA,CAACC,SAAW,CAACzL,YAClBiF,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC8F,GAAkBW,MAAM,CAAC,OACjC,WAACvG,EAAAA,CAAMA,CAACC,IAAI,EAACC,MAAM,2BAAiB,IAAGJ,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC8F,GAAkBxF,OAAO,WAI5E,UAACsG,EAAAA,EAAEA,CAAAA,CAACC,cAAc,kBACdd,GACA,WAACQ,EAAAA,CAAQA,CAAAA,CAACC,SAAW,CAACzL,EAAYgK,WAAW,qBAC3C,WAAC5E,OAAAA,WAAOH,CAAAA,EAAAA,EAAAA,CAAAA,CAAKA,CAAC+F,GAAYU,MAAM,CAAC,OAAQ,OACzC,UAAC1G,EAAAA,CAAsBA,CAAAA,CAACD,KAAOiG,WAM3C,GCIA,EAAe7K,EAAAA,IAAU,CAnCA,OAAC,MAAE6L,CAAI,GAmCWC,EAAC,MAnCVjM,CAAS,MAAEkG,CAAI,cAAEgG,CAAY,CAAS,GAChEC,EAAoBjG,OAAAA,EAAAA,KAAAA,EAAAA,EAAMkG,MAANlG,KAAiB,GAAGmG,QAAQ,CAAC,QAAS,iBAAmB,gBAEnF,MACE,WAACC,EAAAA,CAAKA,CAAAA,WACJ,UAACC,EAAAA,CAAKA,CAAAA,CAACC,IAAMC,EAAAA,EAAyBA,UACpC,WAACb,EAAAA,EAAEA,CAAAA,WACD,UAACc,EAAAA,EAAEA,CAAAA,CAACC,MAAM,eAAM,WAChB,UAACD,EAAAA,EAAEA,CAAAA,CAACC,MAAM,eAAM,YAChB,UAACD,EAAAA,EAAEA,CAAAA,CAACC,MAAM,MAAMZ,GAAK,WACnB,WAACzD,EAAAA,CAAIA,CAAAA,CAAC4B,QAAQ,OAAOrB,WAAW,SAASb,eAAe,aAAarE,SAAS,WAAWiJ,aAAW,oBAAoBrE,QAAU2D,YAC9HhG,OAAAA,EAAAA,KAAAA,EAAAA,EAAMmG,MAANnG,EAAc,CAAC,uBACf,UAAC2D,EAAAA,CAAOA,CAAAA,CACNtJ,KAAK,cACLgJ,QAAU,EACVsD,UAAYV,EACZ9G,MAAM,OACN1B,SAAS,WACTmJ,KAAO,CAAC,EACRN,IAAM,IAGV,UAACpH,OAAAA,UAAK,uBAGV,UAACsH,EAAAA,EAAEA,CAAAA,CAACC,MAAM,eAAM,yBAGpB,UAACI,EAAAA,CAAKA,CAAAA,gBACFf,EAAAA,KAAAA,EAAAA,EAAMgB,KAAK,CAAXhB,GAAe,CAAC,CAACiB,EAAMC,IAAU,UAACvB,EAAoBA,CAAiB,GAAGsB,CAAI,CAAGjN,UAAYA,GAAhCkN,QAIvE,GAJgEvB,wEC8MhE,OArOoB,SAsMEwB,EA/LgEC,EANpF,IAAMA,CAoOOC,CApOEC,CAAAA,EAAAA,EAAAA,KAoOSD,EAAC,EApOVC,CAASA,GAElBC,EAAIC,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACJ,EAAOK,KAAK,CAAClN,IAAI,GAAKiN,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACJ,EAAOK,KAAK,CAAClC,OAAO,EACtFmC,EAAUF,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACJ,EAAOK,KAAK,CAACE,QAAQ,EACnDC,EAAaJ,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACJ,EAAOK,KAAK,CAACI,WAAW,EACzDC,EAAaN,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CAACJ,EAAOK,KAAK,CAACM,WAAW,EACzDC,EAAYC,MAAMC,OAAO,CAACd,EAAOK,KAAK,CAACO,SAAS,EAAIZ,EAAOK,KAAK,CAACO,SAAS,CAAG,CAAuB,OAAtBZ,GAAAA,EAAOK,KAAK,CAACO,SAAAA,GAAbZ,KAAAA,IAAAA,EAAAA,EAA0B,GAAC,CAAGe,KAAK,CAAC,KAAKxG,MAAM,CAACvH,SAE9HgO,EAAgD,CACpDV,WAAqB,gBAAsBnM,EAC5B,SAAfqM,EAAwB,mBAAyBrM,EAClC,UAAfuM,EAAyB,qBAA2BvM,EACrD,CAACoG,MAAM,CAACvH,SACHiO,EAAcC,CAAAA,EAAAA,GAAAA,CAAAA,CAAqBA,CAAOlB,EAAOK,KAAK,CAAEjI,GAExD,CAAEK,EAAY0I,EAAe,CAAGpO,EAAAA,CAFoCqF,OAEtB,CAAS+H,GAAK,IAC5D,CAAEvH,EAAawI,EAAgB,CAAGrO,EAAAA,QAAc,CAAgCiO,GAChF,CAAElI,EAAMuI,EAAS,CAAGtO,EAAAA,QAAc,CAAmBkO,GACrD,CAAEK,EAAiBC,EAAoB,CAAGxO,EAAAA,QAAc,CAAgB6N,GAExEY,EAAsBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,CAAChJ,EAAY,KAC9CO,EAAkBjG,EAAAA,OAAa,CAAC,IAAM2O,EAAAA,EAAcA,CAACC,IAAI,CAACH,GAAsB,CAAEA,EAAqB,EACvGI,EAAaC,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAA4D/I,GAE/FgJ,EAAuBC,CAAAA,EAAAA,GAAAA,CAAAA,CAAiBA,CAAC,CAC7CC,aAAc,mBACdC,WAAY,CAAEC,QAASC,EAAAA,CAAMA,CAACC,KAAK,CAAClP,EAAE,EACtCmP,QAAS,CACPlE,QAASqD,EACTf,YAAa7H,EAAYqG,QAAQ,CAAC,eAClCsB,SAAU3H,EAAYqG,QAAQ,CAAC,YAC/B0B,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWU,EAAgBhH,MAAM,CAAG,EAAIgH,OAAkBnN,CAC5D,EACAmO,QAASV,EACT1E,QAAS,CACPqF,QAASvJ,EACTwJ,gBAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAAqBxP,EAAAA,CAAUA,CAAE,GAAI,CAAEyP,sBAAkBvO,CAAU,EACtG,CACF,GAEMwO,EAAqBZ,CAAAA,EAAAA,GAAAA,CAAAA,CAAiBA,CAAC,CAC3CC,aAAc,iBACdC,WAAY,CAAEC,QAASC,EAAAA,CAAMA,CAACC,KAAK,CAAClP,EAAE,EACtCmP,QAAS,CACPlP,KAAMqO,EACNb,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWU,EAAgBhH,MAAM,CAAG,EAAIgH,EAAkBnN,MAC5D,EACAmO,QAASV,EACT1E,QAAS,CACPqF,QAAS,CAACvJ,EACVwJ,gBAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAAmBxP,EAAAA,CAAUA,CAAE,GAAI,CAAEyP,sBAAkBvO,CAAU,EACpG,CACF,GAEM4L,EAAiB6C,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,CAAC,mBAAoB,CACrDX,WAAY,CAAEC,QAASC,EAAAA,CAAMA,CAACC,KAAK,CAAClP,EAAE,CACxC,GAEMmN,EAAQrH,EAAkB8I,EAAuBa,EACjD,CAAE/D,MAAI,SAAEiE,CAAO,CAAEC,kBAAmBlQ,CAAS,gBAAEmQ,CAAc,iBAAEC,CAAe,CAAE,CAAG3C,EAEzFtN,EAAAA,SAAe,CAAC,KACd,IAAMkQ,EAAoBrK,EAAYsK,IAAI,CAAE9N,GAAoB,kBAAVA,GAClD4D,GACFoI,EAAe,CAAE,WADE,cAC2C6B,EAAoB,qBAA2B9O,EAAW,CAACoG,MAAM,CAACvH,UAChI+P,EAAmC,CACjC5E,QAASqD,EACTf,YAAa,GACbF,UAAU,EACVI,YAAa,CAACsC,EACdrC,UAAWU,CACb,KAEAF,EAAe,CAAE6B,EAAoB,qBAA2B9O,EAAW,CAACoG,MAAM,CAACvH,UACnF+P,EAAiC,CAC/B5P,KAAMqO,EACNb,YAAa,CAACsC,EACdrC,UAAWU,CACb,GAIJ,EAAG,CAAEtI,EAAiB,EAEtB,IAAMmK,EAAmBpQ,EAAAA,WAAiB,CAAC,IACzC,GAAIH,EACF,OAEF,EAHe,EAGTwQ,EAAQ,EAAOC,aAAa,CAAoBC,YAAY,CAAC,cAE/DF,GACF/B,EAAQ,EADC,EAEP,IAAMkC,EAAgBjL,EAAiB8K,GAAOI,GAE9C,OADAR,EAAgBnB,CAAAA,EAAAA,EADsBvJ,CACtBuJ,CAAAA,CAAsBA,CAAC0B,IAChCA,CACT,EAEJ,EAAG,CAAE3Q,EAAWoQ,EAAiB,EAE3BS,EAAyB1Q,EAAAA,WAAiB,CAAC,IAC/CoO,EAAc/L,GACUsM,EAAAA,EAAcA,CAACC,IAAI,CAACvM,GAE1C2N,EAAmC,CACjC5E,QAAS/I,EACTqL,YAAa7H,EAAYqG,QAAQ,CAAC,eAClCsB,SAAU3H,EAAYqG,QAAQ,CAAC,YAC/B0B,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWU,CACb,GAEAyB,EAAiC,CAC/B5P,KAAMiC,EACNuL,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWU,CACb,EAEJ,EAAG,CAAEyB,EAAgBnK,EAAa0I,EAAiB,EAE7CoC,EAA0B3Q,EAAAA,WAAiB,CAAC,IAChDqO,EAAehM,GAESsM,EAAAA,EAAcA,CAACC,IAAI,CAACH,GAE1CuB,EAAmC,CACjC5E,QAASqD,EACTf,YAAarL,EAAM6J,QAAQ,CAAC,eAC5BsB,SAAUnL,EAAM6J,QAAQ,CAAC,YACzB0B,YAAa,CAACvL,EAAM6J,QAAQ,CAAC,iBAC7B2B,UAAWU,CACb,GAEAyB,EAAiC,CAC/B5P,KAAMqO,EACNb,YAAa,CAACvL,EAAM6J,QAAQ,CAAC,iBAC7B2B,UAAWU,CACb,EAEJ,EAAG,CAAEE,EAAqBuB,EAAgBzB,EAAiB,EAErDqC,GAA8B5Q,EAAAA,WAAiB,CAAC,IACpDwO,EAAmBqC,GAEKlC,EAAAA,EAAcA,CAACC,IAAI,CAACH,GAE1CuB,EAAmC,CACjC5E,QAASqD,EACTf,YAAa7H,EAAYqG,QAAQ,CAAC,eAClCsB,SAAU3H,EAAYqG,QAAQ,CAAC,YAC/B0B,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWgD,CACb,GAEAb,EAAiC,CAC/B5P,KAAMqO,EACNb,YAAa,CAAC/H,EAAYqG,QAAQ,CAAC,iBACnC2B,UAAWgD,CACb,EAEJ,EAAG,CAAEpC,EAAqB5I,EAAamK,EAAgB,EAEjDc,IAAmB7Q,CAAQwO,GAAwB5I,EAAY0B,MAAM,CAAG,KAC3EyF,EAAenB,IAAI,EAAImB,EAAenB,IAAI,CAACgB,KAAK,CAACtF,MAAM,CAAG,GAAIgH,EAAgBhH,MAAM,CAAG,EAEpFwJ,EAFwF,CAG5F,IAHgG,CAGhG,4BACE,UAACC,EAAAA,CAAIA,CAAAA,CAACC,MAAM,KAAKC,KAAM,WACrB,UAAChK,EAAAA,EAAGA,CAAAA,gBACA2E,EAAAA,KAAAA,EAAAA,EAAMgB,KAAK,CAAXhB,GAAe,CAAC,CAACiB,EAAMC,IACvB,UAACrC,EAAmBA,CAEhB,GAAGoC,CAAI,CACTjN,UAAYA,GAFNiN,EAAK3M,EAAE,CAAIN,EAAAA,CAAYkN,EADXrC,EACmB,CAAC,OAO9C,UAACyG,EAAAA,CAAIA,CAAAA,CAACF,MAAM,KAAKC,KAAM,WACrB,UAACpF,EAAgBA,CACfD,KAAOA,EACPhM,UAAYA,EACZkG,KAAOA,CAHQ+F,CAIfC,aAAeqE,SAMjBgB,GACJ,UAACzL,EAAoBA,CACnB9F,UAAYA,EACZ6F,WAAaA,EACbE,IAHmBD,WAGF+K,EACjB7K,YAAcA,EACdC,oBAAsB6K,EACtBxK,aAAa,SAAG6G,EAAAA,EAAenB,IAAAA,GAAfmB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAqBH,KAAK,CAC1CzG,qBAAuBmI,EACvBlI,wBAA0BuK,GAC1B7K,KAAOA,EACPC,aAAesI,EACfrI,gBAAkBA,EAClBC,WAAaoH,EAAMpH,UAAU,GAIjC,MACE,iCACE,UAACmL,EAAAA,CAASA,CAAAA,CACR7H,MAAQ4F,EAAAA,CAAMA,CAACkC,IAAI,CAACC,GAAG,CAACC,mBAAmB,CAAG,GAAuB,OAAnBpC,EAAAA,CAAMA,CAACC,KAAK,CAACjP,IAAI,CAAE,iBAAiB,uBACtFqR,UAAU,MAEZ,UAACC,EAAAA,CAAeA,CAAAA,CACd5B,QAAUA,EACVjD,KAAK,OAAGhB,EAAAA,KAAAA,EAAAA,EAAMgB,KAAK,CAAXhB,UACE,6BACV8F,YAAa,CACXC,kBAAmB,SAAgB,OAANC,EAAAA,EAAIA,CAAE,sEACnCf,EACF,EACAC,QAAUA,GACVK,UAAYA,OAIpB,uHCtMA,MAAepM,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CA/BG,QAKlB8M,EAAwCA,EASvCA,IAiB+BJ,EAAC,GA9BrC,EAAU5B,OAAO,CACR,CADU,EACV,OAACiC,EAAAA,CAAcA,CAAAA,CAACC,UAAYF,EAAME,SAAS,GAGhDF,CAAAA,QAAAA,EAAAA,EAAMH,WAAAA,GAANG,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmBhB,gBAAgB,GAAI,UAACgB,EAAAA,EAAMjF,KAAAA,GAANiF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAavK,MAAAA,EAErD,CAF6D,EAE7D,QAACL,EAAAA,EAAGA,CAAAA,CAAC8K,UAAYF,EAAME,SAAS,WAC5BF,EAAMV,SAAS,CACjB,UAACa,EAAAA,CAAiBA,CAAAA,CAACC,KAAOJ,EAAMH,WAAW,CAACC,iBAAiB,MAK/D,SAACE,EAAAA,EAAMjF,KAAAA,GAANiF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAavK,MAAAA,EAUhB,CAVwB,EAUxB,QAACL,EAAAA,EAAGA,CAAAA,CAAC8K,UAAYF,EAAME,SAAS,WAC5BF,EAAMV,SAAS,CACfU,EAAMf,OAAO,IAVf,iCACIe,EAAMK,oBAAoB,EAAIL,EAAMV,SAAS,CAC7CU,EAAMM,SAAS,EAAI,UAACpK,EAAAA,CAAIA,CAAAA,CAACgK,UAAYF,EAAME,SAAS,UAAKF,EAAMM,SAAS,KAWlF,uHCxCA,IAAMrH,EAAY/F,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,OAAC,YAAEqN,CAAU,UAAEC,CAAQ,CAAEN,WAAS,CAAkB,GAC3E,MACE,UAACO,EAAAA,CAAIA,CAAAA,CACHC,GAAKC,EAAAA,CAAMA,CAAC9K,GAAG,CACfnB,EAAE,OACFkM,QAAUL,EAAa,CAAEM,QAAS,EAAGC,MAAO,GAAK,EAAI,CAAED,QAAS,EAAGC,MAAO,CAAE,EAC5EC,QAAS,CAAEF,QAAS,EAAGC,MAAO,CAAE,EAChCE,mBAAmB,SACnBC,yBAAyB,SACzBC,OAAS,EACTC,UAAY,EACZC,oBAAoB,YACpBxK,WAAW,QACXyK,SAAW,EACXC,YAAY,UACZC,eAAe,MACfC,MAAO,CACLnM,kBAAmB,KACrB,EACA6K,UAAYA,EACZlK,SAAS,KACTyL,WAAW,gBAETjB,GAGR,GA8CA,EAN2B,WACzBvH,EACAC,MAlCYhG,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,CAsCN8F,MAtCO,UAAEwH,CAAQ,CAsCCxH,EAAC,QAtCAkH,CAAS,WAAEnS,CAAS,CAAc,GAClE,MACE,UAACwL,EAAAA,CAAQA,CAAAA,CACP2G,UAAYA,EACZ1G,SAAW,CAACzL,EACZoI,WAAa,IACbZ,GAAG,MACHmM,YAAY,iBAEVlB,GAGR,GAuBErH,MAhBYjG,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,OAAC,UAAEsN,CAAQ,WAAEN,CAAS,CAAc,GACvD,MACE,UAACyB,EAAAA,CAAQA,CAAAA,CACPzB,UAAYA,EACZ0B,GAAG,MACHxO,MAAM,iBACNyO,SAAS,kBAEPrB,GAGR,EAMA,+FClCA,MAtCoB,OAAC,KAAEjG,CAAG,UAAEiG,CAAQ,CAAE,GAAGsB,EAAkB,GACnDC,EAAM7T,EAAAA,EAqCY8T,EAAC,EArCD,CAA0B,MAC5C,CAAEC,EAAUC,EAAa,CAAGhU,EAAAA,QAAc,EAAC,GAE3CiU,EAAejU,EAAAA,WAAiB,CAAC,SAC1B6T,EAAPK,OAAkB,QAAXL,EAAAA,EAAIM,OAAO,GAAXN,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAaO,qBAAqB,GAAGC,CAAC,IAAMhI,CAAAA,GAAO,EAC5D2H,EADgE,CACpD,GAEZA,GAAY,EAEhB,EAAG,CAAE3H,EAAK,EAEVrM,EAAAA,SAAe,CAAC,KACd,IAAMsU,EAAwBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACN,EAAc,KAIrD,OAFAO,OAAOC,gBAAgB,CAAC,SAAUH,GAE3B,KACLE,OAAOE,mBAAmB,CAAC,SAAUJ,EACvC,CACF,EAAG,CAAEL,EAAc,EAEnB,IAAMnC,EAAQ,CACZ,GAAG8B,CAAS,CACZpQ,SAAU,SACV6I,IAAKA,EAAM,GAAS,OAALA,EAAK,MAAM,EAC1BsI,gBAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,QAAS,SAC5CC,UAAWd,EAAW,KAAO,OAC7Be,OAAQ,GACV,EAEA,MACE,UAAC1I,EAAAA,CAAKA,CAAAA,CAAG,GAAG0F,CAAK,CAAG+B,IAAMA,WACtBvB,GAGR,qHCvCA,IAAMyC,EAAa,UAACrL,EAAAA,CAAOA,CAAAA,CAACtJ,KAAK,SAASgJ,QAAU,EAAIE,GAAI,CAAE7C,KAAM,EAAGC,GAAI,CAAE,IAyD7E,EAAe1G,EAAAA,UAAgB,CA/CV,GAAiE6T,QAAhE,EA+CuBmB,EAAC,MA/CtBC,CAAQ,WAAEpV,CAAS,mBAAEyH,CAAiB,SAAEc,CAAO,IAAEoK,CAAE,CAAS,GAC5E0C,EAAaN,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,QAAS,SACxCO,EAAeP,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,WAAY,WAEnD,GAAI/U,EACF,MAAO,UAACwL,EAAAA,CAAQA,CAAAA,CAAC7E,EAAG,CAAEC,KAAM,EAAGC,GAAI,MAAO,EAAG0O,EAAI,EAAI/L,aAAa,OAAOgM,WAAa,IAGxF,IAAMC,EACJ,UAACC,EAAAA,EAAMA,CAAAA,CACLvD,UAAU,oBACVwD,GAAKP,EAAW,eAAiBE,EACjCvO,KAAO,EACP1B,MAAQgQ,WAEN5N,IAIN,MACE,WAACmO,EAAAA,CAAMA,CAAAA,CACL5B,IAAMA,EACN6B,UAAYpO,EAAoBgO,OAAMlU,EACtCwF,KAAK,KACLqB,WAAW,MACXC,QAAQ,UACRyN,YAAY,OACZvN,QAAUA,EACV6M,SAAWA,EACXW,iBAAgB3V,CAAQqH,EACxBuO,GAAK,IACLR,WAAa,EACb7C,GAAKA,EACLsD,cAAc,MACdzN,OAAS4M,EAAW,CAClB/P,MAAO,eACP,qBAAsB,CACpBsQ,GAAI,cACN,CACF,OAAIpU,YAEF2T,EACF,UAAC7N,EAAAA,EAAGA,CAAAA,CAAC6C,QAAS,CAAEtD,KAAM,OAAQC,GAAI,OAAQ,WAAG,aAGnD,uJCcA,MAAe1B,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAzDD,OAAC,KAyDauB,EAAC,GAzDZM,CAAQ,WAAEmL,CAAS,MAAEpL,EAAO,IAAI,CAAEE,aAAW,cAAEC,CAAY,WAAElH,CAAS,MAAEW,CAAI,MAAEJ,CAAI,CAAS,GAC1G,CAAE2V,EAAaC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAClP,GAAgB,IAC3DmP,EAAWlW,EAAAA,MAAY,CAAmB,MAC1CmW,EAAYvB,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,iBAAkB,kBAEhDwB,EAA0BC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAEC,IAC3C,GAAM,OAAEjU,CAAK,CAAE,CAAGiU,EAAMC,MAAM,CAE9BP,EAAe3T,SACfwE,GAAAA,EAAWxE,EACb,EAAG,CAAEwE,EAAU,EAET2P,EAAyBH,CAAAA,EAAAA,EAH7BxP,WAG6BwP,CAAWA,CAAC,SAGzCH,EAFAF,EAAe,UACfnP,GAAAA,EAAW,UACXqP,GAAiB,GADjBrP,KACAqP,EAAAA,EAAU/B,MAAV+B,CAAU/B,GAAV+B,KAAAA,IAAAA,GAAAA,EAAmBO,KAAK,EAC1B,EAAG,CAAE5P,EAAU,EAEf,MACE,UAACwE,EAAAA,CAAQA,CAAAA,CACPC,SAAW,CAACzL,EACZmS,UAAYA,EACZrL,KAAK,QACL0C,aAAa,gBAEb,WAACqN,EAAAA,CAAUA,CAAAA,CACT9P,KAAOA,YAEP,UAAC+P,EAAAA,CAAgBA,CAAAA,CACfb,cAAc,gBAEd,UAACpM,EAAAA,CAAOA,CAAAA,CAACtJ,KAAK,SAAS8E,MAAQiR,EAAY/M,QAAU,MAGvD,UAACwN,EAAAA,CAAKA,CAAAA,CACJ/C,IAAMqC,EACNtP,KAAOA,EACPvE,MAAQ0T,EACRlP,SAAWuP,EACXtP,YAAcA,EACd+P,YAAY,MACZC,aAAa,WACbjN,WAAW,SACXrJ,KAAOA,EACPJ,KAAOA,IAGP2V,EACA,UAACgB,EAAAA,CAAiBA,CAAAA,UAChB,UAACC,EAAAA,CAAWA,CAAAA,CAAC5O,QAAUoO,MAEvB,SAIZ,iICjCA,MAAexW,EAAAA,IAAU,CAtBH,OAAC,OAsBiByH,EAAC,UAtBhBH,CAAiB,UAAEgL,CAAQ,cAAE5K,CAAY,WAAE7H,CAAS,CAAS,GAC9E,QAAEoX,CAAM,UAAEC,CAAQ,SAAEC,CAAO,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAaA,GAEnD,MACE,WAACC,EAAAA,CAAOA,CAAAA,CAACJ,OAASA,EAASE,QAAUA,EAAUG,UAAU,eAAeC,MAAM,cAC5E,UAACC,EAAAA,CAAcA,CAAAA,UACb,UAACxC,EAAAA,CAAYA,CAAAA,CACXC,SAAWgC,EACX7O,QAAU8O,EACV5P,kBAAoBA,EACpBzH,UAAYA,MAGhB,UAAC4X,EAAAA,CAAcA,CAAAA,CAAG,GAAG/P,CAAY,UAC/B,UAACgQ,EAAAA,CAAWA,CAAAA,CAAC7B,GAAK,EAAInC,GAAK,EAAI3J,QAAQ,OAAO4N,QAAQ,SAAS3E,OAAS,WACpEV,QAKZ,oBCvCe,SAAS/M,EACtBqS,CAAwD,CAAEvH,CAAgB,EAE1E,OAAO,GAEEwH,EADUD,CAAY,CAACvH,EAAM,CACMI,EAE9C,CAEO,SAASoH,EAA4BC,CAAkB,CAAErH,CAAY,CAJxCqH,CAKlC,IAAMC,EAAWD,EAASE,SAAS,CAAC,GAASC,IAAQxH,GAC/CyH,EAAYH,EAAW,EAAID,EAASvQ,MAAM,CAAG,EAAI,EAAIwQ,EAAW,EACtE,OAAOD,CAAQ,CAACI,EAAU,4BAMrB,IAAMC,EAAoB,EAAkC3S,IAAI,MAACpE,EADzC,CAAE,OAAQ,CAC0C0W,UADnC1W,EAAW,oCCjB5C,SAAS0N,EAAqGmJ,CAAe,EAC1I,GAAI,CAACA,EACH,GADQ,IACD7W,IAGHgX,EAAgBH,EAAIjK,KAAK,CAAC,KAChC,MAAO,CAAEjI,KAAMqS,CAAa,CAAC,EAAE,CAAEC,MAAOD,CAAa,CAAC,EAAE,CAC1D,oCCHe,SAASjK,EAAgDb,CAAY,CAAEgL,CAA2C,EAC/H,GAAI,CAAChL,EAAMvH,IAAI,EAAI,CAACuH,EAAM+K,KAAK,CAC7B,CAD+B,MACxBjX,IAGHmX,EAAMjL,EAAMvH,IAAI,CAAG,IAAMuH,EAAM+K,KAAK,CAC1C,GAAIC,EAAY3P,GAAG,CAAC6P,GAAUA,EAAOnW,KAAK,EAAE6J,QAAQ,CAACqM,GACnD,GADsE,IAC/DA,CAEX","sources":["webpack://_N_E/./lib/hooks/useIsInitialLoading.tsx","webpack://_N_E/./stubs/ENS.ts","webpack://_N_E/./stubs/addressParams.ts","webpack://_N_E/./stubs/tx.ts","webpack://_N_E/./ui/nameDomain/NameDomainExpiryStatus.tsx","webpack://_N_E/./ui/nameDomains/utils.ts","webpack://_N_E/./ui/nameDomains/NameDomainsActionBar.tsx","webpack://_N_E/./ui/nameDomains/NameDomainsListItem.tsx","webpack://_N_E/./ui/nameDomains/NameDomainsTableItem.tsx","webpack://_N_E/./ui/nameDomains/NameDomainsTable.tsx","webpack://_N_E/./ui/pages/NameDomains.tsx","webpack://_N_E/./ui/shared/DataListDisplay.tsx","webpack://_N_E/./ui/shared/ListItemMobile/ListItemMobileGrid.tsx","webpack://_N_E/./ui/shared/TheadSticky.tsx","webpack://_N_E/./ui/shared/filters/FilterButton.tsx","webpack://_N_E/./ui/shared/filters/FilterInput.tsx","webpack://_N_E/./ui/shared/filters/PopoverFilter.tsx","webpack://_N_E/./ui/shared/sort/getNextSortValue.ts","webpack://_N_E/./ui/shared/sort/getSortParamsFromValue.ts","webpack://_N_E/./ui/shared/sort/getSortValueFromQuery.ts"],"sourcesContent":["import React from 'react';\n\nexport default function useIsInitialLoading(isLoading: boolean | undefined) {\n  const [ isInitialLoading, setIsInitialLoading ] = React.useState(Boolean(isLoading));\n\n  React.useEffect(() => {\n    if (!isLoading) {\n      setIsInitialLoading(false);\n    }\n  }, [ isLoading ]);\n\n  return isInitialLoading;\n}\n","import * as bens from '@blockscout/bens-types';\n\nimport { ADDRESS_PARAMS, ADDRESS_HASH } from './addressParams';\nimport { TX_HASH } from './tx';\n\nexport const ENS_DOMAIN: bens.DetailedDomain = {\n  id: '0x126d74db13895f8d3a1d362410212731d1e1d9be8add83e388385f93d84c8c84',\n  name: 'kitty.cat.eth',\n  tokens: [\n    {\n      id: '973523146267017920308',\n      contract_hash: ADDRESS_HASH,\n      type: bens.TokenType.NATIVE_DOMAIN_TOKEN,\n    },\n  ],\n  owner: ADDRESS_PARAMS,\n  resolved_address: ADDRESS_PARAMS,\n  registrant: ADDRESS_PARAMS,\n  registration_date: '2023-12-20T01:29:12.000Z',\n  expiry_date: '2099-01-02T01:29:12.000Z',\n  other_addresses: {\n    ETH: ADDRESS_HASH,\n  },\n  protocol: undefined,\n  resolved_with_wildcard: false,\n  stored_offchain: false,\n};\n\nexport const ENS_DOMAIN_EVENT: bens.DomainEvent = {\n  transaction_hash: TX_HASH,\n  timestamp: '2022-06-06T08:43:15.000000Z',\n  from_address: ADDRESS_PARAMS,\n  action: '0xf7a16963',\n};\n","import type { AddressParam } from 'types/api/addressParams';\n\nexport const ADDRESS_HASH = '0x2B51Ae4412F79c3c1cB12AA40Ea4ECEb4e80511a';\n\nexport const ADDRESS_PARAMS: AddressParam = {\n  hash: ADDRESS_HASH,\n  implementations: null,\n  is_contract: false,\n  is_verified: null,\n  name: null,\n  private_tags: [],\n  public_tags: [],\n  watchlist_names: [],\n  ens_domain_name: null,\n};\n","import type { RawTracesResponse } from 'types/api/rawTrace';\nimport type { Transaction, TransactionsStats } from 'types/api/transaction';\n\nimport { ADDRESS_PARAMS } from './addressParams';\n\nexport const TX_HASH = '0x3ed9d81e7c1001bdda1caa1dc62c0acbbe3d2c671cdc20dc1e65efdaa4186967';\n\nexport const TX: Transaction = {\n  timestamp: '2022-11-11T11:11:11.000000Z',\n  fee: {\n    type: 'actual',\n    value: '2100000000000000',\n  },\n  gas_limit: '21000',\n  block_number: 9004925,\n  status: 'ok',\n  method: 'placeholder',\n  confirmations: 71,\n  type: 0,\n  exchange_rate: '1828.71',\n  to: ADDRESS_PARAMS,\n  transaction_burnt_fee: null,\n  max_fee_per_gas: null,\n  result: 'success',\n  hash: '0x2b824349b320cfa72f292ab26bf525adb00083ba9fa097141896c3c8c74567cc',\n  gas_price: '100000000000',\n  priority_fee: null,\n  base_fee_per_gas: '24',\n  from: ADDRESS_PARAMS,\n  token_transfers: null,\n  transaction_types: [\n    'coin_transfer',\n  ],\n  gas_used: '21000',\n  created_contract: null,\n  position: 0,\n  nonce: 295929,\n  has_error_in_internal_transactions: false,\n  actions: [],\n  decoded_input: null,\n  token_transfers_overflow: false,\n  raw_input: '0x',\n  value: '42000420000000000000',\n  max_priority_fee_per_gas: null,\n  revert_reason: null,\n  confirmation_duration: [\n    0,\n    14545,\n  ],\n  transaction_tag: null,\n};\n\nexport const TX_ZKEVM_L2: Transaction = {\n  ...TX,\n  zkevm_batch_number: 12345,\n  zkevm_sequence_hash: '0x2b824349b320cfa72f292ab26bf525adb00083ba9fa097141896c3c8c74567cc',\n  zkevm_status: 'Confirmed by Sequencer',\n  zkevm_verify_hash: '0x2b824349b320cfa72f292ab26bf525adb00083ba9fa097141896c3c8c74567cc',\n};\n\nexport const TX_RAW_TRACE: RawTracesResponse = [];\n\nexport const TXS_STATS: TransactionsStats = {\n  pending_transactions_count: '4200',\n  transaction_fees_avg_24h: '22342870314428',\n  transaction_fees_sum_24h: '22184012506492688277',\n  transactions_count_24h: '992890',\n};\n","import { chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport dayjs from 'lib/date/dayjs';\n\ninterface Props {\n  date: string | undefined;\n}\n\nconst NameDomainExpiryStatus = ({ date }: Props) => {\n  if (!date) {\n    return null;\n  }\n\n  const hasExpired = dayjs(date).isBefore(dayjs());\n\n  if (hasExpired) {\n    return <chakra.span color=\"red.600\">Expired</chakra.span>;\n  }\n\n  const diff = dayjs(date).diff(dayjs(), 'day');\n  if (diff < 30) {\n    return <chakra.span color=\"red.600\">{ diff } days left</chakra.span>;\n  }\n\n  return <chakra.span color=\"text_secondary\">Expires { dayjs(date).fromNow() }</chakra.span>;\n};\n\nexport default React.memo(NameDomainExpiryStatus);\n","import type { EnsLookupSorting } from 'types/api/ens';\nimport type { SelectOption } from 'ui/shared/select/types';\n\nimport getNextSortValueShared from 'ui/shared/sort/getNextSortValue';\n\nexport type SortField = EnsLookupSorting['sort'];\nexport type Sort = `${ EnsLookupSorting['sort'] }-${ EnsLookupSorting['order'] }`;\n\nexport const SORT_OPTIONS: Array<SelectOption<Sort>> = [\n  { label: 'Default', value: undefined },\n  { label: 'Registered on descending', value: 'registration_date-DESC' },\n  { label: 'Registered on ascending', value: 'registration_date-ASC' },\n];\n\nconst SORT_SEQUENCE: Record<SortField, Array<Sort | undefined>> = {\n  registration_date: [ 'registration_date-DESC', 'registration_date-ASC', undefined ],\n};\n\nexport const getNextSortValue = (getNextSortValueShared<SortField, Sort>).bind(undefined, SORT_SEQUENCE);\n","import { Box, Checkbox, CheckboxGroup, Flex, HStack, Image, Link, Text, VStack, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type * as bens from '@blockscout/bens-types';\nimport type { EnsDomainLookupFiltersOptions } from 'types/api/ens';\nimport type { PaginationParams } from 'ui/shared/pagination/types';\n\nimport useIsInitialLoading from 'lib/hooks/useIsInitialLoading';\nimport ActionBar from 'ui/shared/ActionBar';\nimport FilterInput from 'ui/shared/filters/FilterInput';\nimport PopoverFilter from 'ui/shared/filters/PopoverFilter';\nimport IconSvg from 'ui/shared/IconSvg';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport Sort from 'ui/shared/sort/Sort';\n\nimport type { Sort as TSort } from './utils';\nimport { SORT_OPTIONS } from './utils';\n\ninterface Props {\n  pagination: PaginationParams;\n  searchTerm: string | undefined;\n  onSearchChange: (value: string) => void;\n  filterValue: EnsDomainLookupFiltersOptions;\n  onFilterValueChange: (nextValue: EnsDomainLookupFiltersOptions) => void;\n  protocolsData: Array<bens.ProtocolInfo> | undefined;\n  protocolsFilterValue: Array<string>;\n  onProtocolsFilterChange: (nextValue: Array<string>) => void;\n  sort: TSort | undefined;\n  onSortChange: (nextValue: TSort | undefined) => void;\n  isLoading: boolean;\n  isAddressSearch: boolean;\n}\n\nconst NameDomainsActionBar = ({\n  searchTerm,\n  onSearchChange,\n  filterValue,\n  onFilterValueChange,\n  sort,\n  onSortChange,\n  isLoading,\n  isAddressSearch,\n  pagination,\n  protocolsData,\n  protocolsFilterValue,\n  onProtocolsFilterChange,\n}: Props) => {\n  const isInitialLoading = useIsInitialLoading(isLoading);\n\n  const searchInput = (\n    <FilterInput\n      w={{ base: '100%', lg: '360px' }}\n      minW={{ base: 'auto', lg: '250px' }}\n      size=\"xs\"\n      onChange={ onSearchChange }\n      placeholder=\"Search by name or address\"\n      initialValue={ searchTerm }\n      isLoading={ isInitialLoading }\n    />\n  );\n\n  const handleProtocolReset = React.useCallback(() => {\n    onProtocolsFilterChange([]);\n  }, [ onProtocolsFilterChange ]);\n\n  const filterGroupDivider = <Box w=\"100%\" borderBottomWidth=\"1px\" borderBottomColor=\"divider\" my={ 4 }/>;\n\n  const appliedFiltersNum = filterValue.length + (protocolsData && protocolsData.length > 1 ? protocolsFilterValue.length : 0);\n\n  const filter = (\n    <PopoverFilter appliedFiltersNum={ appliedFiltersNum } contentProps={{ minW: '220px', w: 'fit-content' }} isLoading={ isInitialLoading }>\n      <div>\n        { protocolsData && protocolsData.length > 1 && (\n          <>\n            <Flex justifyContent=\"space-between\" fontSize=\"sm\" mb={ 3 }>\n              <Text fontWeight={ 600 } variant=\"secondary\">Protocol</Text>\n              <Link\n                onClick={ handleProtocolReset }\n                color={ protocolsData.length > 0 ? 'link' : 'text_secondary' }\n                _hover={{\n                  color: protocolsData.length > 0 ? 'link_hovered' : 'text_secondary',\n                }}\n              >\n                Reset\n              </Link>\n            </Flex>\n            <CheckboxGroup size=\"lg\" value={ protocolsFilterValue } defaultValue={ protocolsFilterValue } onChange={ onProtocolsFilterChange }>\n              <VStack gap={ 5 } alignItems=\"flex-start\">\n                { protocolsData.map((protocol) => {\n                  const topLevelDomains = protocol.tld_list.map((domain) => `.${ domain }`).join(' ');\n                  return (\n                    <Checkbox key={ protocol.id } value={ protocol.id }>\n                      <Flex alignItems=\"center\">\n                        <Image\n                          src={ protocol.icon_url }\n                          boxSize={ 5 }\n                          borderRadius=\"sm\"\n                          mr={ 2 }\n                          alt={ `${ protocol.title } protocol icon` }\n                          fallback={ <IconSvg name=\"ENS_slim\" boxSize={ 5 } mr={ 2 }/> }\n                          fallbackStrategy={ protocol.icon_url ? 'onError' : 'beforeLoadOrError' }\n                        />\n                        <span>{ protocol.short_name }</span>\n                        <chakra.span color=\"text_secondary\" whiteSpace=\"pre\"> { topLevelDomains }</chakra.span>\n                      </Flex>\n                    </Checkbox>\n                  );\n                }) }\n              </VStack>\n            </CheckboxGroup>\n            { filterGroupDivider }\n          </>\n        ) }\n        <CheckboxGroup size=\"lg\" onChange={ onFilterValueChange } value={ filterValue } defaultValue={ filterValue }>\n          <Text variant=\"secondary\" fontWeight={ 600 } mb={ 3 } fontSize=\"sm\">Address</Text>\n          <Checkbox value=\"owned_by\" isDisabled={ !isAddressSearch } display=\"block\">\n            Owned by\n          </Checkbox>\n          <Checkbox\n            value=\"resolved_to\"\n            mt={ 5 }\n            isDisabled={ !isAddressSearch }\n            display=\"block\"\n          >\n            Resolved to address\n          </Checkbox>\n          { filterGroupDivider }\n          <Text variant=\"secondary\" fontWeight={ 600 } mb={ 3 } fontSize=\"sm\">Status</Text>\n          <Checkbox value=\"with_inactive\" display=\"block\">\n            Include expired\n          </Checkbox>\n        </CheckboxGroup>\n      </div>\n    </PopoverFilter>\n  );\n\n  const sortButton = (\n    <Sort\n      name=\"name_domains_sorting\"\n      defaultValue={ sort }\n      options={ SORT_OPTIONS }\n      onChange={ onSortChange }\n      isLoading={ isInitialLoading }\n    />\n  );\n\n  return (\n    <>\n      <HStack spacing={ 3 } mb={ 6 } display={{ base: 'flex', lg: 'none' }}>\n        { filter }\n        { sortButton }\n        { searchInput }\n      </HStack>\n      <ActionBar\n        mt={ -6 }\n        display={{ base: pagination.isVisible ? 'flex' : 'none', lg: 'flex' }}\n      >\n        <HStack spacing={ 3 } display={{ base: 'none', lg: 'flex' }}>\n          { filter }\n          { searchInput }\n        </HStack>\n        <Pagination { ...pagination } ml=\"auto\"/>\n      </ActionBar>\n    </>\n  );\n};\n\nexport default React.memo(NameDomainsActionBar);\n","import React from 'react';\n\nimport type * as bens from '@blockscout/bens-types';\n\nimport dayjs from 'lib/date/dayjs';\nimport NameDomainExpiryStatus from 'ui/nameDomain/NameDomainExpiryStatus';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport EnsEntity from 'ui/shared/entities/ens/EnsEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\n\ninterface Props extends bens.Domain {\n  isLoading: boolean;\n}\n\nconst NameDomainsListItem = ({\n  name,\n  isLoading,\n  resolved_address: resolvedAddress,\n  registration_date: registrationDate,\n  expiry_date: expiryDate,\n  protocol,\n}: Props) => {\n  return (\n    <ListItemMobileGrid.Container>\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Domain</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value>\n        <EnsEntity domain={ name } protocol={ protocol } isLoading={ isLoading } fontWeight={ 500 }/>\n      </ListItemMobileGrid.Value>\n\n      { resolvedAddress && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Address</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>\n            <AddressEntity address={ resolvedAddress } isLoading={ isLoading } fontWeight={ 500 }/>\n          </ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { registrationDate && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Registered on</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>\n            <Skeleton isLoaded={ !isLoading }>\n              <div>{ dayjs(registrationDate).format('lll') }</div>\n              <div> { dayjs(registrationDate).fromNow() }</div>\n            </Skeleton>\n          </ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { expiryDate && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Expiration date</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>\n            <Skeleton isLoaded={ !isLoading } whiteSpace=\"pre-wrap\">\n              <div>{ dayjs(expiryDate).format('lll') } </div>\n              <NameDomainExpiryStatus date={ expiryDate }/>\n            </Skeleton>\n          </ListItemMobileGrid.Value>\n        </>\n      ) }\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default React.memo(NameDomainsListItem);\n","import { chakra, Tr, Td } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type * as bens from '@blockscout/bens-types';\n\nimport dayjs from 'lib/date/dayjs';\nimport NameDomainExpiryStatus from 'ui/nameDomain/NameDomainExpiryStatus';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport EnsEntity from 'ui/shared/entities/ens/EnsEntity';\n\ntype Props = bens.Domain & {\n  isLoading?: boolean;\n};\n\nconst NameDomainsTableItem = ({\n  isLoading,\n  name,\n  resolved_address: resolvedAddress,\n  registration_date: registrationDate,\n  expiry_date: expiryDate,\n  protocol,\n}: Props) => {\n\n  return (\n    <Tr>\n      <Td verticalAlign=\"middle\">\n        <EnsEntity domain={ name } protocol={ protocol } isLoading={ isLoading } fontWeight={ 600 }/>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        { resolvedAddress && <AddressEntity address={ resolvedAddress } isLoading={ isLoading } fontWeight={ 500 }/> }\n      </Td>\n      <Td verticalAlign=\"middle\" pl={ 9 }>\n        { registrationDate && (\n          <Skeleton isLoaded={ !isLoading }>\n            { dayjs(registrationDate).format('lll') }\n            <chakra.span color=\"text_secondary\"> { dayjs(registrationDate).fromNow() }</chakra.span>\n          </Skeleton>\n        ) }\n      </Td>\n      <Td verticalAlign=\"middle\">\n        { expiryDate && (\n          <Skeleton isLoaded={ !isLoading } whiteSpace=\"pre-wrap\">\n            <span>{ dayjs(expiryDate).format('lll') } </span>\n            <NameDomainExpiryStatus date={ expiryDate }/>\n          </Skeleton>\n        ) }\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(NameDomainsTableItem);\n","import { Table, Tbody, Tr, Th, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type * as bens from '@blockscout/bens-types';\n\nimport { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport IconSvg from 'ui/shared/IconSvg';\nimport { default as Thead } from 'ui/shared/TheadSticky';\n\nimport NameDomainsTableItem from './NameDomainsTableItem';\nimport { type Sort } from './utils';\n\ninterface Props {\n  data: bens.LookupDomainNameResponse | undefined;\n  isLoading?: boolean;\n  sort: Sort | undefined;\n  onSortToggle: (event: React.MouseEvent) => void;\n}\n\nconst NameDomainsTable = ({ data, isLoading, sort, onSortToggle }: Props) => {\n  const sortIconTransform = sort?.toLowerCase().includes('asc') ? 'rotate(-90deg)' : 'rotate(90deg)';\n\n  return (\n    <Table>\n      <Thead top={ ACTION_BAR_HEIGHT_DESKTOP }>\n        <Tr>\n          <Th width=\"25%\">Domain</Th>\n          <Th width=\"25%\">Address</Th>\n          <Th width=\"25%\" pl={ 9 }>\n            <Link display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\" position=\"relative\" data-field=\"registration_date\" onClick={ onSortToggle }>\n              { sort?.includes('registration_date') && (\n                <IconSvg\n                  name=\"arrows/east\"\n                  boxSize={ 4 }\n                  transform={ sortIconTransform }\n                  color=\"link\"\n                  position=\"absolute\"\n                  left={ -5 }\n                  top={ 0 }\n                />\n              ) }\n              <span>Registered on</span>\n            </Link>\n          </Th>\n          <Th width=\"25%\">Expiration date</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        { data?.items.map((item, index) => <NameDomainsTableItem key={ index } { ...item } isLoading={ isLoading }/>) }\n      </Tbody>\n    </Table>\n  );\n};\n\nexport default React.memo(NameDomainsTable);\n","import { Box, Hide, Show } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { EnsDomainLookupFiltersOptions, EnsLookupSorting } from 'types/api/ens';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport useDebounce from 'lib/hooks/useDebounce';\nimport { apos } from 'lib/html-entities';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport { ENS_DOMAIN } from 'stubs/ENS';\nimport { generateListStub } from 'stubs/utils';\nimport NameDomainsActionBar from 'ui/nameDomains/NameDomainsActionBar';\nimport NameDomainsListItem from 'ui/nameDomains/NameDomainsListItem';\nimport NameDomainsTable from 'ui/nameDomains/NameDomainsTable';\nimport type { Sort, SortField } from 'ui/nameDomains/utils';\nimport { SORT_OPTIONS, getNextSortValue } from 'ui/nameDomains/utils';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport { ADDRESS_REGEXP } from 'ui/shared/forms/validators/address';\nimport PageTitle from 'ui/shared/Page/PageTitle';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport getSortParamsFromValue from 'ui/shared/sort/getSortParamsFromValue';\nimport getSortValueFromQuery from 'ui/shared/sort/getSortValueFromQuery';\n\nconst NameDomains = () => {\n  const router = useRouter();\n\n  const q = getQueryParamString(router.query.name) || getQueryParamString(router.query.address);\n  const ownedBy = getQueryParamString(router.query.owned_by);\n  const resolvedTo = getQueryParamString(router.query.resolved_to);\n  const onlyActive = getQueryParamString(router.query.only_active);\n  const protocols = Array.isArray(router.query.protocols) ? router.query.protocols : (router.query.protocols ?? '').split(',').filter(Boolean);\n\n  const initialFilters: EnsDomainLookupFiltersOptions = [\n    ownedBy === 'true' ? 'owned_by' as const : undefined,\n    resolvedTo === 'true' ? 'resolved_to' as const : undefined,\n    onlyActive === 'false' ? 'with_inactive' as const : undefined,\n  ].filter(Boolean);\n  const initialSort = getSortValueFromQuery<Sort>(router.query, SORT_OPTIONS);\n\n  const [ searchTerm, setSearchTerm ] = React.useState<string>(q || '');\n  const [ filterValue, setFilterValue ] = React.useState<EnsDomainLookupFiltersOptions>(initialFilters);\n  const [ sort, setSort ] = React.useState<Sort | undefined>(initialSort);\n  const [ protocolsFilter, setProtocolsFilter ] = React.useState<Array<string>>(protocols);\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n  const isAddressSearch = React.useMemo(() => ADDRESS_REGEXP.test(debouncedSearchTerm), [ debouncedSearchTerm ]);\n  const sortParams = getSortParamsFromValue<Sort, EnsLookupSorting['sort'], EnsLookupSorting['order']>(sort);\n\n  const addressesLookupQuery = useQueryWithPages({\n    resourceName: 'addresses_lookup',\n    pathParams: { chainId: config.chain.id },\n    filters: {\n      address: debouncedSearchTerm,\n      resolved_to: filterValue.includes('resolved_to'),\n      owned_by: filterValue.includes('owned_by'),\n      only_active: !filterValue.includes('with_inactive'),\n      protocols: protocolsFilter.length > 0 ? protocolsFilter : undefined,\n    },\n    sorting: sortParams,\n    options: {\n      enabled: isAddressSearch,\n      placeholderData: generateListStub<'addresses_lookup'>(ENS_DOMAIN, 50, { next_page_params: undefined }),\n    },\n  });\n\n  const domainsLookupQuery = useQueryWithPages({\n    resourceName: 'domains_lookup',\n    pathParams: { chainId: config.chain.id },\n    filters: {\n      name: debouncedSearchTerm,\n      only_active: !filterValue.includes('with_inactive'),\n      protocols: protocolsFilter.length > 0 ? protocolsFilter : undefined,\n    },\n    sorting: sortParams,\n    options: {\n      enabled: !isAddressSearch,\n      placeholderData: generateListStub<'domains_lookup'>(ENS_DOMAIN, 50, { next_page_params: undefined }),\n    },\n  });\n\n  const protocolsQuery = useApiQuery('domain_protocols', {\n    pathParams: { chainId: config.chain.id },\n  });\n\n  const query = isAddressSearch ? addressesLookupQuery : domainsLookupQuery;\n  const { data, isError, isPlaceholderData: isLoading, onFilterChange, onSortingChange } = query;\n\n  React.useEffect(() => {\n    const hasInactiveFilter = filterValue.some((value) => value === 'with_inactive');\n    if (isAddressSearch) {\n      setFilterValue([ 'owned_by' as const, 'resolved_to' as const, hasInactiveFilter ? 'with_inactive' as const : undefined ].filter(Boolean));\n      onFilterChange<'addresses_lookup'>({\n        address: debouncedSearchTerm,\n        resolved_to: true,\n        owned_by: true,\n        only_active: !hasInactiveFilter,\n        protocols: protocolsFilter,\n      });\n    } else {\n      setFilterValue([ hasInactiveFilter ? 'with_inactive' as const : undefined ].filter(Boolean));\n      onFilterChange<'domains_lookup'>({\n        name: debouncedSearchTerm,\n        only_active: !hasInactiveFilter,\n        protocols: protocolsFilter,\n      });\n    }\n  // should run only the type of search changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ isAddressSearch ]);\n\n  const handleSortToggle = React.useCallback((event: React.MouseEvent) => {\n    if (isLoading) {\n      return;\n    }\n    const field = (event.currentTarget as HTMLDivElement).getAttribute('data-field') as SortField | undefined;\n\n    if (field) {\n      setSort((prevValue) => {\n        const nextSortValue = getNextSortValue(field)(prevValue);\n        onSortingChange(getSortParamsFromValue(nextSortValue));\n        return nextSortValue;\n      });\n    }\n  }, [ isLoading, onSortingChange ]);\n\n  const handleSearchTermChange = React.useCallback((value: string) => {\n    setSearchTerm(value);\n    const isAddressSearch = ADDRESS_REGEXP.test(value);\n    if (isAddressSearch) {\n      onFilterChange<'addresses_lookup'>({\n        address: value,\n        resolved_to: filterValue.includes('resolved_to'),\n        owned_by: filterValue.includes('owned_by'),\n        only_active: !filterValue.includes('with_inactive'),\n        protocols: protocolsFilter,\n      });\n    } else {\n      onFilterChange<'domains_lookup'>({\n        name: value,\n        only_active: !filterValue.includes('with_inactive'),\n        protocols: protocolsFilter,\n      });\n    }\n  }, [ onFilterChange, filterValue, protocolsFilter ]);\n\n  const handleFilterValueChange = React.useCallback((value: EnsDomainLookupFiltersOptions) => {\n    setFilterValue(value);\n\n    const isAddressSearch = ADDRESS_REGEXP.test(debouncedSearchTerm);\n    if (isAddressSearch) {\n      onFilterChange<'addresses_lookup'>({\n        address: debouncedSearchTerm,\n        resolved_to: value.includes('resolved_to'),\n        owned_by: value.includes('owned_by'),\n        only_active: !value.includes('with_inactive'),\n        protocols: protocolsFilter,\n      });\n    } else {\n      onFilterChange<'domains_lookup'>({\n        name: debouncedSearchTerm,\n        only_active: !value.includes('with_inactive'),\n        protocols: protocolsFilter,\n      });\n    }\n  }, [ debouncedSearchTerm, onFilterChange, protocolsFilter ]);\n\n  const handleProtocolsFilterChange = React.useCallback((nextValue: Array<string>) => {\n    setProtocolsFilter(nextValue);\n\n    const isAddressSearch = ADDRESS_REGEXP.test(debouncedSearchTerm);\n    if (isAddressSearch) {\n      onFilterChange<'addresses_lookup'>({\n        address: debouncedSearchTerm,\n        resolved_to: filterValue.includes('resolved_to'),\n        owned_by: filterValue.includes('owned_by'),\n        only_active: !filterValue.includes('with_inactive'),\n        protocols: nextValue,\n      });\n    } else {\n      onFilterChange<'domains_lookup'>({\n        name: debouncedSearchTerm,\n        only_active: !filterValue.includes('with_inactive'),\n        protocols: nextValue,\n      });\n    }\n  }, [ debouncedSearchTerm, filterValue, onFilterChange ]);\n\n  const hasActiveFilters = Boolean(debouncedSearchTerm) || filterValue.length > 0 ||\n    (protocolsQuery.data && protocolsQuery.data.items.length > 1 ? protocolsFilter.length > 0 : false);\n\n  const content = (\n    <>\n      <Show below=\"lg\" ssr={ false }>\n        <Box>\n          { data?.items.map((item, index) => (\n            <NameDomainsListItem\n              key={ item.id + (isLoading ? index : '') }\n              { ...item }\n              isLoading={ isLoading }\n            />\n          )) }\n        </Box>\n      </Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <NameDomainsTable\n          data={ data }\n          isLoading={ isLoading }\n          sort={ sort }\n          onSortToggle={ handleSortToggle }\n        />\n      </Hide>\n    </>\n  );\n\n  const actionBar = (\n    <NameDomainsActionBar\n      isLoading={ isLoading }\n      searchTerm={ searchTerm }\n      onSearchChange={ handleSearchTermChange }\n      filterValue={ filterValue }\n      onFilterValueChange={ handleFilterValueChange }\n      protocolsData={ protocolsQuery.data?.items }\n      protocolsFilterValue={ protocolsFilter }\n      onProtocolsFilterChange={ handleProtocolsFilterChange }\n      sort={ sort }\n      onSortChange={ setSort }\n      isAddressSearch={ isAddressSearch }\n      pagination={ query.pagination }\n    />\n  );\n\n  return (\n    <>\n      <PageTitle\n        title={ config.meta.seo.enhancedDataEnabled ? `${ config.chain.name } name domains` : 'Name services lookup' }\n        withTextAd\n      />\n      <DataListDisplay\n        isError={ isError }\n        items={ data?.items }\n        emptyText=\"There are no name domains.\"\n        filterProps={{\n          emptyFilteredText: `Couldn${ apos }t find name domains that match your filter query.`,\n          hasActiveFilters,\n        }}\n        content={ content }\n        actionBar={ actionBar }\n      />\n    </>\n  );\n};\n\nexport default NameDomains;\n","import { Box, Text, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport EmptySearchResult from 'ui/shared/EmptySearchResult';\n\nimport DataFetchAlert from './DataFetchAlert';\n\ntype FilterProps = {\n  hasActiveFilters: boolean;\n  emptyFilteredText: string;\n};\n\ntype Props = {\n  isError: boolean;\n  items?: Array<unknown>;\n  emptyText: React.ReactNode;\n  actionBar?: React.ReactNode;\n  showActionBarIfEmpty?: boolean;\n  content: React.ReactNode;\n  className?: string;\n  filterProps?: FilterProps;\n};\n\nconst DataListDisplay = (props: Props) => {\n  if (props.isError) {\n    return <DataFetchAlert className={ props.className }/>;\n  }\n\n  if (props.filterProps?.hasActiveFilters && !props.items?.length) {\n    return (\n      <Box className={ props.className }>\n        { props.actionBar }\n        <EmptySearchResult text={ props.filterProps.emptyFilteredText }/>\n      </Box>\n    );\n  }\n\n  if (!props.items?.length) {\n    return (\n      <>\n        { props.showActionBarIfEmpty && props.actionBar }\n        { props.emptyText && <Text className={ props.className }>{ props.emptyText }</Text> }\n      </>\n    );\n  }\n\n  return (\n    <Box className={ props.className }>\n      { props.actionBar }\n      { props.content }\n    </Box>\n  );\n};\n\nexport default chakra(DataListDisplay);\n","import { Grid, chakra, GridItem } from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\n\ninterface ContainerProps {\n  className?: string;\n  isAnimated?: boolean;\n  children: React.ReactNode;\n}\n\nconst Container = chakra(({ isAnimated, children, className }: ContainerProps) => {\n  return (\n    <Grid\n      as={ motion.div }\n      w=\"100%\"\n      initial={ isAnimated ? { opacity: 0, scale: 0.97 } : { opacity: 1, scale: 1 } }\n      animate={{ opacity: 1, scale: 1 }}\n      transitionDuration=\"normal\"\n      transitionTimingFunction=\"linear\"\n      rowGap={ 2 }\n      columnGap={ 2 }\n      gridTemplateColumns=\"86px auto\"\n      alignItems=\"start\"\n      paddingY={ 4 }\n      borderColor=\"divider\"\n      borderTopWidth=\"1px\"\n      _last={{\n        borderBottomWidth: '1px',\n      }}\n      className={ className }\n      fontSize=\"sm\"\n      lineHeight=\"20px\"\n    >\n      { children }\n    </Grid>\n  );\n});\n\ninterface LabelProps {\n  className?: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n}\n\nconst Label = chakra(({ children, className, isLoading }: LabelProps) => {\n  return (\n    <Skeleton\n      className={ className }\n      isLoaded={ !isLoading }\n      fontWeight={ 500 }\n      my=\"5px\"\n      justifySelf=\"start\"\n    >\n      { children }\n    </Skeleton>\n  );\n});\n\ninterface ValueProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst Value = chakra(({ children, className }: ValueProps) => {\n  return (\n    <GridItem\n      className={ className }\n      py=\"5px\"\n      color=\"text_secondary\"\n      overflow=\"hidden\"\n    >\n      { children }\n    </GridItem>\n  );\n});\n\nconst ListItemMobileGrid = {\n  Container,\n  Label,\n  Value,\n};\n\nexport default ListItemMobileGrid;\n","import { Thead, useColorModeValue } from '@chakra-ui/react';\nimport type { TableHeadProps, PositionProps } from '@chakra-ui/react';\nimport { throttle } from 'es-toolkit';\nimport React from 'react';\n\ninterface Props extends TableHeadProps {\n  top?: number;\n  children?: React.ReactNode;\n}\n\nconst TheadSticky = ({ top, children, ...restProps }: Props) => {\n  const ref = React.useRef<HTMLTableSectionElement>(null);\n  const [ isSticky, setIsSticky ] = React.useState(false);\n\n  const handleScroll = React.useCallback(() => {\n    if (Number(ref.current?.getBoundingClientRect().y) <= (top || 0)) {\n      setIsSticky(true);\n    } else {\n      setIsSticky(false);\n    }\n  }, [ top ]);\n\n  React.useEffect(() => {\n    const throttledHandleScroll = throttle(handleScroll, 300);\n\n    window.addEventListener('scroll', throttledHandleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', throttledHandleScroll);\n    };\n  }, [ handleScroll ]);\n\n  const props = {\n    ...restProps,\n    position: 'sticky' as PositionProps['position'],\n    top: top ? `${ top }px` : 0,\n    backgroundColor: useColorModeValue('white', 'black'),\n    boxShadow: isSticky ? 'md' : 'none',\n    zIndex: '1',\n  };\n\n  return (\n    <Thead { ...props } ref={ ref }>\n      { children }\n    </Thead>\n  );\n};\n\nexport default TheadSticky;\n","import type { As } from '@chakra-ui/react';\nimport { Box, Button, Circle, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst FilterIcon = <IconSvg name=\"filter\" boxSize={ 5 } mr={{ base: 0, lg: 2 }}/>;\n\ninterface Props {\n  isActive?: boolean;\n  isLoading?: boolean;\n  appliedFiltersNum?: number;\n  onClick: () => void;\n  as?: As;\n}\n\nconst FilterButton = ({ isActive, isLoading, appliedFiltersNum, onClick, as }: Props, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  const badgeColor = useColorModeValue('white', 'black');\n  const badgeBgColor = useColorModeValue('blue.700', 'gray.50');\n\n  if (isLoading) {\n    return <Skeleton w={{ base: 9, lg: '78px' }} h={ 8 } borderRadius=\"base\" flexShrink={ 0 }/>;\n  }\n\n  const num = (\n    <Circle\n      className=\"AppliedFiltersNum\"\n      bg={ isActive ? 'link_hovered' : badgeBgColor }\n      size={ 5 }\n      color={ badgeColor }\n    >\n      { appliedFiltersNum }\n    </Circle>\n  );\n\n  return (\n    <Button\n      ref={ ref }\n      rightIcon={ appliedFiltersNum ? num : undefined }\n      size=\"sm\"\n      fontWeight=\"500\"\n      variant=\"outline\"\n      colorScheme=\"gray\"\n      onClick={ onClick }\n      isActive={ isActive }\n      data-selected={ Boolean(appliedFiltersNum) }\n      px={ 1.5 }\n      flexShrink={ 0 }\n      as={ as }\n      pointerEvents=\"all\"\n      _hover={ isActive ? {\n        color: 'link_hovered',\n        '.AppliedFiltersNum': {\n          bg: 'link_hovered',\n        },\n      } : undefined }\n    >\n      { FilterIcon }\n      <Box display={{ base: 'none', lg: 'block' }}>Filter</Box>\n    </Button>\n  );\n};\n\nexport default React.forwardRef(FilterButton);\n","import { chakra, Input, InputGroup, InputLeftElement, InputRightElement, useColorModeValue } from '@chakra-ui/react';\nimport type { ChangeEvent } from 'react';\nimport React, { useCallback, useState } from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport ClearButton from 'ui/shared/ClearButton';\nimport IconSvg from 'ui/shared/IconSvg';\n\ntype Props = {\n  onChange?: (searchTerm: string) => void;\n  className?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  placeholder: string;\n  initialValue?: string;\n  isLoading?: boolean;\n  type?: React.HTMLInputTypeAttribute;\n  name?: string;\n};\n\nconst FilterInput = ({ onChange, className, size = 'sm', placeholder, initialValue, isLoading, type, name }: Props) => {\n  const [ filterQuery, setFilterQuery ] = useState(initialValue || '');\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const iconColor = useColorModeValue('blackAlpha.600', 'whiteAlpha.600');\n\n  const handleFilterQueryChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setFilterQuery(value);\n    onChange?.(value);\n  }, [ onChange ]);\n\n  const handleFilterQueryClear = useCallback(() => {\n    setFilterQuery('');\n    onChange?.('');\n    inputRef?.current?.focus();\n  }, [ onChange ]);\n\n  return (\n    <Skeleton\n      isLoaded={ !isLoading }\n      className={ className }\n      minW=\"250px\"\n      borderRadius=\"base\"\n    >\n      <InputGroup\n        size={ size }\n      >\n        <InputLeftElement\n          pointerEvents=\"none\"\n        >\n          <IconSvg name=\"search\" color={ iconColor } boxSize={ 4 }/>\n        </InputLeftElement>\n\n        <Input\n          ref={ inputRef }\n          size={ size }\n          value={ filterQuery }\n          onChange={ handleFilterQueryChange }\n          placeholder={ placeholder }\n          borderWidth=\"2px\"\n          textOverflow=\"ellipsis\"\n          whiteSpace=\"nowrap\"\n          type={ type }\n          name={ name }\n        />\n\n        { filterQuery ? (\n          <InputRightElement>\n            <ClearButton onClick={ handleFilterQueryClear }/>\n          </InputRightElement>\n        ) : null }\n      </InputGroup>\n    </Skeleton>\n  );\n};\n\nexport default chakra(FilterInput);\n","import type { PopoverContentProps } from '@chakra-ui/react';\nimport {\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport Popover from 'ui/shared/chakra/Popover';\nimport FilterButton from 'ui/shared/filters/FilterButton';\n\ninterface Props {\n  appliedFiltersNum?: number;\n  children: React.ReactNode;\n  contentProps?: PopoverContentProps;\n  isLoading?: boolean;\n}\n\nconst PopoverFilter = ({ appliedFiltersNum, children, contentProps, isLoading }: Props) => {\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  return (\n    <Popover isOpen={ isOpen } onClose={ onClose } placement=\"bottom-start\" isLazy>\n      <PopoverTrigger>\n        <FilterButton\n          isActive={ isOpen }\n          onClick={ onToggle }\n          appliedFiltersNum={ appliedFiltersNum }\n          isLoading={ isLoading }\n        />\n      </PopoverTrigger>\n      <PopoverContent { ...contentProps }>\n        <PopoverBody px={ 4 } py={ 6 } display=\"flex\" flexDir=\"column\" rowGap={ 5 }>\n          { children }\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default React.memo(PopoverFilter);\n","export default function getNextSortValue<SortField extends string, Sort extends string>(\n  sortSequence: Record<SortField, Array<Sort | undefined>>, field: SortField,\n) {\n  return (prevValue: Sort | undefined) => {\n    const sequence = sortSequence[field];\n    return getNextValueFromSequence(sequence, prevValue);\n  };\n}\n\nexport function getNextValueFromSequence<T>(sequence: Array<T>, prevValue: T) {\n  const curIndex = sequence.findIndex((val) => val === prevValue);\n  const nextIndex = curIndex + 1 > sequence.length - 1 ? 0 : curIndex + 1;\n  return sequence[nextIndex];\n}\n\n// asc desc undefined\ntype Order = 'asc' | 'desc' | undefined;\nconst sequence: Array<Order> = [ 'desc', 'asc', undefined ];\nexport const getNextOrderValue = (getNextValueFromSequence<Order>).bind(undefined, sequence);\n","export default function getSortParamsFromValue<SortValue extends string, SortField extends string, SortOrder extends string>(val?: SortValue) {\n  if (!val) {\n    return undefined;\n  }\n\n  const sortingChunks = val.split('-') as [ SortField, SortOrder ];\n  return { sort: sortingChunks[0], order: sortingChunks[1] };\n}\n","import type { SelectOption } from 'ui/shared/select/types';\n\nimport type { Query } from 'nextjs-routes';\n\nexport default function getSortValueFromQuery<SortValue extends string>(query: Query, sortOptions: Array<SelectOption<SortValue>>) {\n  if (!query.sort || !query.order) {\n    return undefined;\n  }\n\n  const str = query.sort + '-' + query.order;\n  if (sortOptions.map(option => option.value).includes(str as SortValue)) {\n    return str as SortValue;\n  }\n}\n"],"names":["useIsInitialLoading","isLoading","isInitialLoading","setIsInitialLoading","React","Boolean","ENS_DOMAIN","id","name","tokens","contract_hash","ADDRESS_HASH","type","bens","NATIVE_DOMAIN_TOKEN","owner","ADDRESS_PARAMS","resolved_address","registrant","registration_date","expiry_date","other_addresses","ETH","protocol","undefined","resolved_with_wildcard","stored_offchain","transaction_hash","TX_HASH","timestamp","from_address","action","hash","implementations","is_contract","is_verified","private_tags","public_tags","watchlist_names","ens_domain_name","fee","value","gas_limit","block_number","status","method","confirmations","exchange_rate","to","transaction_burnt_fee","max_fee_per_gas","result","gas_price","priority_fee","base_fee_per_gas","from","token_transfers","transaction_types","gas_used","created_contract","position","nonce","has_error_in_internal_transactions","actions","decoded_input","token_transfers_overflow","raw_input","max_priority_fee_per_gas","revert_reason","confirmation_duration","transaction_tag","TX","zkevm_batch_number","zkevm_sequence_hash","zkevm_status","zkevm_verify_hash","pending_transactions_count","transaction_fees_avg_24h","transaction_fees_sum_24h","transactions_count_24h","date","NameDomainExpiryStatus","dayjs","isBefore","chakra","span","color","diff","fromNow","SORT_OPTIONS","label","getNextSortValue","bind","SORT_SEQUENCE","searchTerm","NameDomainsActionBar","onSearchChange","filterValue","onFilterValueChange","sort","onSortChange","isAddressSearch","pagination","protocolsData","protocolsFilterValue","onProtocolsFilterChange","searchInput","FilterInput","w","base","lg","minW","size","onChange","placeholder","initialValue","handleProtocolReset","filterGroupDivider","Box","borderBottomWidth","borderBottomColor","my","appliedFiltersNum","length","filter","PopoverFilter","contentProps","div","Flex","justifyContent","fontSize","mb","Text","fontWeight","variant","Link","onClick","_hover","CheckboxGroup","defaultValue","VStack","gap","alignItems","map","topLevelDomains","tld_list","domain","join","Checkbox","Image","src","icon_url","boxSize","borderRadius","mr","alt","title","fallback","IconSvg","fallbackStrategy","short_name","whiteSpace","isDisabled","display","mt","sortButton","Sort","options","HStack","spacing","ActionBar","isVisible","Pagination","ml","NameDomainsListItem","resolvedAddress","registrationDate","expiryDate","ListItemMobileGrid","Container","Label","Value","EnsEntity","AddressEntity","address","Skeleton","isLoaded","format","NameDomainsTableItem","Tr","Td","verticalAlign","pl","data","NameDomainsTable","onSortToggle","sortIconTransform","toLowerCase","includes","Table","Thead","top","ACTION_BAR_HEIGHT_DESKTOP","Th","width","data-field","transform","left","Tbody","items","item","index","protocolsQuery","router","NameDomains","useRouter","q","getQueryParamString","query","ownedBy","owned_by","resolvedTo","resolved_to","onlyActive","only_active","protocols","Array","isArray","split","initialFilters","initialSort","getSortValueFromQuery","setSearchTerm","setFilterValue","setSort","protocolsFilter","setProtocolsFilter","debouncedSearchTerm","useDebounce","ADDRESS_REGEXP","test","sortParams","getSortParamsFromValue","addressesLookupQuery","useQueryWithPages","resourceName","pathParams","chainId","config","chain","filters","sorting","enabled","placeholderData","generateListStub","next_page_params","domainsLookupQuery","useApiQuery","isError","isPlaceholderData","onFilterChange","onSortingChange","hasInactiveFilter","some","handleSortToggle","field","currentTarget","getAttribute","nextSortValue","prevValue","handleSearchTermChange","handleFilterValueChange","handleProtocolsFilterChange","nextValue","hasActiveFilters","content","Show","below","ssr","Hide","actionBar","PageTitle","meta","seo","enhancedDataEnabled","withTextAd","DataListDisplay","filterProps","emptyFilteredText","apos","props","DataFetchAlert","className","EmptySearchResult","text","showActionBarIfEmpty","emptyText","isAnimated","children","Grid","as","motion","initial","opacity","scale","animate","transitionDuration","transitionTimingFunction","rowGap","columnGap","gridTemplateColumns","paddingY","borderColor","borderTopWidth","_last","lineHeight","justifySelf","GridItem","py","overflow","restProps","ref","TheadSticky","isSticky","setIsSticky","handleScroll","Number","current","getBoundingClientRect","y","throttledHandleScroll","throttle","window","addEventListener","removeEventListener","backgroundColor","useColorModeValue","boxShadow","zIndex","FilterIcon","FilterButton","isActive","badgeColor","badgeBgColor","h","flexShrink","num","Circle","bg","Button","rightIcon","colorScheme","data-selected","px","pointerEvents","filterQuery","setFilterQuery","useState","inputRef","iconColor","handleFilterQueryChange","useCallback","event","target","handleFilterQueryClear","focus","InputGroup","InputLeftElement","Input","borderWidth","textOverflow","InputRightElement","ClearButton","isOpen","onToggle","onClose","useDisclosure","Popover","placement","isLazy","PopoverTrigger","PopoverContent","PopoverBody","flexDir","sortSequence","getNextValueFromSequence","sequence","curIndex","findIndex","val","nextIndex","getNextOrderValue","sortingChunks","order","sortOptions","str","option"],"sourceRoot":"","ignoreList":[]}
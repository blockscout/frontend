{"version":3,"file":"static/chunks/2295.9a6f98d676a3eda2.js","mappings":"8OAUA,IAAMA,EAAUC,EAAAA,CAAMA,CAACC,QAAQ,CAACC,cAAc,CAExCC,EAAe,CACnB,sBAAuB,CACrBC,gBAAiB,OACnB,CACF,EAuDA,EArDgB,KAEd,GAAM,WAAEC,CAAS,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAmDTC,CAnDSD,CAAYA,GAE5BE,EAAeC,EAiDA,KAjDOC,YAAY,CAACC,OAAO,CAAC,kBAG3C,CAAEC,EAAgBC,EAAmB,CAAGC,EAAAA,QAAc,CAACN,GAW7D,GATAM,EAAAA,SAAe,CAAC,KACVC,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,IACPP,IAAiBH,IACnBI,OAD8B,YACX,CAACO,OAAO,CAAC,iBAAkBX,GAC9CQ,EAAkBR,GAGxB,EAAG,CAAEA,EAAWG,EAAc,EAE1B,CAACT,EAAQkB,SAAS,CACpB,CADsB,MACf,KAGT,IAAMC,EAAe,qCAEgB,OAAvBnB,EAAQoB,aAAa,CAAE,qFAS/BC,EAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAAC,WAEtBC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAAC,CACpCC,IAAKJ,CAMP,GAEA,MACE,UAACK,EAAAA,EAAGA,CAAAA,CAACC,EAAE,QAAQC,UAAU,SAASC,GAAKzB,WACrC,UAACsB,EAAAA,EAAGA,CAAAA,CAACC,EAAE,QAAQG,KAAK,QAAQD,GAAKzB,WAC/B,UAAC2B,EAAAA,EAAQA,CAAAA,CAACR,QAAUA,EAAUS,aAAeb,GAAqBN,MAI1E","sources":["webpack://_N_E/./ui/graphQL/GraphQL.tsx"],"sourcesContent":["import { Box, useColorMode } from '@chakra-ui/react';\nimport { createGraphiQLFetcher } from '@graphiql/toolkit';\nimport { GraphiQL } from 'graphiql';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport buildUrl from 'lib/api/buildUrl';\nimport 'graphiql/graphiql.css';\nimport isBrowser from 'lib/isBrowser';\n\nconst feature = config.features.graphqlApiDocs;\n\nconst graphQLStyle = {\n  '.graphiql-container': {\n    backgroundColor: 'unset',\n  },\n};\n\nconst GraphQL = () => {\n\n  const { colorMode } = useColorMode();\n\n  const graphqlTheme = window.localStorage.getItem('graphiql:theme');\n\n  // colorModeState used as a key to re-render GraphiQL conponent after color mode change\n  const [ colorModeState, setColorModeState ] = React.useState(graphqlTheme);\n\n  React.useEffect(() => {\n    if (isBrowser()) {\n      if (graphqlTheme !== colorMode) {\n        window.localStorage.setItem('graphiql:theme', colorMode);\n        setColorModeState(colorMode);\n      }\n    }\n  }, [ colorMode, graphqlTheme ]);\n\n  if (!feature.isEnabled) {\n    return null;\n  }\n\n  const initialQuery = `{\n    transaction(\n      hash: \"${ feature.defaultTxHash }\"\n    ) {\n      hash\n      blockNumber\n      value\n      gasUsed\n    }\n  }`;\n\n  const graphqlUrl = buildUrl('graphql');\n\n  const fetcher = createGraphiQLFetcher({\n    url: graphqlUrl,\n    // graphql ws implementation with absinthe plugin is incompatible with graphiql-ws protocol\n    // or the older one subscriptions-transport-ws\n    // so we (isstuev & vbaranov) decided to configure playground without subscriptions\n    // in case of any complaint consider reconfigure the graphql ws server with absinthe_graphql_ws package\n    // subscriptionUrl: `wss://${config.app.host}/socket/`,\n  });\n\n  return (\n    <Box h=\"100vh\" overflowX=\"scroll\" sx={ graphQLStyle }>\n      <Box h=\"100vh\" minW=\"900px\" sx={ graphQLStyle }>\n        <GraphiQL fetcher={ fetcher } defaultQuery={ initialQuery } key={ colorModeState }/>\n      </Box>\n    </Box>\n  );\n};\n\nexport default GraphQL;\n"],"names":["feature","config","features","graphqlApiDocs","graphQLStyle","backgroundColor","colorMode","useColorMode","GraphQL","graphqlTheme","window","localStorage","getItem","colorModeState","setColorModeState","React","isBrowser","setItem","isEnabled","initialQuery","defaultTxHash","graphqlUrl","buildUrl","fetcher","createGraphiQLFetcher","url","Box","h","overflowX","sx","minW","GraphiQL","defaultQuery"],"sourceRoot":"","ignoreList":[]}
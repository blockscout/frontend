{"version":3,"file":"static/chunks/7513.9bc71102cc93a6e3.js","mappings":"gFAAA,MAAmB,EAAQ,KAAa,EACxC,EAAiB,EAAQ,IAAW,EACpC,EAAe,EAAQ,KAAS,EADR,EAGxB,QAFsB,CAEtB,gCA6BA,UA3BA,UAEA,QADA,KACA,UACA,6BACA,6BACA,SAA4B,KAAW,IAAK,KAAW,IAAK,KAAW,GACvE,SAA4B,KAAW,IAAK,KAAW,IAAK,KAAW,GACvE,MAEA,eACA,kCAAsC,EAAG,8BACzC,mCAAuC,EAAG,+CAE1C;AACA,OAAQ,oBAA8B,EAAK,cAAc,EAAK,SAAY;AAC1E;AACA,8DAA8D,EAAG;AACjE,0BAA0B,EAAU;AACpC,0BAA0B,EAAU;AACpC;AACA;AACA;AACA,MAAM;AACN;AACA,oBC9BA,eAGA,CAFA,YACA,YACA,mBACA,OACA,wBAEA,EAyBA,UAtBA,UACA,UAGA,GAFA,OAEA,KACA,YACI,CACJ,2BACA,QAEA,eACA,WACA,cACA,CAEA,OACA,4CACA,4CACA,4CACA,YCrBA,UARA,SACA,CACA,QACA,kBACA,kBACA,yBCWA,UAdA,YAIA,IAHA,WACA,WAEA,GACA,yBAMA,YACA","sources":["webpack://_N_E/./node_modules/gradient-avatar/index.js","webpack://_N_E/./node_modules/hsl-rgb/index.js","webpack://_N_E/./node_modules/hsl-triad/index.js","webpack://_N_E/./node_modules/string-hash/index.js"],"sourcesContent":["const stringHash = require('string-hash');\nconst hslTriad = require('hsl-triad');\nconst hslRgb = require('hsl-rgb');\n\nconst uniqueID = () => Math.floor(Math.random() * Date.now());\n\nconst avatar = (str, size, shapeType) => {\n  const hash = stringHash(str);\n  const colors = hslTriad(hash % 360, 1, 0.5);\n  const color1 = hslRgb(colors[0][0], colors[0][1], colors[0][2]);\n  const color2 = hslRgb(colors[1][0], colors[1][1], colors[1][2]);\n  const color1str = `rgb(${ color1[0] }, ${ color1[1] }, ${ color1[2] })`;\n  const color2str = `rgb(${ color2[0] }, ${ color2[1] }, ${ color2[2] })`;\n  const id = uniqueID();\n\n  const shape = shapeType === 'circle' ? \n    `<circle id=\"Circle\" fill=\"url(#${id})\" cx=\"40\" cy=\"40\" r=\"40\" />` : \n    `<rect id=\"Rectangle\" fill=\"url(#${id})\" x=\"0\" y=\"0\" width=\"80\" height=\"80\"></rect>`;\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg ${ size != undefined ? `width=\"${size}px\" height=\"${size}px\"` : '' } viewBox=\"0 0 80 80\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <defs>\n    <linearGradient x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" id=\"${id}\">\n      <stop stop-color=\"${color1str}\" offset=\"0%\"></stop>\n      <stop stop-color=\"${color2str}\" offset=\"100%\"></stop>\n    </linearGradient>\n  </defs>\n  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n    ${shape}\n  </g>\n</svg>`;\n};\n\nmodule.exports = avatar;\n","const hue = (p, q, t) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1/6) return p + (q - p) * 6 * t;\n  if (t < 1/2) return q;\n  if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\n  return p;\n}\n\nconst hslRgb = (h, s, l) => {\n  let r, g, b;\n  h = h / 360;\n\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue(p, q, h + 1/3);\n    g = hue(p, q, h);\n    b = hue(p, q, h - 1/3);\n  }\n\n  return [\n    Math.max(0, Math.min(Math.round(r * 255), 255)),\n    Math.max(0, Math.min(Math.round(g * 255), 255)),\n    Math.max(0, Math.min(Math.round(b * 255), 255)) \n  ];\n};\n\nmodule.exports = hslRgb;","const hslTriad = (h, s, l) => {\r\n  return [\r\n    [h, s, l],\r\n    [(h + 120) % 360, s, l],\r\n    [(h + 240) % 360, s, l],\r\n  ]\r\n};\r\n\r\nmodule.exports = hslTriad;","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
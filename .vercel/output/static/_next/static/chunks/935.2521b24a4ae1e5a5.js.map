{"version":3,"file":"static/chunks/935.2521b24a4ae1e5a5.js","mappings":"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","sources":["webpack://_N_E/./ui/pages/BlockCountdownIndex.tsx","webpack://_N_E/./ui/shared/filters/FilterInput.tsx"],"sourcesContent":["import { chakra, Box, Center, Heading, useColorModeValue } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport FilterInput from 'ui/shared/filters/FilterInput';\nimport IconSvg from 'ui/shared/IconSvg';\n\nconst BlockCountdownIndex = () => {\n  const router = useRouter();\n  const iconColor = useColorModeValue('gray.300', 'gray.600');\n\n  const handleFormSubmit = React.useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formData = new FormData(event.target as HTMLFormElement);\n    const searchTerm = formData.get('search_term');\n    if (typeof searchTerm === 'string' && searchTerm) {\n      router.push({ pathname: '/block/countdown/[height]', query: { height: searchTerm } }, undefined, { shallow: true });\n    }\n  }, [ router ]);\n\n  return (\n    <Center h=\"100%\" justifyContent={{ base: 'flex-start', lg: 'center' }} flexDir=\"column\" textAlign=\"center\" pt={{ base: 8, lg: 0 }}>\n      <IconSvg name=\"block_countdown\" color={ iconColor } w={{ base: '160px', lg: '240px' }} h={{ base: '123px', lg: '184px' }}/>\n      <Heading\n        fontSize={{ base: '18px', lg: '32px' }}\n        lineHeight={{ base: '24px', lg: '40px' }}\n        h={{ base: '24px', lg: '40px' }}\n        mt={{ base: 3, lg: 6 }}\n      >\n        Block countdown\n      </Heading>\n      <Box mt={ 2 }>\n        The estimated time for a block to be created and added to the blockchain.\n      </Box>\n      <chakra.form\n        noValidate\n        onSubmit={ handleFormSubmit }\n        w={{ base: '100%', lg: '360px' }}\n        mt={{ base: 3, lg: 6 }}\n      >\n        <FilterInput\n          placeholder=\"Search by block number\"\n          size=\"xs\"\n          type=\"number\"\n          name=\"search_term\"\n        />\n      </chakra.form>\n    </Center>\n  );\n};\n\nexport default React.memo(BlockCountdownIndex);\n","import { chakra, Input, InputGroup, InputLeftElement, InputRightElement, useColorModeValue } from '@chakra-ui/react';\nimport type { ChangeEvent } from 'react';\nimport React, { useCallback, useState } from 'react';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport ClearButton from 'ui/shared/ClearButton';\nimport IconSvg from 'ui/shared/IconSvg';\n\ntype Props = {\n  onChange?: (searchTerm: string) => void;\n  className?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  placeholder: string;\n  initialValue?: string;\n  isLoading?: boolean;\n  type?: React.HTMLInputTypeAttribute;\n  name?: string;\n};\n\nconst FilterInput = ({ onChange, className, size = 'sm', placeholder, initialValue, isLoading, type, name }: Props) => {\n  const [ filterQuery, setFilterQuery ] = useState(initialValue || '');\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const iconColor = useColorModeValue('blackAlpha.600', 'whiteAlpha.600');\n\n  const handleFilterQueryChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setFilterQuery(value);\n    onChange?.(value);\n  }, [ onChange ]);\n\n  const handleFilterQueryClear = useCallback(() => {\n    setFilterQuery('');\n    onChange?.('');\n    inputRef?.current?.focus();\n  }, [ onChange ]);\n\n  return (\n    <Skeleton\n      isLoaded={ !isLoading }\n      className={ className }\n      minW=\"250px\"\n      borderRadius=\"base\"\n    >\n      <InputGroup\n        size={ size }\n      >\n        <InputLeftElement\n          pointerEvents=\"none\"\n        >\n          <IconSvg name=\"search\" color={ iconColor } boxSize={ 4 }/>\n        </InputLeftElement>\n\n        <Input\n          ref={ inputRef }\n          size={ size }\n          value={ filterQuery }\n          onChange={ handleFilterQueryChange }\n          placeholder={ placeholder }\n          borderWidth=\"2px\"\n          textOverflow=\"ellipsis\"\n          whiteSpace=\"nowrap\"\n          type={ type }\n          name={ name }\n        />\n\n        { filterQuery ? (\n          <InputRightElement>\n            <ClearButton onClick={ handleFilterQueryClear }/>\n          </InputRightElement>\n        ) : null }\n      </InputGroup>\n    </Skeleton>\n  );\n};\n\nexport default chakra(FilterInput);\n"],"names":["React","router","useRouter","BlockCountdownIndex","iconColor","useColorModeValue","handleFormSubmit","event","preventDefault","searchTerm","FormData","target","get","push","pathname","query","height","undefined","shallow","Center","h","justifyContent","base","lg","flexDir","textAlign","pt","IconSvg","name","color","w","Heading","fontSize","lineHeight","mt","Box","chakra","form","noValidate","onSubmit","FilterInput","placeholder","size","type","onChange","className","initialValue","isLoading","filterQuery","setFilterQuery","useState","inputRef","handleFilterQueryChange","useCallback","value","handleFilterQueryClear","current","focus","Skeleton","isLoaded","minW","borderRadius","InputGroup","InputLeftElement","pointerEvents","boxSize","Input","ref","borderWidth","textOverflow","whiteSpace","InputRightElement","ClearButton","onClick"],"sourceRoot":"","ignoreList":[]}
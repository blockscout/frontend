{"version":3,"file":"static/chunks/3765.07d6dd2301286b42.js","mappings":"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","sources":["webpack://_N_E/./stubs/txInterpretation.ts","webpack://_N_E/./ui/shared/DetailsActionsWrapper.tsx","webpack://_N_E/./ui/shared/DetailsInfoItemDivider.tsx","webpack://_N_E/./ui/shared/DetailsTimestamp.tsx","webpack://_N_E/./ui/shared/Tabs/TabsSkeleton.tsx","webpack://_N_E/./ui/shared/tx/interpretation/utils.ts","webpack://_N_E/./ui/shared/tx/interpretation/TxInterpretation.tsx","webpack://_N_E/./ui/tx/TxLogs.tsx","webpack://_N_E/./ui/tx/TxPendingAlert.tsx","webpack://_N_E/./ui/tx/TxSocketAlert.tsx","webpack://_N_E/./ui/tx/TxTokenTransfer.tsx","webpack://_N_E/./ui/tx/useTxQuery.tsx"],"sourcesContent":["import type { TxInterpretationResponse } from 'types/api/txInterpretation';\n\nimport { TOKEN_INFO_ERC_20 } from './token';\n\nexport const TX_INTERPRETATION: TxInterpretationResponse = {\n  data: {\n    summaries: [\n      {\n        summary_template: '{action_type} {source_amount} Ether into {destination_amount} {destination_token}',\n        summary_template_variables: {\n          action_type: { type: 'string', value: 'Wrap' },\n          source_amount: { type: 'currency', value: '0.7' },\n          destination_amount: { type: 'currency', value: '0.7' },\n          destination_token: {\n            type: 'token',\n            value: TOKEN_INFO_ERC_20,\n          },\n        },\n      },\n      {\n        summary_template: '{action_type} {source_amount} Ether into {destination_amount} {destination_token}',\n        summary_template_variables: {\n          action_type: { type: 'string', value: 'Wrap' },\n          source_amount: { type: 'currency', value: '0.7' },\n          destination_amount: { type: 'currency', value: '0.7' },\n          destination_token: {\n            type: 'token',\n            value: TOKEN_INFO_ERC_20,\n          },\n        },\n      },\n    ],\n  },\n};\n","import React from 'react';\n\nimport * as DetailsInfoItem from 'ui/shared/DetailsInfoItem';\n\nexport const TX_ACTIONS_BLOCK_ID = 'tx-actions';\n\ntype Props = {\n  children: React.ReactNode;\n  isLoading?: boolean;\n  type: 'tx' | 'user_op';\n};\n\nconst DetailsActionsWrapper = ({ children, isLoading, type }: Props) => {\n  const [ hasScroll, setHasScroll ] = React.useState(false);\n\n  return (\n    <>\n      <DetailsInfoItem.Label\n        id={ TX_ACTIONS_BLOCK_ID }\n        hint={ `Highlighted events of the ${ type === 'tx' ? 'transaction' : 'user operation' }` }\n        isLoading={ isLoading }\n        hasScroll={ hasScroll }\n      >\n        <span>{ `${ type === 'tx' ? 'Transaction' : 'User operation' } action` }</span>\n      </DetailsInfoItem.Label>\n      <DetailsInfoItem.ValueWithScroll\n        gradientHeight={ 48 }\n        onScrollVisibilityChange={ setHasScroll }\n        alignItems=\"stretch\"\n        rowGap={ 5 }\n        w=\"100%\"\n        maxH=\"200px\"\n      >\n        { children }\n      </DetailsInfoItem.ValueWithScroll>\n\n    </>\n  );\n};\n\nexport default React.memo(DetailsActionsWrapper);\n","import type { ResponsiveValue } from '@chakra-ui/react';\nimport { GridItem, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  className?: string;\n  id?: string;\n  colSpan?: ResponsiveValue<number | 'auto'>;\n}\n\nconst DetailsInfoItemDivider = ({ className, id, colSpan }: Props) => {\n  return (\n    <GridItem\n      id={ id }\n      className={ className }\n      colSpan={ colSpan || { base: undefined, lg: 2 } }\n      mt={{ base: 2, lg: 3 }}\n      mb={{ base: 0, lg: 3 }}\n      borderBottom=\"1px solid\"\n      borderColor=\"divider\"\n    />\n  );\n};\n\nexport default chakra(DetailsInfoItemDivider);\n","import React from 'react';\n\nimport dayjs from 'lib/date/dayjs';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport IconSvg from 'ui/shared/IconSvg';\nimport TextSeparator from 'ui/shared/TextSeparator';\n\ntype Props = {\n  // should be string, will be fixed on the back-end\n  timestamp: string | number;\n  isLoading?: boolean;\n};\n\nconst DetailsTimestamp = ({ timestamp, isLoading }: Props) => {\n  return (\n    <>\n      <IconSvg name=\"clock\" boxSize={ 5 } color=\"gray.500\" isLoading={ isLoading }/>\n      <Skeleton isLoaded={ !isLoading } ml={ 2 }>\n        { dayjs(timestamp).fromNow() }\n      </Skeleton>\n      <TextSeparator color=\"gray.500\"/>\n      <Skeleton isLoaded={ !isLoading } whiteSpace=\"normal\">\n        { dayjs(timestamp).format('llll') }\n      </Skeleton>\n    </>\n  );\n};\n\nexport default DetailsTimestamp;\n","import { Flex, chakra, Box, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { RoutedTab } from '../Tabs/types';\n\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport useTabIndexFromQuery from 'ui/shared/Tabs/useTabIndexFromQuery';\n\ntype TabSize = 'sm' | 'md';\n\nconst SkeletonTabText = ({ size, title }: { size: TabSize; title: RoutedTab['title'] }) => (\n  <Skeleton\n    borderRadius=\"base\"\n    borderWidth={ size === 'sm' ? '2px' : 0 }\n    fontWeight={ 600 }\n    mx={ size === 'sm' ? 3 : 4 }\n    flexShrink={ 0 }\n  >\n    { typeof title === 'string' ? title : title() }\n  </Skeleton>\n);\n\ninterface Props {\n  className?: string;\n  tabs: Array<RoutedTab>;\n  size?: 'sm' | 'md';\n}\n\nconst TabsSkeleton = ({ className, tabs, size = 'md' }: Props) => {\n  const bgColor = useColorModeValue('blackAlpha.50', 'whiteAlpha.50');\n  const tabIndex = useTabIndexFromQuery(tabs || []);\n\n  if (tabs.length === 1) {\n    return null;\n  }\n\n  return (\n    <Flex className={ className } my={ 8 } alignItems=\"center\" overflow=\"hidden\">\n      { tabs.slice(0, tabIndex).map(({ title, id }) => (\n        <SkeletonTabText\n          key={ id.toString() }\n          title={ title }\n          size={ size }\n        />\n      )) }\n      { tabs.slice(tabIndex, tabIndex + 1).map(({ title, id }) => (\n        <Box key={ id.toString() } bgColor={ bgColor } py={ size === 'sm' ? 1 : 2 } borderRadius=\"base\" flexShrink={ 0 }>\n          <SkeletonTabText\n            key={ id.toString() }\n            title={ title }\n            size={ size }\n          />\n        </Box>\n      )) }\n      { tabs.slice(tabIndex + 1).map(({ title, id }) => (\n        <SkeletonTabText\n          key={ id.toString() }\n          title={ title }\n          size={ size }\n        />\n      )) }\n    </Flex>\n  );\n};\n\nexport default chakra(TabsSkeleton);\n","// we use that regex as a separator when splitting template and dont want to capture variables\n\nimport type { TxInterpretationVariable } from 'types/api/txInterpretation';\n\n// eslint-disable-next-line regexp/no-useless-non-capturing-group\nexport const VAR_REGEXP = /\\{(?:[^}]+)\\}/g;\n\nexport const NATIVE_COIN_SYMBOL_VAR_NAME = 'native';\nexport const WEI_VAR_NAME = 'wei';\n\nexport function extractVariables(templateString: string) {\n\n  const matches = templateString.match(VAR_REGEXP);\n\n  const variablesNames = matches ? matches.map(match => match.slice(1, -1)) : [];\n\n  return variablesNames;\n}\n\nexport function getStringChunks(template: string) {\n  return template.split(VAR_REGEXP);\n}\n\nexport function checkSummary(template: string, variables: Record<string, TxInterpretationVariable>) {\n  const variablesNames = extractVariables(template);\n  let result = true;\n  for (const name of variablesNames) {\n    if (name === NATIVE_COIN_SYMBOL_VAR_NAME || name === WEI_VAR_NAME) {\n      continue;\n    }\n    if (!variables[name] || variables[name].value === undefined || variables[name].value === null) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n}\n\nexport function fillStringVariables(template: string, variables: Record<string, TxInterpretationVariable>) {\n  const variablesNames = extractVariables(template);\n\n  let result = template;\n  variablesNames.forEach(name => {\n    if (variables[name] && variables[name].type === 'string') {\n      result = result.replace(`{${ name }}`, variables[name].value as string);\n    }\n  });\n\n  return result;\n}\n","import { Tooltip, chakra } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { AddressParam } from 'types/api/addressParams';\nimport type {\n  TxInterpretationSummary,\n  TxInterpretationVariable,\n  TxInterpretationVariableString,\n} from 'types/api/txInterpretation';\n\nimport config from 'configs/app';\nimport dayjs from 'lib/date/dayjs';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport { currencyUnits } from 'lib/units';\nimport Skeleton from 'ui/shared/chakra/Skeleton';\nimport Tag from 'ui/shared/chakra/Tag';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport EnsEntity from 'ui/shared/entities/ens/EnsEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\nimport {\n  extractVariables,\n  getStringChunks,\n  fillStringVariables,\n  checkSummary,\n  NATIVE_COIN_SYMBOL_VAR_NAME,\n  WEI_VAR_NAME,\n} from './utils';\n\ntype Props = {\n  summary?: TxInterpretationSummary;\n  isLoading?: boolean;\n  addressDataMap?: Record<string, AddressParam>;\n  className?: string;\n};\n\ntype NonStringTxInterpretationVariable = Exclude<TxInterpretationVariable, TxInterpretationVariableString>;\n\nconst TxInterpretationElementByType = (\n  { variable, addressDataMap }: { variable?: NonStringTxInterpretationVariable; addressDataMap?: Record<string, AddressParam> },\n) => {\n  const onAddressClick = React.useCallback(() => {\n    mixpanel.logEvent(mixpanel.EventTypes.TX_INTERPRETATION_INTERACTION, { Type: 'Address click' });\n  }, []);\n\n  const onTokenClick = React.useCallback(() => {\n    mixpanel.logEvent(mixpanel.EventTypes.TX_INTERPRETATION_INTERACTION, { Type: 'Token click' });\n  }, []);\n\n  const onDomainClick = React.useCallback(() => {\n    mixpanel.logEvent(mixpanel.EventTypes.TX_INTERPRETATION_INTERACTION, { Type: 'Domain click' });\n  }, []);\n\n  if (!variable) {\n    return null;\n  }\n\n  const { type, value } = variable;\n  switch (type) {\n    case 'address': {\n      return (\n        <chakra.span display=\"inline-block\" verticalAlign=\"top\" _notFirst={{ marginLeft: 1 }}>\n          <AddressEntity\n            address={ addressDataMap?.[value.hash] || value }\n            icon={{ marginRight: 1 }}\n            truncation=\"constant\"\n            onClick={ onAddressClick }\n            whiteSpace=\"initial\"\n          />\n        </chakra.span>\n      );\n    }\n    case 'token':\n      return (\n        <chakra.span display=\"inline-block\" verticalAlign=\"top\" _notFirst={{ marginLeft: 1 }}>\n          <TokenEntity\n            token={ value }\n            icon={{ marginRight: 1 }}\n            onlySymbol\n            noCopy\n            width=\"fit-content\"\n            _notFirst={{ marginLeft: 1 }}\n            mr={ 2 }\n            whiteSpace=\"initial\"\n            onClick={ onTokenClick }\n          />\n        </chakra.span>\n      );\n    case 'domain': {\n      if (config.features.nameService.isEnabled) {\n        return (\n          <chakra.span display=\"inline-block\" verticalAlign=\"top\" _notFirst={{ marginLeft: 1 }}>\n            <EnsEntity\n              domain={ value }\n              icon={{ marginRight: 1 }}\n              width=\"fit-content\"\n              _notFirst={{ marginLeft: 1 }}\n              whiteSpace=\"initial\"\n              onClick={ onDomainClick }\n            />\n          </chakra.span>\n        );\n      }\n      return <chakra.span color=\"text_secondary\" whiteSpace=\"pre\">{ value + ' ' }</chakra.span>;\n    }\n    case 'currency': {\n      let numberString = '';\n      if (BigNumber(value).isLessThan(0.1)) {\n        numberString = BigNumber(value).toPrecision(2);\n      } else if (BigNumber(value).isLessThan(10000)) {\n        numberString = BigNumber(value).dp(2).toFormat();\n      } else if (BigNumber(value).isLessThan(1000000)) {\n        numberString = BigNumber(value).dividedBy(1000).toFormat(2) + 'K';\n      } else {\n        numberString = BigNumber(value).dividedBy(1000000).toFormat(2) + 'M';\n      }\n      return <chakra.span>{ numberString + ' ' }</chakra.span>;\n    }\n    case 'timestamp': {\n      return <chakra.span color=\"text_secondary\" whiteSpace=\"pre\">{ dayjs(Number(value) * 1000).format('MMM DD YYYY') }</chakra.span>;\n    }\n    case 'method': {\n      return (\n        <Tag\n          colorScheme={ value === 'Multicall' ? 'teal' : 'gray' }\n          isTruncated\n          ml={ 1 }\n          mr={ 2 }\n          verticalAlign=\"text-top\"\n        >\n          { value }\n        </Tag>\n      );\n    }\n  }\n};\n\nconst TxInterpretation = ({ summary, isLoading, addressDataMap, className }: Props) => {\n  if (!summary) {\n    return null;\n  }\n\n  const template = summary.summary_template;\n  const variables = summary.summary_template_variables;\n\n  if (!checkSummary(template, variables)) {\n    return null;\n  }\n\n  const intermediateResult = fillStringVariables(template, variables);\n\n  const variablesNames = extractVariables(intermediateResult);\n  const chunks = getStringChunks(intermediateResult);\n\n  return (\n    <Skeleton isLoaded={ !isLoading } className={ className } fontWeight={ 500 } whiteSpace=\"pre-wrap\" >\n      <Tooltip label=\"Transaction summary\">\n        <IconSvg name=\"lightning\" boxSize={ 5 } color=\"text_secondary\" mr={ 1 } verticalAlign=\"text-top\"/>\n      </Tooltip>\n      { chunks.map((chunk, index) => {\n        let content = null;\n        if (variablesNames[index] === NATIVE_COIN_SYMBOL_VAR_NAME) {\n          content = <chakra.span>{ currencyUnits.ether + ' ' }</chakra.span>;\n        } else if (variablesNames[index] === WEI_VAR_NAME) {\n          content = <chakra.span>{ currencyUnits.wei + ' ' }</chakra.span>;\n        } else {\n          content = (\n            <TxInterpretationElementByType\n              variable={ variables[variablesNames[index]] as NonStringTxInterpretationVariable }\n              addressDataMap={ addressDataMap }\n            />\n          );\n        }\n        return (\n          <chakra.span key={ chunk + index }>\n            <chakra.span color=\"text_secondary\">{ chunk.trim() + (chunk.trim() && variablesNames[index] ? ' ' : '') }</chakra.span>\n            { index < variablesNames.length && content }\n          </chakra.span>\n        );\n      }) }\n    </Skeleton>\n  );\n};\n\nexport default chakra(TxInterpretation);\n","import { Box, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Log } from 'types/api/log';\n\nimport { LOG } from 'stubs/log';\nimport { generateListStub } from 'stubs/utils';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport LogItem from 'ui/shared/logs/LogItem';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\n\nimport type { TxQuery } from './useTxQuery';\n\ninterface Props {\n  txQuery: TxQuery;\n  logsFilter?: (log: Log) => boolean;\n}\n\nconst TxLogs = ({ txQuery, logsFilter }: Props) => {\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_logs',\n    pathParams: { hash: txQuery.data?.hash },\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.hash) && Boolean(txQuery.data?.status),\n      placeholderData: generateListStub<'tx_logs'>(LOG, 3, { next_page_params: null }),\n    },\n  });\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (isError || txQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  let items: Array<Log> = [];\n\n  if (data?.items) {\n    if (isPlaceholderData) {\n      items = data?.items;\n    } else {\n      items = logsFilter ? data.items.filter(logsFilter) : data.items;\n    }\n  }\n\n  if (!items.length) {\n    return <Text as=\"span\">There are no logs for this transaction.</Text>;\n  }\n\n  return (\n    <Box>\n      { pagination.isVisible && (\n        <ActionBar mt={ -6 }>\n          <Pagination ml=\"auto\" { ...pagination }/>\n        </ActionBar>\n      ) }\n      { items.map((item, index) => (\n        <LogItem\n          key={ index }\n          { ...item }\n          type=\"transaction\"\n          isLoading={ isPlaceholderData }\n          defaultDataType={ txQuery.data?.zilliqa?.is_scilla ? 'UTF-8' : undefined }\n        />\n      )) }\n    </Box>\n  );\n};\n\nexport default TxLogs;\n","import { Alert, Spinner } from '@chakra-ui/react';\nimport React from 'react';\n\nconst TxPendingAlert = () => {\n  return (\n    <Alert>\n      <Spinner size=\"sm\" mr={ 2 }/>\n      This transaction is pending confirmation.\n    </Alert>\n  );\n};\n\nexport default TxPendingAlert;\n","import { Alert } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  status: 'error' | 'close';\n}\n\nconst TxSocketAlert = ({ status }: Props) => {\n  const text = status === 'close' ?\n    'Connection is lost. Please click here to update transaction info.' :\n    'An error has occurred while fetching transaction info. Please click here to update.';\n\n  return <Alert status=\"warning\" as=\"a\" href={ window.document.location.href }>{ text }</Alert>;\n};\n\nexport default React.memo(TxSocketAlert);\n","import { Hide, Show } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { TokenType } from 'types/api/token';\nimport type { TokenTransfer } from 'types/api/tokenTransfer';\n\nimport getFilterValuesFromQuery from 'lib/getFilterValuesFromQuery';\nimport { apos } from 'lib/html-entities';\nimport { TOKEN_TYPE_IDS } from 'lib/token/tokenTypes';\nimport { getTokenTransfersStub } from 'stubs/token';\nimport ActionBar, { ACTION_BAR_HEIGHT_DESKTOP } from 'ui/shared/ActionBar';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TokenTransferFilter from 'ui/shared/TokenTransfer/TokenTransferFilter';\nimport TokenTransferList from 'ui/shared/TokenTransfer/TokenTransferList';\nimport TokenTransferTable from 'ui/shared/TokenTransfer/TokenTransferTable';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\n\nimport type { TxQuery } from './useTxQuery';\n\nconst getTokenFilterValue = (getFilterValuesFromQuery<TokenType>).bind(null, TOKEN_TYPE_IDS);\n\ninterface Props {\n  txQuery: TxQuery;\n  tokenTransferFilter?: (data: TokenTransfer) => boolean;\n}\n\nconst TxTokenTransfer = ({ txQuery, tokenTransferFilter }: Props) => {\n  const router = useRouter();\n\n  const [ typeFilter, setTypeFilter ] = React.useState<Array<TokenType>>(getTokenFilterValue(router.query.type) || []);\n\n  const tokenTransferQuery = useQueryWithPages({\n    resourceName: 'tx_token_transfers',\n    pathParams: { hash: txQuery.data?.hash.toString() },\n    options: {\n      enabled: !txQuery.isPlaceholderData && Boolean(txQuery.data?.status && txQuery.data?.hash),\n      placeholderData: getTokenTransfersStub(),\n    },\n    filters: { type: typeFilter },\n  });\n\n  const handleTypeFilterChange = React.useCallback((nextValue: Array<TokenType>) => {\n    tokenTransferQuery.onFilterChange({ type: nextValue });\n    setTypeFilter(nextValue);\n  }, [ tokenTransferQuery ]);\n\n  if (!txQuery.isPending && !txQuery.isPlaceholderData && !txQuery.isError && !txQuery.data.status) {\n    return txQuery.socketStatus ? <TxSocketAlert status={ txQuery.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (txQuery.isError || tokenTransferQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  const numActiveFilters = typeFilter.length;\n  const isActionBarHidden = !numActiveFilters && !tokenTransferQuery.data?.items.length;\n\n  let items: Array<TokenTransfer> = [];\n\n  if (tokenTransferQuery.data?.items) {\n    if (tokenTransferQuery.isPlaceholderData) {\n      items = tokenTransferQuery.data?.items;\n    } else {\n      items = tokenTransferFilter ? tokenTransferQuery.data.items.filter(tokenTransferFilter) : tokenTransferQuery.data.items;\n    }\n  }\n\n  const content = tokenTransferQuery.data?.items ? (\n    <>\n      <Hide below=\"lg\" ssr={ false }>\n        <TokenTransferTable data={ items } top={ isActionBarHidden ? 0 : ACTION_BAR_HEIGHT_DESKTOP } isLoading={ tokenTransferQuery.isPlaceholderData }/>\n      </Hide>\n      <Show below=\"lg\" ssr={ false }>\n        <TokenTransferList data={ items } isLoading={ tokenTransferQuery.isPlaceholderData }/>\n      </Show>\n    </>\n  ) : null;\n\n  const actionBar = !isActionBarHidden ? (\n    <ActionBar mt={ -6 }>\n      <TokenTransferFilter\n        defaultTypeFilters={ typeFilter }\n        onTypeFilterChange={ handleTypeFilterChange }\n        appliedFiltersNum={ numActiveFilters }\n        isLoading={ tokenTransferQuery.isPlaceholderData }\n      />\n      <Pagination ml=\"auto\" { ...tokenTransferQuery.pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <DataListDisplay\n      isError={ txQuery.isError || tokenTransferQuery.isError }\n      items={ items }\n      emptyText=\"There are no token transfers.\"\n      filterProps={{\n        emptyFilteredText: `Couldn${ apos }t find any token transfer that matches your query.`,\n        hasActiveFilters: Boolean(numActiveFilters),\n      }}\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n};\n\nexport default TxTokenTransfer;\n","import { useBoolean } from '@chakra-ui/react';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { SocketMessage } from 'lib/socket/types';\nimport type { Transaction } from 'types/api/transaction';\n\nimport config from 'configs/app';\nimport type { ResourceError } from 'lib/api/resources';\nimport useApiQuery, { getResourceKey } from 'lib/api/useApiQuery';\nimport { retry } from 'lib/api/useQueryClientConfig';\nimport { SECOND } from 'lib/consts';\nimport delay from 'lib/delay';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport useSocketChannel from 'lib/socket/useSocketChannel';\nimport useSocketMessage from 'lib/socket/useSocketMessage';\nimport { TX, TX_ZKEVM_L2 } from 'stubs/tx';\n\nconst rollupFeature = config.features.rollup;\n\nexport type TxQuery = UseQueryResult<Transaction, ResourceError<{ status: number }>> & {\n  socketStatus: 'close' | 'error' | undefined;\n  setRefetchOnError: {\n    on: () => void;\n    off: () => void;\n    toggle: () => void;\n  };\n};\n\ninterface Params {\n  hash?: string;\n  isEnabled?: boolean;\n}\n\nexport default function useTxQuery(params?: Params): TxQuery {\n  const [ socketStatus, setSocketStatus ] = React.useState<'close' | 'error'>();\n  const [ isRefetchEnabled, setRefetchEnabled ] = useBoolean(false);\n\n  const router = useRouter();\n  const queryClient = useQueryClient();\n\n  const hash = params?.hash ?? getQueryParamString(router.query.hash);\n\n  const queryResult = useApiQuery<'tx', { status: number }>('tx', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && params?.isEnabled !== false,\n      refetchOnMount: false,\n      placeholderData: rollupFeature.isEnabled && rollupFeature.type === 'zkEvm' ? TX_ZKEVM_L2 : TX,\n      retry: (failureCount, error) => {\n        if (isRefetchEnabled) {\n          return false;\n        }\n\n        return retry(failureCount, error);\n      },\n      refetchInterval: (): number | false => {\n        return isRefetchEnabled ? 15 * SECOND : false;\n      },\n    },\n  });\n  const { data, isError, isPlaceholderData, isPending } = queryResult;\n\n  const handleStatusUpdateMessage: SocketMessage.TxStatusUpdate['handler'] = React.useCallback(async() => {\n    await delay(5 * SECOND);\n    queryClient.invalidateQueries({\n      queryKey: getResourceKey('tx', { pathParams: { hash } }),\n    });\n  }, [ queryClient, hash ]);\n\n  const handleSocketClose = React.useCallback(() => {\n    setSocketStatus('close');\n  }, []);\n\n  const handleSocketError = React.useCallback(() => {\n    setSocketStatus('error');\n  }, []);\n\n  const channel = useSocketChannel({\n    topic: `transactions:${ hash }`,\n    onSocketClose: handleSocketClose,\n    onSocketError: handleSocketError,\n    isDisabled: isPending || isPlaceholderData || isError || data.status !== null,\n  });\n  useSocketMessage({\n    channel,\n    event: 'collated',\n    handler: handleStatusUpdateMessage,\n  });\n\n  return React.useMemo(() => ({\n    ...queryResult,\n    socketStatus,\n    setRefetchOnError: setRefetchEnabled,\n  }), [ queryResult, socketStatus, setRefetchEnabled ]);\n}\n"],"names":["TX_INTERPRETATION","data","summaries","summary_template","summary_template_variables","action_type","type","value","source_amount","destination_amount","destination_token","TOKEN_INFO_ERC_20","TX_ACTIONS_BLOCK_ID","React","children","DetailsActionsWrapper","isLoading","hasScroll","setHasScroll","DetailsInfoItem","id","hint","span","gradientHeight","onScrollVisibilityChange","alignItems","rowGap","w","maxH","chakra","className","colSpan","GridItem","base","undefined","lg","mt","mb","borderBottom","borderColor","timestamp","DetailsTimestamp","IconSvg","name","boxSize","color","Skeleton","isLoaded","ml","dayjs","fromNow","TextSeparator","whiteSpace","format","SkeletonTabText","size","title","borderRadius","borderWidth","fontWeight","mx","flexShrink","TabsSkeleton","tabs","bgColor","useColorModeValue","tabIndex","useTabIndexFromQuery","length","Flex","my","overflow","slice","map","toString","Box","py","VAR_REGEXP","extractVariables","templateString","matches","match","TxInterpretationElementByType","variable","addressDataMap","onAddressClick","mixpanel","TX_INTERPRETATION_INTERACTION","Type","onTokenClick","onDomainClick","display","verticalAlign","_notFirst","marginLeft","AddressEntity","address","hash","icon","marginRight","truncation","onClick","TokenEntity","token","onlySymbol","noCopy","width","mr","config","features","nameService","isEnabled","EnsEntity","domain","numberString","BigNumber","isLessThan","toPrecision","dp","toFormat","dividedBy","Number","Tag","colorScheme","isTruncated","summary","template","variables","checkSummary","variablesNames","result","NATIVE_COIN_SYMBOL_VAR_NAME","WEI_VAR_NAME","intermediateResult","fillStringVariables","forEach","replace","chunks","split","getStringChunks","Tooltip","label","chunk","index","content","currencyUnits","ether","wei","trim","txQuery","TxLogs","logsFilter","isPlaceholderData","isError","pagination","useQueryWithPages","resourceName","pathParams","options","enabled","Boolean","status","placeholderData","generateListStub","LOG","next_page_params","isPending","socketStatus","TxSocketAlert","TxPendingAlert","DataFetchAlert","items","filter","isVisible","ActionBar","Pagination","item","LogItem","defaultDataType","zilliqa","is_scilla","Text","as","Alert","Spinner","href","window","document","location","text","getTokenFilterValue","bind","TOKEN_TYPE_IDS","tokenTransferQuery","TxTokenTransfer","tokenTransferFilter","router","useRouter","typeFilter","setTypeFilter","query","getTokenTransfersStub","filters","handleTypeFilterChange","onFilterChange","nextValue","numActiveFilters","isActionBarHidden","Hide","below","ssr","TokenTransferTable","top","ACTION_BAR_HEIGHT_DESKTOP","Show","TokenTransferList","actionBar","TokenTransferFilter","defaultTypeFilters","onTypeFilterChange","appliedFiltersNum","DataListDisplay","emptyText","filterProps","emptyFilteredText","apos","hasActiveFilters","rollupFeature","rollup","useTxQuery","params","setSocketStatus","isRefetchEnabled","setRefetchEnabled","useBoolean","queryClient","useQueryClient","getQueryParamString","queryResult","useApiQuery","queryOptions","refetchOnMount","TX_ZKEVM_L2","TX","retry","failureCount","error","refetchInterval","SECOND","handleStatusUpdateMessage","delay","invalidateQueries","queryKey","getResourceKey","handleSocketClose","handleSocketError","channel","useSocketChannel","topic","onSocketClose","onSocketError","isDisabled","useSocketMessage","event","handler","setRefetchOnError"],"sourceRoot":"","ignoreList":[]}
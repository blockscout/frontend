{"version":3,"file":"static/chunks/1648-65cc54f65b4eb4fe.js","mappings":"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","sources":["webpack://_N_E/./lib/getErrorMessage.ts","webpack://_N_E/./ui/privateTags/AddressModal/AddressForm.tsx","webpack://_N_E/./ui/privateTags/AddressModal/AddressModal.tsx","webpack://_N_E/./ui/shared/forms/validators/transaction.ts","webpack://_N_E/./ui/privateTags/TransactionModal/TransactionForm.tsx","webpack://_N_E/./ui/privateTags/TransactionModal/TransactionModal.tsx","webpack://_N_E/./ui/shared/FormModal.tsx","webpack://_N_E/./ui/shared/FormSubmitAlert.tsx","webpack://_N_E/./ui/shared/Tabs/RoutedTabs.tsx","webpack://_N_E/./ui/shared/Tabs/useTabIndexFromQuery.tsx"],"sourcesContent":["export default function getErrorMessage(error: Record<string, Array<string>> | undefined, field: string) {\n  return error?.[field]?.join(', ');\n}\n","import {\n  Box,\n  Button,\n} from '@chakra-ui/react';\nimport { useMutation } from '@tanstack/react-query';\nimport React, { useState } from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport type { AddressTag, AddressTagErrors } from 'types/api/account';\n\nimport type { ResourceErrorAccount } from 'lib/api/resources';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport getErrorMessage from 'lib/getErrorMessage';\nimport FormFieldAddress from 'ui/shared/forms/fields/FormFieldAddress';\nimport FormFieldText from 'ui/shared/forms/fields/FormFieldText';\n\nconst TAG_MAX_LENGTH = 35;\n\ntype Props = {\n  data?: Partial<AddressTag>;\n  onClose: () => void;\n  onSuccess: () => Promise<void>;\n  setAlertVisible: (isAlertVisible: boolean) => void;\n};\n\ntype Inputs = {\n  address: string;\n  tag: string;\n};\n\nconst AddressForm: React.FC<Props> = ({ data, onClose, onSuccess, setAlertVisible }) => {\n  const apiFetch = useApiFetch();\n  const [ pending, setPending ] = useState(false);\n  const formApi = useForm<Inputs>({\n    mode: 'onTouched',\n    defaultValues: {\n      address: data?.address_hash || '',\n      tag: data?.name || '',\n    },\n  });\n\n  const { mutateAsync } = useMutation({\n    mutationFn: (formData: Inputs) => {\n      const body = {\n        name: formData?.tag,\n        address_hash: formData?.address,\n      };\n\n      const isEdit = data?.id;\n      if (isEdit) {\n        return apiFetch('private_tags_address', {\n          pathParams: { id: String(data.id) },\n          fetchParams: { method: 'PUT', body },\n        });\n      }\n\n      return apiFetch('private_tags_address', { fetchParams: { method: 'POST', body } });\n    },\n    onError: (error: ResourceErrorAccount<AddressTagErrors>) => {\n      setPending(false);\n      const errorMap = error.payload?.errors;\n      if (errorMap?.address_hash || errorMap?.name) {\n        errorMap?.address_hash && formApi.setError('address', { type: 'custom', message: getErrorMessage(errorMap, 'address_hash') });\n        errorMap?.name && formApi.setError('tag', { type: 'custom', message: getErrorMessage(errorMap, 'name') });\n      } else if (errorMap?.identity_id) {\n        formApi.setError('address', { type: 'custom', message: getErrorMessage(errorMap, 'identity_id') });\n      } else {\n        setAlertVisible(true);\n      }\n    },\n    onSuccess: async() => {\n      await onSuccess();\n      onClose();\n      setPending(false);\n    },\n  });\n\n  const onSubmit: SubmitHandler<Inputs> = async(formData) => {\n    setAlertVisible(false);\n    setPending(true);\n    await mutateAsync(formData);\n  };\n\n  return (\n    <FormProvider { ...formApi }>\n      <form noValidate onSubmit={ formApi.handleSubmit(onSubmit) }>\n        <FormFieldAddress<Inputs>\n          name=\"address\"\n          isRequired\n          bgColor=\"dialog_bg\"\n          mb={ 5 }\n        />\n        <FormFieldText<Inputs>\n          name=\"tag\"\n          placeholder=\"Private tag (max 35 characters)\"\n          isRequired\n          rules={{\n            maxLength: TAG_MAX_LENGTH,\n          }}\n          bgColor=\"dialog_bg\"\n          mb={ 8 }\n        />\n        <Box marginTop={ 8 }>\n          <Button\n            size=\"lg\"\n            type=\"submit\"\n            isDisabled={ !formApi.formState.isDirty }\n            isLoading={ pending }\n          >\n            { data ? 'Save changes' : 'Add tag' }\n          </Button>\n        </Box>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default AddressForm;\n","import React, { useCallback, useState } from 'react';\n\nimport type { AddressTag } from 'types/api/account';\n\nimport * as mixpanel from 'lib/mixpanel/index';\nimport FormModal from 'ui/shared/FormModal';\n\nimport AddressForm from './AddressForm';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => Promise<void>;\n  data?: Partial<AddressTag>;\n  pageType: string;\n};\n\nconst AddressModal: React.FC<Props> = ({ isOpen, onClose, onSuccess, data, pageType }) => {\n  const title = data?.id ? 'Edit address tag' : 'New address tag';\n  const text = !data?.id ? 'Label any address with a private address tag (up to 35 chars) to customize your explorer experience.' : '';\n\n  const [ isAlertVisible, setAlertVisible ] = useState(false);\n\n  React.useEffect(() => {\n    isOpen && !data?.id && mixpanel.logEvent(\n      mixpanel.EventTypes.PRIVATE_TAG,\n      { Action: 'Form opened', 'Page type': pageType, 'Tag type': 'Address' },\n    );\n  }, [ data?.id, isOpen, pageType ]);\n\n  const handleSuccess = React.useCallback(() => {\n    if (!data?.id) {\n      mixpanel.logEvent(\n        mixpanel.EventTypes.PRIVATE_TAG,\n        { Action: 'Submit', 'Page type': pageType, 'Tag type': 'Address' },\n      );\n    }\n    return onSuccess();\n  }, [ data?.id, onSuccess, pageType ]);\n\n  const renderForm = useCallback(() => {\n    return <AddressForm data={ data } onClose={ onClose } onSuccess={ handleSuccess } setAlertVisible={ setAlertVisible }/>;\n  }, [ data, onClose, handleSuccess ]);\n  return (\n    <FormModal<AddressTag>\n      isOpen={ isOpen }\n      onClose={ onClose }\n      title={ title }\n      text={ text }\n      renderForm={ renderForm }\n      isAlertVisible={ isAlertVisible }\n      setAlertVisible={ setAlertVisible }\n    />\n  );\n};\n\nexport default AddressModal;\n","// maybe it depends on the network??\n\nexport const TRANSACTION_HASH_REGEXP = /^0x[a-fA-F\\d]{64}$/;\n\nexport const TRANSACTION_HASH_LENGTH = 66;\n","import {\n  Box,\n  Button,\n} from '@chakra-ui/react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport React, { useState } from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport type { TransactionTag, TransactionTagErrors } from 'types/api/account';\n\nimport type { ResourceErrorAccount } from 'lib/api/resources';\nimport { resourceKey } from 'lib/api/resources';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport getErrorMessage from 'lib/getErrorMessage';\nimport FormFieldText from 'ui/shared/forms/fields/FormFieldText';\nimport { TRANSACTION_HASH_LENGTH, TRANSACTION_HASH_REGEXP } from 'ui/shared/forms/validators/transaction';\n\nconst TAG_MAX_LENGTH = 35;\n\ntype Props = {\n  data?: Partial<TransactionTag>;\n  onClose: () => void;\n  onSuccess: () => Promise<void>;\n  setAlertVisible: (isAlertVisible: boolean) => void;\n};\n\ntype Inputs = {\n  transaction: string;\n  tag: string;\n};\n\nconst TransactionForm: React.FC<Props> = ({ data, onClose, onSuccess, setAlertVisible }) => {\n  const [ pending, setPending ] = useState(false);\n\n  const formApi = useForm<Inputs>({\n    mode: 'onTouched',\n    defaultValues: {\n      transaction: data?.transaction_hash || '',\n      tag: data?.name || '',\n    },\n  });\n\n  const queryClient = useQueryClient();\n  const apiFetch = useApiFetch();\n\n  const { mutateAsync } = useMutation({\n    mutationFn: (formData: Inputs) => {\n      const body = {\n        name: formData?.tag,\n        transaction_hash: formData?.transaction,\n      };\n      const isEdit = data?.id;\n\n      if (isEdit) {\n        return apiFetch('private_tags_tx', {\n          pathParams: { id: String(data.id) },\n          fetchParams: { method: 'PUT', body },\n        });\n      }\n\n      return apiFetch('private_tags_tx', { fetchParams: { method: 'POST', body } });\n    },\n    onError: (error: ResourceErrorAccount<TransactionTagErrors>) => {\n      setPending(false);\n      const errorMap = error.payload?.errors;\n      if (errorMap?.transaction_hash || errorMap?.name) {\n        errorMap?.transaction_hash && formApi.setError('transaction', { type: 'custom', message: getErrorMessage(errorMap, 'transaction_hash') });\n        errorMap?.name && formApi.setError('tag', { type: 'custom', message: getErrorMessage(errorMap, 'name') });\n      } else if (errorMap?.identity_id) {\n        formApi.setError('transaction', { type: 'custom', message: getErrorMessage(errorMap, 'identity_id') });\n      } else {\n        setAlertVisible(true);\n      }\n    },\n    onSuccess: async() => {\n      await queryClient.refetchQueries({ queryKey: [ resourceKey('private_tags_tx') ] });\n      await onSuccess();\n      onClose();\n      setPending(false);\n    },\n  });\n\n  const onSubmit: SubmitHandler<Inputs> = async(formData) => {\n    setPending(true);\n    await mutateAsync(formData);\n  };\n\n  return (\n    <FormProvider { ...formApi }>\n      <form noValidate onSubmit={ formApi.handleSubmit(onSubmit) }>\n        <FormFieldText<Inputs>\n          name=\"transaction\"\n          placeholder=\"Transaction hash (0x...)\"\n          isRequired\n          rules={{\n            maxLength: TRANSACTION_HASH_LENGTH,\n            pattern: TRANSACTION_HASH_REGEXP,\n          }}\n          bgColor=\"dialog_bg\"\n          mb={ 5 }\n        />\n        <FormFieldText<Inputs>\n          name=\"tag\"\n          placeholder=\"Private tag (max 35 characters)\"\n          isRequired\n          rules={{\n            maxLength: TAG_MAX_LENGTH,\n          }}\n          bgColor=\"dialog_bg\"\n          mb={ 8 }\n        />\n        <Box marginTop={ 8 }>\n          <Button\n            size=\"lg\"\n            type=\"submit\"\n            isDisabled={ !formApi.formState.isDirty }\n            isLoading={ pending }\n          >\n            { data ? 'Save changes' : 'Add tag' }\n          </Button>\n        </Box>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default TransactionForm;\n","import React, { useCallback, useState } from 'react';\n\nimport type { TransactionTag } from 'types/api/account';\n\nimport { PAGE_TYPE_DICT } from 'lib/mixpanel/getPageType';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport FormModal from 'ui/shared/FormModal';\n\nimport TransactionForm from './TransactionForm';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: () => Promise<void>;\n  data?: Partial<TransactionTag>;\n};\n\nconst AddressModal: React.FC<Props> = ({ isOpen, onClose, onSuccess, data }) => {\n  const title = data ? 'Edit transaction tag' : 'New transaction tag';\n  const text = !data ? 'Label any transaction with a private transaction tag (up to 35 chars) to customize your explorer experience.' : '';\n\n  const [ isAlertVisible, setAlertVisible ] = useState(false);\n\n  React.useEffect(() => {\n    isOpen && !data?.id && mixpanel.logEvent(\n      mixpanel.EventTypes.PRIVATE_TAG,\n      { Action: 'Form opened', 'Page type': PAGE_TYPE_DICT['/account/tag-address'], 'Tag type': 'Tx' },\n    );\n  }, [ data?.id, isOpen ]);\n\n  const handleSuccess = React.useCallback(async() => {\n    onSuccess?.();\n    if (!data?.id) {\n      mixpanel.logEvent(\n        mixpanel.EventTypes.PRIVATE_TAG,\n        { Action: 'Submit', 'Page type': PAGE_TYPE_DICT['/account/tag-address'], 'Tag type': 'Tx' },\n      );\n    }\n  }, [ data?.id, onSuccess ]);\n\n  const renderForm = useCallback(() => {\n    return <TransactionForm data={ data } onClose={ onClose } onSuccess={ handleSuccess } setAlertVisible={ setAlertVisible }/>;\n  }, [ data, handleSuccess, onClose ]);\n  return (\n    <FormModal<TransactionTag>\n      isOpen={ isOpen }\n      onClose={ onClose }\n      title={ title }\n      text={ text }\n      renderForm={ renderForm }\n      isAlertVisible={ isAlertVisible }\n      setAlertVisible={ setAlertVisible }\n    />\n  );\n};\n\nexport default AddressModal;\n","import {\n  Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Text,\n} from '@chakra-ui/react';\nimport React, { useCallback } from 'react';\n\nimport useIsMobile from 'lib/hooks/useIsMobile';\nimport FormSubmitAlert from 'ui/shared/FormSubmitAlert';\n\ninterface Props<TData> {\n  isOpen: boolean;\n  onClose: () => void;\n  data?: TData;\n  title: string;\n  text?: string;\n  renderForm: () => React.JSX.Element;\n  isAlertVisible?: boolean;\n  setAlertVisible?: (isAlertVisible: boolean) => void;\n}\n\nexport default function FormModal<TData>({\n  isOpen,\n  onClose,\n  title,\n  text,\n  renderForm,\n  isAlertVisible,\n  setAlertVisible,\n}: Props<TData>) {\n\n  const onModalClose = useCallback(() => {\n    setAlertVisible && setAlertVisible(false);\n    onClose();\n  }, [ onClose, setAlertVisible ]);\n\n  const isMobile = useIsMobile();\n\n  return (\n    <Modal isOpen={ isOpen } onClose={ onModalClose } size={ isMobile ? 'full' : 'md' }>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader fontWeight=\"500\" textStyle=\"h3\">{ title }</ModalHeader>\n        <ModalCloseButton/>\n        <ModalBody>\n          { (isAlertVisible || text) && (\n            <Box marginBottom={{ base: 6, lg: 8 }}>\n              { text && (\n                <Text lineHeight=\"30px\" mb={ 3 }>\n                  { text }\n                </Text>\n              ) }\n              { isAlertVisible && <FormSubmitAlert/> }\n            </Box>\n          ) }\n          { renderForm() }\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { Alert, AlertDescription } from '@chakra-ui/react';\nimport React from 'react';\n\nconst FormSubmitAlert = () => {\n  return (\n    <Alert status=\"error\">\n      <AlertDescription>\n        There has been an error processing your request\n      </AlertDescription>\n    </Alert>\n  );\n};\n\nexport default FormSubmitAlert;\n","import type { ChakraProps, ThemingProps } from '@chakra-ui/react';\nimport { chakra } from '@chakra-ui/react';\nimport { pickBy } from 'es-toolkit';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useRef } from 'react';\n\nimport type { RoutedTab } from './types';\n\nimport TabsWithScroll from './TabsWithScroll';\nimport useTabIndexFromQuery from './useTabIndexFromQuery';\n\ninterface Props extends ThemingProps<'Tabs'> {\n  tabs: Array<RoutedTab>;\n  tabListProps?: ChakraProps | (({ isSticky, activeTabIndex }: { isSticky: boolean; activeTabIndex: number }) => ChakraProps);\n  rightSlot?: React.ReactNode;\n  rightSlotProps?: ChakraProps;\n  leftSlot?: React.ReactNode;\n  leftSlotProps?: ChakraProps;\n  stickyEnabled?: boolean;\n  className?: string;\n  onTabChange?: (index: number) => void;\n  isLoading?: boolean;\n}\n\nconst RoutedTabs = ({\n  tabs,\n  tabListProps,\n  rightSlot,\n  rightSlotProps,\n  leftSlot,\n  leftSlotProps,\n  stickyEnabled,\n  className,\n  onTabChange,\n  isLoading,\n  ...themeProps\n}: Props) => {\n  const router = useRouter();\n  const tabIndex = useTabIndexFromQuery(tabs);\n  const tabsRef = useRef<HTMLDivElement>(null);\n\n  const handleTabChange = React.useCallback((index: number) => {\n    const nextTab = tabs[index];\n\n    const queryForPathname = pickBy(router.query, (value, key) => router.pathname.includes(`[${ key }]`));\n    const tabId = Array.isArray(nextTab.id) ? nextTab.id[0] : nextTab.id;\n    router.push(\n      { pathname: router.pathname, query: { ...queryForPathname, tab: tabId } },\n      undefined,\n      { shallow: true },\n    );\n\n    onTabChange?.(index);\n  }, [ tabs, router, onTabChange ]);\n\n  useEffect(() => {\n    if (router.query.scroll_to_tabs) {\n      tabsRef?.current?.scrollIntoView(true);\n      delete router.query.scroll_to_tabs;\n      router.push(\n        {\n          pathname: router.pathname,\n          query: router.query,\n        },\n        undefined,\n        { shallow: true },\n      );\n    }\n  // replicate componentDidMount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <TabsWithScroll\n      tabs={ tabs }\n      tabListProps={ tabListProps }\n      leftSlot={ leftSlot }\n      leftSlotProps={ leftSlotProps }\n      rightSlot={ rightSlot }\n      rightSlotProps={ rightSlotProps }\n      stickyEnabled={ stickyEnabled }\n      onTabChange={ handleTabChange }\n      defaultTabIndex={ tabIndex }\n      isLoading={ isLoading }\n      { ...themeProps }\n    />\n  );\n};\n\nexport default React.memo(chakra(RoutedTabs));\n","import { useRouter } from 'next/router';\n\nimport type { RoutedTab } from './types';\n\nimport getQueryParamString from 'lib/router/getQueryParamString';\n\nexport default function useTabIndexFromQuery(tabs: Array<RoutedTab>) {\n  const router = useRouter();\n  const tabFromQuery = getQueryParamString(router.query.tab);\n\n  if (!tabFromQuery) {\n    return 0;\n  }\n\n  const tabIndex = tabs.findIndex(({ id, subTabs }) => {\n    if (Array.isArray(id)) {\n      return id.includes(tabFromQuery);\n    }\n\n    return id === tabFromQuery || subTabs?.some((id) => id === tabFromQuery);\n  });\n\n  if (tabIndex < 0) {\n    return 0;\n  }\n\n  return tabIndex;\n}\n"],"names":["getErrorMessage","error","field","join","data","onClose","AddressForm","onSuccess","setAlertVisible","apiFetch","useApiFetch","pending","setPending","useState","formApi","useForm","mode","defaultValues","address","address_hash","tag","name","mutateAsync","useMutation","mutationFn","body","formData","isEdit","id","pathParams","String","fetchParams","method","onError","errorMap","payload","errors","setError","type","message","identity_id","onSubmit","FormProvider","form","noValidate","handleSubmit","FormFieldAddress","isRequired","bgColor","mb","FormFieldText","placeholder","rules","maxLength","TAG_MAX_LENGTH","Box","marginTop","Button","size","isDisabled","formState","isDirty","isLoading","isOpen","AddressModal","pageType","title","text","isAlertVisible","React","mixpanel","PRIVATE_TAG","Action","handleSuccess","renderForm","useCallback","FormModal","TRANSACTION_HASH_REGEXP","TransactionForm","transaction","transaction_hash","queryClient","useQueryClient","refetchQueries","queryKey","resourceKey","TRANSACTION_HASH_LENGTH","pattern","PAGE_TYPE_DICT","onModalClose","isMobile","useIsMobile","Modal","ModalOverlay","ModalContent","ModalHeader","fontWeight","textStyle","ModalCloseButton","ModalBody","marginBottom","base","lg","Text","lineHeight","FormSubmitAlert","Alert","status","AlertDescription","chakra","RoutedTabs","tabs","tabListProps","rightSlot","rightSlotProps","leftSlot","leftSlotProps","stickyEnabled","className","onTabChange","themeProps","router","useRouter","tabIndex","useTabIndexFromQuery","tabsRef","useRef","handleTabChange","nextTab","index","queryForPathname","pickBy","query","value","key","pathname","includes","tabId","Array","isArray","push","tab","undefined","shallow","useEffect","scroll_to_tabs","current","scrollIntoView","TabsWithScroll","defaultTabIndex","tabFromQuery","getQueryParamString","findIndex","subTabs","some"],"sourceRoot":"","ignoreList":[]}